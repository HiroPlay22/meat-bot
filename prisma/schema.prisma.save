generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  discordId String   @unique
  name      String?
  optIn     Boolean  @default(false)
  joinedAt  DateTime @default(now())
}

model CommandStat {
  command   String   @id
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
}

model Feedback {
  id          String   @id @default(cuid())
  protocolNo  Int      @unique
  userId      String
  username    String
  serverId    String
  title       String
  description String
  category    String
  importance  String
  module      String?
  fileUrl     String?
  createdAt   DateTime @default(now())
}

model FunGame {
  id       String  @id @default(cuid())
  name     String  @unique
  emoji    String?
  isFree   Boolean @default(false)
  wonPolls Poll[]  @relation("PollWinner")
  votes    Vote[]
  polls    Poll[]  @relation("PollGames")
}

model Poll {
  id         String    @id @default(cuid())
  question   String
  type       String
  pollNumber Int
  messageId  String
  createdAt  DateTime  @default(now())
  endedAt    DateTime?
  winnerId   String?
  winner     FunGame?  @relation("PollWinner", fields: [winnerId], references: [id])
  votes      Vote[]
  games      FunGame[] @relation("PollGames")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  pollId    String
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id])
  game      FunGame  @relation(fields: [gameId], references: [id])
}

model DinoName {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  color       String?
  type        String?
  size        String?
  style       String?
  approved    Boolean  @default(false)
  submittedBy String?
  createdAt   DateTime @default(now())
}

model DinoStats {
  id           Int      @id @default(autoincrement())
  totalUses    Int      @default(0)
  totalRerolls Int      @default(0)
  updatedAt    DateTime @updatedAt
}

model GlobalStats {
  id                   String    @id @default(cuid())
  timestamp            DateTime  @default(now())
  totalGuilds          Int       @default(0)
  lastBotOnline        DateTime?
  dbSizeMB             Float     @default(0)
  totalDinoSuggestions Int       @default(0)
  totalDinoApproved    Int       @default(0)
  totalFeedbacks       Int       @default(0)
  totalVotingsStarted  Int       @default(0)
  totalVotesCast       Int       @default(0)
  totalGamesInDB       Int       @default(0)
  totalFungamesViews   Int       @default(0)
}

model GuildStats {
  id                String    @id @default(cuid())
  guildId           String
  timestamp         DateTime  @default(now())
  dinoSuggestions   Int       @default(0)
  dinoApproved      Int       @default(0)
  feedbacks         Int       @default(0)
  votingsStarted    Int       @default(0)
  votesCast         Int       @default(0)
  gamesInDB         Int       @default(0)
  fungamesViews     Int       @default(0)
  memberCount       Int       @default(0)
  memberOnline      Int       @default(0)
  textChannelCount  Int       @default(0)
  voiceChannelCount Int       @default(0)
  roleCount         Int       @default(0)
  createdAt         DateTime?
  newMembers24h     Int       @default(0)
}

model VotingStats {
  id         String    @id @default(cuid())
  votingType String
  startedAt  DateTime
  endedAt    DateTime?
  votesCast  Int       @default(0)
  guildId    String?
}

model FeedbackStats {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  guildId     String?
  submittedBy String?
}
