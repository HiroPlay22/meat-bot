
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CommandStat
 * 
 */
export type CommandStat = $Result.DefaultSelection<Prisma.$CommandStatPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model FunGame
 * 
 */
export type FunGame = $Result.DefaultSelection<Prisma.$FunGamePayload>
/**
 * Model Poll
 * 
 */
export type Poll = $Result.DefaultSelection<Prisma.$PollPayload>
/**
 * Model Vote
 * 
 */
export type Vote = $Result.DefaultSelection<Prisma.$VotePayload>
/**
 * Model DinoName
 * 
 */
export type DinoName = $Result.DefaultSelection<Prisma.$DinoNamePayload>
/**
 * Model DinoStats
 * 
 */
export type DinoStats = $Result.DefaultSelection<Prisma.$DinoStatsPayload>
/**
 * Model GlobalStats
 * 
 */
export type GlobalStats = $Result.DefaultSelection<Prisma.$GlobalStatsPayload>
/**
 * Model GuildStats
 * 
 */
export type GuildStats = $Result.DefaultSelection<Prisma.$GuildStatsPayload>
/**
 * Model VotingStats
 * 
 */
export type VotingStats = $Result.DefaultSelection<Prisma.$VotingStatsPayload>
/**
 * Model FeedbackStats
 * 
 */
export type FeedbackStats = $Result.DefaultSelection<Prisma.$FeedbackStatsPayload>
/**
 * Model YouTubePost
 * 
 */
export type YouTubePost = $Result.DefaultSelection<Prisma.$YouTubePostPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commandStat`: Exposes CRUD operations for the **CommandStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommandStats
    * const commandStats = await prisma.commandStat.findMany()
    * ```
    */
  get commandStat(): Prisma.CommandStatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.funGame`: Exposes CRUD operations for the **FunGame** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FunGames
    * const funGames = await prisma.funGame.findMany()
    * ```
    */
  get funGame(): Prisma.FunGameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.poll`: Exposes CRUD operations for the **Poll** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Polls
    * const polls = await prisma.poll.findMany()
    * ```
    */
  get poll(): Prisma.PollDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dinoName`: Exposes CRUD operations for the **DinoName** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DinoNames
    * const dinoNames = await prisma.dinoName.findMany()
    * ```
    */
  get dinoName(): Prisma.DinoNameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dinoStats`: Exposes CRUD operations for the **DinoStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DinoStats
    * const dinoStats = await prisma.dinoStats.findMany()
    * ```
    */
  get dinoStats(): Prisma.DinoStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.globalStats`: Exposes CRUD operations for the **GlobalStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GlobalStats
    * const globalStats = await prisma.globalStats.findMany()
    * ```
    */
  get globalStats(): Prisma.GlobalStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.guildStats`: Exposes CRUD operations for the **GuildStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuildStats
    * const guildStats = await prisma.guildStats.findMany()
    * ```
    */
  get guildStats(): Prisma.GuildStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.votingStats`: Exposes CRUD operations for the **VotingStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VotingStats
    * const votingStats = await prisma.votingStats.findMany()
    * ```
    */
  get votingStats(): Prisma.VotingStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedbackStats`: Exposes CRUD operations for the **FeedbackStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackStats
    * const feedbackStats = await prisma.feedbackStats.findMany()
    * ```
    */
  get feedbackStats(): Prisma.FeedbackStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.youTubePost`: Exposes CRUD operations for the **YouTubePost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YouTubePosts
    * const youTubePosts = await prisma.youTubePost.findMany()
    * ```
    */
  get youTubePost(): Prisma.YouTubePostDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CommandStat: 'CommandStat',
    Feedback: 'Feedback',
    FunGame: 'FunGame',
    Poll: 'Poll',
    Vote: 'Vote',
    DinoName: 'DinoName',
    DinoStats: 'DinoStats',
    GlobalStats: 'GlobalStats',
    GuildStats: 'GuildStats',
    VotingStats: 'VotingStats',
    FeedbackStats: 'FeedbackStats',
    YouTubePost: 'YouTubePost'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "commandStat" | "feedback" | "funGame" | "poll" | "vote" | "dinoName" | "dinoStats" | "globalStats" | "guildStats" | "votingStats" | "feedbackStats" | "youTubePost"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CommandStat: {
        payload: Prisma.$CommandStatPayload<ExtArgs>
        fields: Prisma.CommandStatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandStatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandStatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>
          }
          findFirst: {
            args: Prisma.CommandStatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandStatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>
          }
          findMany: {
            args: Prisma.CommandStatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>[]
          }
          create: {
            args: Prisma.CommandStatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>
          }
          createMany: {
            args: Prisma.CommandStatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommandStatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>[]
          }
          delete: {
            args: Prisma.CommandStatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>
          }
          update: {
            args: Prisma.CommandStatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>
          }
          deleteMany: {
            args: Prisma.CommandStatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommandStatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommandStatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>[]
          }
          upsert: {
            args: Prisma.CommandStatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatPayload>
          }
          aggregate: {
            args: Prisma.CommandStatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommandStat>
          }
          groupBy: {
            args: Prisma.CommandStatGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommandStatGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandStatCountArgs<ExtArgs>
            result: $Utils.Optional<CommandStatCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      FunGame: {
        payload: Prisma.$FunGamePayload<ExtArgs>
        fields: Prisma.FunGameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FunGameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FunGameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>
          }
          findFirst: {
            args: Prisma.FunGameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FunGameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>
          }
          findMany: {
            args: Prisma.FunGameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>[]
          }
          create: {
            args: Prisma.FunGameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>
          }
          createMany: {
            args: Prisma.FunGameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FunGameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>[]
          }
          delete: {
            args: Prisma.FunGameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>
          }
          update: {
            args: Prisma.FunGameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>
          }
          deleteMany: {
            args: Prisma.FunGameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FunGameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FunGameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>[]
          }
          upsert: {
            args: Prisma.FunGameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FunGamePayload>
          }
          aggregate: {
            args: Prisma.FunGameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFunGame>
          }
          groupBy: {
            args: Prisma.FunGameGroupByArgs<ExtArgs>
            result: $Utils.Optional<FunGameGroupByOutputType>[]
          }
          count: {
            args: Prisma.FunGameCountArgs<ExtArgs>
            result: $Utils.Optional<FunGameCountAggregateOutputType> | number
          }
        }
      }
      Poll: {
        payload: Prisma.$PollPayload<ExtArgs>
        fields: Prisma.PollFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PollFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PollFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>
          }
          findFirst: {
            args: Prisma.PollFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PollFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>
          }
          findMany: {
            args: Prisma.PollFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>[]
          }
          create: {
            args: Prisma.PollCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>
          }
          createMany: {
            args: Prisma.PollCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PollCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>[]
          }
          delete: {
            args: Prisma.PollDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>
          }
          update: {
            args: Prisma.PollUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>
          }
          deleteMany: {
            args: Prisma.PollDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PollUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PollUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>[]
          }
          upsert: {
            args: Prisma.PollUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PollPayload>
          }
          aggregate: {
            args: Prisma.PollAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePoll>
          }
          groupBy: {
            args: Prisma.PollGroupByArgs<ExtArgs>
            result: $Utils.Optional<PollGroupByOutputType>[]
          }
          count: {
            args: Prisma.PollCountArgs<ExtArgs>
            result: $Utils.Optional<PollCountAggregateOutputType> | number
          }
        }
      }
      Vote: {
        payload: Prisma.$VotePayload<ExtArgs>
        fields: Prisma.VoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findFirst: {
            args: Prisma.VoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findMany: {
            args: Prisma.VoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          create: {
            args: Prisma.VoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          createMany: {
            args: Prisma.VoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          delete: {
            args: Prisma.VoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          update: {
            args: Prisma.VoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          deleteMany: {
            args: Prisma.VoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          upsert: {
            args: Prisma.VoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          aggregate: {
            args: Prisma.VoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVote>
          }
          groupBy: {
            args: Prisma.VoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteCountArgs<ExtArgs>
            result: $Utils.Optional<VoteCountAggregateOutputType> | number
          }
        }
      }
      DinoName: {
        payload: Prisma.$DinoNamePayload<ExtArgs>
        fields: Prisma.DinoNameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DinoNameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DinoNameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>
          }
          findFirst: {
            args: Prisma.DinoNameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DinoNameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>
          }
          findMany: {
            args: Prisma.DinoNameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>[]
          }
          create: {
            args: Prisma.DinoNameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>
          }
          createMany: {
            args: Prisma.DinoNameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DinoNameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>[]
          }
          delete: {
            args: Prisma.DinoNameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>
          }
          update: {
            args: Prisma.DinoNameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>
          }
          deleteMany: {
            args: Prisma.DinoNameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DinoNameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DinoNameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>[]
          }
          upsert: {
            args: Prisma.DinoNameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoNamePayload>
          }
          aggregate: {
            args: Prisma.DinoNameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDinoName>
          }
          groupBy: {
            args: Prisma.DinoNameGroupByArgs<ExtArgs>
            result: $Utils.Optional<DinoNameGroupByOutputType>[]
          }
          count: {
            args: Prisma.DinoNameCountArgs<ExtArgs>
            result: $Utils.Optional<DinoNameCountAggregateOutputType> | number
          }
        }
      }
      DinoStats: {
        payload: Prisma.$DinoStatsPayload<ExtArgs>
        fields: Prisma.DinoStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DinoStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DinoStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>
          }
          findFirst: {
            args: Prisma.DinoStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DinoStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>
          }
          findMany: {
            args: Prisma.DinoStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>[]
          }
          create: {
            args: Prisma.DinoStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>
          }
          createMany: {
            args: Prisma.DinoStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DinoStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>[]
          }
          delete: {
            args: Prisma.DinoStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>
          }
          update: {
            args: Prisma.DinoStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>
          }
          deleteMany: {
            args: Prisma.DinoStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DinoStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DinoStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>[]
          }
          upsert: {
            args: Prisma.DinoStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DinoStatsPayload>
          }
          aggregate: {
            args: Prisma.DinoStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDinoStats>
          }
          groupBy: {
            args: Prisma.DinoStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DinoStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DinoStatsCountArgs<ExtArgs>
            result: $Utils.Optional<DinoStatsCountAggregateOutputType> | number
          }
        }
      }
      GlobalStats: {
        payload: Prisma.$GlobalStatsPayload<ExtArgs>
        fields: Prisma.GlobalStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlobalStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlobalStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>
          }
          findFirst: {
            args: Prisma.GlobalStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlobalStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>
          }
          findMany: {
            args: Prisma.GlobalStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>[]
          }
          create: {
            args: Prisma.GlobalStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>
          }
          createMany: {
            args: Prisma.GlobalStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GlobalStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>[]
          }
          delete: {
            args: Prisma.GlobalStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>
          }
          update: {
            args: Prisma.GlobalStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>
          }
          deleteMany: {
            args: Prisma.GlobalStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GlobalStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GlobalStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>[]
          }
          upsert: {
            args: Prisma.GlobalStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GlobalStatsPayload>
          }
          aggregate: {
            args: Prisma.GlobalStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlobalStats>
          }
          groupBy: {
            args: Prisma.GlobalStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GlobalStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlobalStatsCountArgs<ExtArgs>
            result: $Utils.Optional<GlobalStatsCountAggregateOutputType> | number
          }
        }
      }
      GuildStats: {
        payload: Prisma.$GuildStatsPayload<ExtArgs>
        fields: Prisma.GuildStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuildStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuildStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>
          }
          findFirst: {
            args: Prisma.GuildStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuildStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>
          }
          findMany: {
            args: Prisma.GuildStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>[]
          }
          create: {
            args: Prisma.GuildStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>
          }
          createMany: {
            args: Prisma.GuildStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GuildStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>[]
          }
          delete: {
            args: Prisma.GuildStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>
          }
          update: {
            args: Prisma.GuildStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>
          }
          deleteMany: {
            args: Prisma.GuildStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuildStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GuildStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>[]
          }
          upsert: {
            args: Prisma.GuildStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildStatsPayload>
          }
          aggregate: {
            args: Prisma.GuildStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuildStats>
          }
          groupBy: {
            args: Prisma.GuildStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuildStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuildStatsCountArgs<ExtArgs>
            result: $Utils.Optional<GuildStatsCountAggregateOutputType> | number
          }
        }
      }
      VotingStats: {
        payload: Prisma.$VotingStatsPayload<ExtArgs>
        fields: Prisma.VotingStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VotingStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VotingStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>
          }
          findFirst: {
            args: Prisma.VotingStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VotingStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>
          }
          findMany: {
            args: Prisma.VotingStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>[]
          }
          create: {
            args: Prisma.VotingStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>
          }
          createMany: {
            args: Prisma.VotingStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VotingStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>[]
          }
          delete: {
            args: Prisma.VotingStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>
          }
          update: {
            args: Prisma.VotingStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>
          }
          deleteMany: {
            args: Prisma.VotingStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VotingStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VotingStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>[]
          }
          upsert: {
            args: Prisma.VotingStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotingStatsPayload>
          }
          aggregate: {
            args: Prisma.VotingStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVotingStats>
          }
          groupBy: {
            args: Prisma.VotingStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<VotingStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.VotingStatsCountArgs<ExtArgs>
            result: $Utils.Optional<VotingStatsCountAggregateOutputType> | number
          }
        }
      }
      FeedbackStats: {
        payload: Prisma.$FeedbackStatsPayload<ExtArgs>
        fields: Prisma.FeedbackStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>
          }
          findFirst: {
            args: Prisma.FeedbackStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>
          }
          findMany: {
            args: Prisma.FeedbackStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>[]
          }
          create: {
            args: Prisma.FeedbackStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>
          }
          createMany: {
            args: Prisma.FeedbackStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>[]
          }
          delete: {
            args: Prisma.FeedbackStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>
          }
          update: {
            args: Prisma.FeedbackStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackStatsPayload>
          }
          aggregate: {
            args: Prisma.FeedbackStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedbackStats>
          }
          groupBy: {
            args: Prisma.FeedbackStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackStatsCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackStatsCountAggregateOutputType> | number
          }
        }
      }
      YouTubePost: {
        payload: Prisma.$YouTubePostPayload<ExtArgs>
        fields: Prisma.YouTubePostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YouTubePostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YouTubePostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>
          }
          findFirst: {
            args: Prisma.YouTubePostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YouTubePostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>
          }
          findMany: {
            args: Prisma.YouTubePostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>[]
          }
          create: {
            args: Prisma.YouTubePostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>
          }
          createMany: {
            args: Prisma.YouTubePostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.YouTubePostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>[]
          }
          delete: {
            args: Prisma.YouTubePostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>
          }
          update: {
            args: Prisma.YouTubePostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>
          }
          deleteMany: {
            args: Prisma.YouTubePostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YouTubePostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.YouTubePostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>[]
          }
          upsert: {
            args: Prisma.YouTubePostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YouTubePostPayload>
          }
          aggregate: {
            args: Prisma.YouTubePostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYouTubePost>
          }
          groupBy: {
            args: Prisma.YouTubePostGroupByArgs<ExtArgs>
            result: $Utils.Optional<YouTubePostGroupByOutputType>[]
          }
          count: {
            args: Prisma.YouTubePostCountArgs<ExtArgs>
            result: $Utils.Optional<YouTubePostCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    commandStat?: CommandStatOmit
    feedback?: FeedbackOmit
    funGame?: FunGameOmit
    poll?: PollOmit
    vote?: VoteOmit
    dinoName?: DinoNameOmit
    dinoStats?: DinoStatsOmit
    globalStats?: GlobalStatsOmit
    guildStats?: GuildStatsOmit
    votingStats?: VotingStatsOmit
    feedbackStats?: FeedbackStatsOmit
    youTubePost?: YouTubePostOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FunGameCountOutputType
   */

  export type FunGameCountOutputType = {
    wonPolls: number
    votes: number
    polls: number
  }

  export type FunGameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wonPolls?: boolean | FunGameCountOutputTypeCountWonPollsArgs
    votes?: boolean | FunGameCountOutputTypeCountVotesArgs
    polls?: boolean | FunGameCountOutputTypeCountPollsArgs
  }

  // Custom InputTypes
  /**
   * FunGameCountOutputType without action
   */
  export type FunGameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGameCountOutputType
     */
    select?: FunGameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FunGameCountOutputType without action
   */
  export type FunGameCountOutputTypeCountWonPollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PollWhereInput
  }

  /**
   * FunGameCountOutputType without action
   */
  export type FunGameCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }

  /**
   * FunGameCountOutputType without action
   */
  export type FunGameCountOutputTypeCountPollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PollWhereInput
  }


  /**
   * Count Type PollCountOutputType
   */

  export type PollCountOutputType = {
    votes: number
    games: number
  }

  export type PollCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | PollCountOutputTypeCountVotesArgs
    games?: boolean | PollCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * PollCountOutputType without action
   */
  export type PollCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PollCountOutputType
     */
    select?: PollCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PollCountOutputType without action
   */
  export type PollCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }

  /**
   * PollCountOutputType without action
   */
  export type PollCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FunGameWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    discordId: string | null
    name: string | null
    optIn: boolean | null
    joinedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    discordId: string | null
    name: string | null
    optIn: boolean | null
    joinedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    discordId: number
    name: number
    optIn: number
    joinedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    discordId?: true
    name?: true
    optIn?: true
    joinedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    discordId?: true
    name?: true
    optIn?: true
    joinedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    discordId?: true
    name?: true
    optIn?: true
    joinedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    discordId: string
    name: string | null
    optIn: boolean
    joinedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordId?: boolean
    name?: boolean
    optIn?: boolean
    joinedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordId?: boolean
    name?: boolean
    optIn?: boolean
    joinedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordId?: boolean
    name?: boolean
    optIn?: boolean
    joinedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    discordId?: boolean
    name?: boolean
    optIn?: boolean
    joinedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "discordId" | "name" | "optIn" | "joinedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      discordId: string
      name: string | null
      optIn: boolean
      joinedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly discordId: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly optIn: FieldRef<"User", 'Boolean'>
    readonly joinedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model CommandStat
   */

  export type AggregateCommandStat = {
    _count: CommandStatCountAggregateOutputType | null
    _avg: CommandStatAvgAggregateOutputType | null
    _sum: CommandStatSumAggregateOutputType | null
    _min: CommandStatMinAggregateOutputType | null
    _max: CommandStatMaxAggregateOutputType | null
  }

  export type CommandStatAvgAggregateOutputType = {
    count: number | null
  }

  export type CommandStatSumAggregateOutputType = {
    count: number | null
  }

  export type CommandStatMinAggregateOutputType = {
    command: string | null
    count: number | null
    updatedAt: Date | null
  }

  export type CommandStatMaxAggregateOutputType = {
    command: string | null
    count: number | null
    updatedAt: Date | null
  }

  export type CommandStatCountAggregateOutputType = {
    command: number
    count: number
    updatedAt: number
    _all: number
  }


  export type CommandStatAvgAggregateInputType = {
    count?: true
  }

  export type CommandStatSumAggregateInputType = {
    count?: true
  }

  export type CommandStatMinAggregateInputType = {
    command?: true
    count?: true
    updatedAt?: true
  }

  export type CommandStatMaxAggregateInputType = {
    command?: true
    count?: true
    updatedAt?: true
  }

  export type CommandStatCountAggregateInputType = {
    command?: true
    count?: true
    updatedAt?: true
    _all?: true
  }

  export type CommandStatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandStat to aggregate.
     */
    where?: CommandStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStats to fetch.
     */
    orderBy?: CommandStatOrderByWithRelationInput | CommandStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommandStats
    **/
    _count?: true | CommandStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandStatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandStatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandStatMaxAggregateInputType
  }

  export type GetCommandStatAggregateType<T extends CommandStatAggregateArgs> = {
        [P in keyof T & keyof AggregateCommandStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommandStat[P]>
      : GetScalarType<T[P], AggregateCommandStat[P]>
  }




  export type CommandStatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandStatWhereInput
    orderBy?: CommandStatOrderByWithAggregationInput | CommandStatOrderByWithAggregationInput[]
    by: CommandStatScalarFieldEnum[] | CommandStatScalarFieldEnum
    having?: CommandStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandStatCountAggregateInputType | true
    _avg?: CommandStatAvgAggregateInputType
    _sum?: CommandStatSumAggregateInputType
    _min?: CommandStatMinAggregateInputType
    _max?: CommandStatMaxAggregateInputType
  }

  export type CommandStatGroupByOutputType = {
    command: string
    count: number
    updatedAt: Date
    _count: CommandStatCountAggregateOutputType | null
    _avg: CommandStatAvgAggregateOutputType | null
    _sum: CommandStatSumAggregateOutputType | null
    _min: CommandStatMinAggregateOutputType | null
    _max: CommandStatMaxAggregateOutputType | null
  }

  type GetCommandStatGroupByPayload<T extends CommandStatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandStatGroupByOutputType[P]>
            : GetScalarType<T[P], CommandStatGroupByOutputType[P]>
        }
      >
    >


  export type CommandStatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    command?: boolean
    count?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["commandStat"]>

  export type CommandStatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    command?: boolean
    count?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["commandStat"]>

  export type CommandStatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    command?: boolean
    count?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["commandStat"]>

  export type CommandStatSelectScalar = {
    command?: boolean
    count?: boolean
    updatedAt?: boolean
  }

  export type CommandStatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"command" | "count" | "updatedAt", ExtArgs["result"]["commandStat"]>

  export type $CommandStatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommandStat"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      command: string
      count: number
      updatedAt: Date
    }, ExtArgs["result"]["commandStat"]>
    composites: {}
  }

  type CommandStatGetPayload<S extends boolean | null | undefined | CommandStatDefaultArgs> = $Result.GetResult<Prisma.$CommandStatPayload, S>

  type CommandStatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommandStatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommandStatCountAggregateInputType | true
    }

  export interface CommandStatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommandStat'], meta: { name: 'CommandStat' } }
    /**
     * Find zero or one CommandStat that matches the filter.
     * @param {CommandStatFindUniqueArgs} args - Arguments to find a CommandStat
     * @example
     * // Get one CommandStat
     * const commandStat = await prisma.commandStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommandStatFindUniqueArgs>(args: SelectSubset<T, CommandStatFindUniqueArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CommandStat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommandStatFindUniqueOrThrowArgs} args - Arguments to find a CommandStat
     * @example
     * // Get one CommandStat
     * const commandStat = await prisma.commandStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommandStatFindUniqueOrThrowArgs>(args: SelectSubset<T, CommandStatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommandStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatFindFirstArgs} args - Arguments to find a CommandStat
     * @example
     * // Get one CommandStat
     * const commandStat = await prisma.commandStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommandStatFindFirstArgs>(args?: SelectSubset<T, CommandStatFindFirstArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommandStat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatFindFirstOrThrowArgs} args - Arguments to find a CommandStat
     * @example
     * // Get one CommandStat
     * const commandStat = await prisma.commandStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommandStatFindFirstOrThrowArgs>(args?: SelectSubset<T, CommandStatFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CommandStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommandStats
     * const commandStats = await prisma.commandStat.findMany()
     * 
     * // Get first 10 CommandStats
     * const commandStats = await prisma.commandStat.findMany({ take: 10 })
     * 
     * // Only select the `command`
     * const commandStatWithCommandOnly = await prisma.commandStat.findMany({ select: { command: true } })
     * 
     */
    findMany<T extends CommandStatFindManyArgs>(args?: SelectSubset<T, CommandStatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CommandStat.
     * @param {CommandStatCreateArgs} args - Arguments to create a CommandStat.
     * @example
     * // Create one CommandStat
     * const CommandStat = await prisma.commandStat.create({
     *   data: {
     *     // ... data to create a CommandStat
     *   }
     * })
     * 
     */
    create<T extends CommandStatCreateArgs>(args: SelectSubset<T, CommandStatCreateArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CommandStats.
     * @param {CommandStatCreateManyArgs} args - Arguments to create many CommandStats.
     * @example
     * // Create many CommandStats
     * const commandStat = await prisma.commandStat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommandStatCreateManyArgs>(args?: SelectSubset<T, CommandStatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommandStats and returns the data saved in the database.
     * @param {CommandStatCreateManyAndReturnArgs} args - Arguments to create many CommandStats.
     * @example
     * // Create many CommandStats
     * const commandStat = await prisma.commandStat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommandStats and only return the `command`
     * const commandStatWithCommandOnly = await prisma.commandStat.createManyAndReturn({
     *   select: { command: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommandStatCreateManyAndReturnArgs>(args?: SelectSubset<T, CommandStatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CommandStat.
     * @param {CommandStatDeleteArgs} args - Arguments to delete one CommandStat.
     * @example
     * // Delete one CommandStat
     * const CommandStat = await prisma.commandStat.delete({
     *   where: {
     *     // ... filter to delete one CommandStat
     *   }
     * })
     * 
     */
    delete<T extends CommandStatDeleteArgs>(args: SelectSubset<T, CommandStatDeleteArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CommandStat.
     * @param {CommandStatUpdateArgs} args - Arguments to update one CommandStat.
     * @example
     * // Update one CommandStat
     * const commandStat = await prisma.commandStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommandStatUpdateArgs>(args: SelectSubset<T, CommandStatUpdateArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CommandStats.
     * @param {CommandStatDeleteManyArgs} args - Arguments to filter CommandStats to delete.
     * @example
     * // Delete a few CommandStats
     * const { count } = await prisma.commandStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommandStatDeleteManyArgs>(args?: SelectSubset<T, CommandStatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommandStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommandStats
     * const commandStat = await prisma.commandStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommandStatUpdateManyArgs>(args: SelectSubset<T, CommandStatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommandStats and returns the data updated in the database.
     * @param {CommandStatUpdateManyAndReturnArgs} args - Arguments to update many CommandStats.
     * @example
     * // Update many CommandStats
     * const commandStat = await prisma.commandStat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CommandStats and only return the `command`
     * const commandStatWithCommandOnly = await prisma.commandStat.updateManyAndReturn({
     *   select: { command: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommandStatUpdateManyAndReturnArgs>(args: SelectSubset<T, CommandStatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CommandStat.
     * @param {CommandStatUpsertArgs} args - Arguments to update or create a CommandStat.
     * @example
     * // Update or create a CommandStat
     * const commandStat = await prisma.commandStat.upsert({
     *   create: {
     *     // ... data to create a CommandStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommandStat we want to update
     *   }
     * })
     */
    upsert<T extends CommandStatUpsertArgs>(args: SelectSubset<T, CommandStatUpsertArgs<ExtArgs>>): Prisma__CommandStatClient<$Result.GetResult<Prisma.$CommandStatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CommandStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatCountArgs} args - Arguments to filter CommandStats to count.
     * @example
     * // Count the number of CommandStats
     * const count = await prisma.commandStat.count({
     *   where: {
     *     // ... the filter for the CommandStats we want to count
     *   }
     * })
    **/
    count<T extends CommandStatCountArgs>(
      args?: Subset<T, CommandStatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommandStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandStatAggregateArgs>(args: Subset<T, CommandStatAggregateArgs>): Prisma.PrismaPromise<GetCommandStatAggregateType<T>>

    /**
     * Group by CommandStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandStatGroupByArgs['orderBy'] }
        : { orderBy?: CommandStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandStatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommandStat model
   */
  readonly fields: CommandStatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommandStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandStatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommandStat model
   */
  interface CommandStatFieldRefs {
    readonly command: FieldRef<"CommandStat", 'String'>
    readonly count: FieldRef<"CommandStat", 'Int'>
    readonly updatedAt: FieldRef<"CommandStat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CommandStat findUnique
   */
  export type CommandStatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * Filter, which CommandStat to fetch.
     */
    where: CommandStatWhereUniqueInput
  }

  /**
   * CommandStat findUniqueOrThrow
   */
  export type CommandStatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * Filter, which CommandStat to fetch.
     */
    where: CommandStatWhereUniqueInput
  }

  /**
   * CommandStat findFirst
   */
  export type CommandStatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * Filter, which CommandStat to fetch.
     */
    where?: CommandStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStats to fetch.
     */
    orderBy?: CommandStatOrderByWithRelationInput | CommandStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandStats.
     */
    cursor?: CommandStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandStats.
     */
    distinct?: CommandStatScalarFieldEnum | CommandStatScalarFieldEnum[]
  }

  /**
   * CommandStat findFirstOrThrow
   */
  export type CommandStatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * Filter, which CommandStat to fetch.
     */
    where?: CommandStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStats to fetch.
     */
    orderBy?: CommandStatOrderByWithRelationInput | CommandStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandStats.
     */
    cursor?: CommandStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandStats.
     */
    distinct?: CommandStatScalarFieldEnum | CommandStatScalarFieldEnum[]
  }

  /**
   * CommandStat findMany
   */
  export type CommandStatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * Filter, which CommandStats to fetch.
     */
    where?: CommandStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStats to fetch.
     */
    orderBy?: CommandStatOrderByWithRelationInput | CommandStatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommandStats.
     */
    cursor?: CommandStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStats.
     */
    skip?: number
    distinct?: CommandStatScalarFieldEnum | CommandStatScalarFieldEnum[]
  }

  /**
   * CommandStat create
   */
  export type CommandStatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * The data needed to create a CommandStat.
     */
    data: XOR<CommandStatCreateInput, CommandStatUncheckedCreateInput>
  }

  /**
   * CommandStat createMany
   */
  export type CommandStatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommandStats.
     */
    data: CommandStatCreateManyInput | CommandStatCreateManyInput[]
  }

  /**
   * CommandStat createManyAndReturn
   */
  export type CommandStatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * The data used to create many CommandStats.
     */
    data: CommandStatCreateManyInput | CommandStatCreateManyInput[]
  }

  /**
   * CommandStat update
   */
  export type CommandStatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * The data needed to update a CommandStat.
     */
    data: XOR<CommandStatUpdateInput, CommandStatUncheckedUpdateInput>
    /**
     * Choose, which CommandStat to update.
     */
    where: CommandStatWhereUniqueInput
  }

  /**
   * CommandStat updateMany
   */
  export type CommandStatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommandStats.
     */
    data: XOR<CommandStatUpdateManyMutationInput, CommandStatUncheckedUpdateManyInput>
    /**
     * Filter which CommandStats to update
     */
    where?: CommandStatWhereInput
    /**
     * Limit how many CommandStats to update.
     */
    limit?: number
  }

  /**
   * CommandStat updateManyAndReturn
   */
  export type CommandStatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * The data used to update CommandStats.
     */
    data: XOR<CommandStatUpdateManyMutationInput, CommandStatUncheckedUpdateManyInput>
    /**
     * Filter which CommandStats to update
     */
    where?: CommandStatWhereInput
    /**
     * Limit how many CommandStats to update.
     */
    limit?: number
  }

  /**
   * CommandStat upsert
   */
  export type CommandStatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * The filter to search for the CommandStat to update in case it exists.
     */
    where: CommandStatWhereUniqueInput
    /**
     * In case the CommandStat found by the `where` argument doesn't exist, create a new CommandStat with this data.
     */
    create: XOR<CommandStatCreateInput, CommandStatUncheckedCreateInput>
    /**
     * In case the CommandStat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandStatUpdateInput, CommandStatUncheckedUpdateInput>
  }

  /**
   * CommandStat delete
   */
  export type CommandStatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
    /**
     * Filter which CommandStat to delete.
     */
    where: CommandStatWhereUniqueInput
  }

  /**
   * CommandStat deleteMany
   */
  export type CommandStatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandStats to delete
     */
    where?: CommandStatWhereInput
    /**
     * Limit how many CommandStats to delete.
     */
    limit?: number
  }

  /**
   * CommandStat without action
   */
  export type CommandStatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStat
     */
    select?: CommandStatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStat
     */
    omit?: CommandStatOmit<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    protocolNo: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    protocolNo: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    protocolNo: number | null
    userId: string | null
    username: string | null
    serverId: string | null
    title: string | null
    description: string | null
    category: string | null
    importance: string | null
    module: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    protocolNo: number | null
    userId: string | null
    username: string | null
    serverId: string | null
    title: string | null
    description: string | null
    category: string | null
    importance: string | null
    module: string | null
    fileUrl: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    protocolNo: number
    userId: number
    username: number
    serverId: number
    title: number
    description: number
    category: number
    importance: number
    module: number
    fileUrl: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    protocolNo?: true
  }

  export type FeedbackSumAggregateInputType = {
    protocolNo?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    protocolNo?: true
    userId?: true
    username?: true
    serverId?: true
    title?: true
    description?: true
    category?: true
    importance?: true
    module?: true
    fileUrl?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    protocolNo?: true
    userId?: true
    username?: true
    serverId?: true
    title?: true
    description?: true
    category?: true
    importance?: true
    module?: true
    fileUrl?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    protocolNo?: true
    userId?: true
    username?: true
    serverId?: true
    title?: true
    description?: true
    category?: true
    importance?: true
    module?: true
    fileUrl?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    protocolNo: number
    userId: string
    username: string
    serverId: string
    title: string
    description: string
    category: string
    importance: string
    module: string | null
    fileUrl: string | null
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    protocolNo?: boolean
    userId?: boolean
    username?: boolean
    serverId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    importance?: boolean
    module?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    protocolNo?: boolean
    userId?: boolean
    username?: boolean
    serverId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    importance?: boolean
    module?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    protocolNo?: boolean
    userId?: boolean
    username?: boolean
    serverId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    importance?: boolean
    module?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    protocolNo?: boolean
    userId?: boolean
    username?: boolean
    serverId?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    importance?: boolean
    module?: boolean
    fileUrl?: boolean
    createdAt?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "protocolNo" | "userId" | "username" | "serverId" | "title" | "description" | "category" | "importance" | "module" | "fileUrl" | "createdAt", ExtArgs["result"]["feedback"]>

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      protocolNo: number
      userId: string
      username: string
      serverId: string
      title: string
      description: string
      category: string
      importance: string
      module: string | null
      fileUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly protocolNo: FieldRef<"Feedback", 'Int'>
    readonly userId: FieldRef<"Feedback", 'String'>
    readonly username: FieldRef<"Feedback", 'String'>
    readonly serverId: FieldRef<"Feedback", 'String'>
    readonly title: FieldRef<"Feedback", 'String'>
    readonly description: FieldRef<"Feedback", 'String'>
    readonly category: FieldRef<"Feedback", 'String'>
    readonly importance: FieldRef<"Feedback", 'String'>
    readonly module: FieldRef<"Feedback", 'String'>
    readonly fileUrl: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
  }


  /**
   * Model FunGame
   */

  export type AggregateFunGame = {
    _count: FunGameCountAggregateOutputType | null
    _min: FunGameMinAggregateOutputType | null
    _max: FunGameMaxAggregateOutputType | null
  }

  export type FunGameMinAggregateOutputType = {
    id: string | null
    name: string | null
    emoji: string | null
    isFree: boolean | null
  }

  export type FunGameMaxAggregateOutputType = {
    id: string | null
    name: string | null
    emoji: string | null
    isFree: boolean | null
  }

  export type FunGameCountAggregateOutputType = {
    id: number
    name: number
    emoji: number
    isFree: number
    _all: number
  }


  export type FunGameMinAggregateInputType = {
    id?: true
    name?: true
    emoji?: true
    isFree?: true
  }

  export type FunGameMaxAggregateInputType = {
    id?: true
    name?: true
    emoji?: true
    isFree?: true
  }

  export type FunGameCountAggregateInputType = {
    id?: true
    name?: true
    emoji?: true
    isFree?: true
    _all?: true
  }

  export type FunGameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FunGame to aggregate.
     */
    where?: FunGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunGames to fetch.
     */
    orderBy?: FunGameOrderByWithRelationInput | FunGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FunGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FunGames
    **/
    _count?: true | FunGameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FunGameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FunGameMaxAggregateInputType
  }

  export type GetFunGameAggregateType<T extends FunGameAggregateArgs> = {
        [P in keyof T & keyof AggregateFunGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFunGame[P]>
      : GetScalarType<T[P], AggregateFunGame[P]>
  }




  export type FunGameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FunGameWhereInput
    orderBy?: FunGameOrderByWithAggregationInput | FunGameOrderByWithAggregationInput[]
    by: FunGameScalarFieldEnum[] | FunGameScalarFieldEnum
    having?: FunGameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FunGameCountAggregateInputType | true
    _min?: FunGameMinAggregateInputType
    _max?: FunGameMaxAggregateInputType
  }

  export type FunGameGroupByOutputType = {
    id: string
    name: string
    emoji: string | null
    isFree: boolean
    _count: FunGameCountAggregateOutputType | null
    _min: FunGameMinAggregateOutputType | null
    _max: FunGameMaxAggregateOutputType | null
  }

  type GetFunGameGroupByPayload<T extends FunGameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FunGameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FunGameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FunGameGroupByOutputType[P]>
            : GetScalarType<T[P], FunGameGroupByOutputType[P]>
        }
      >
    >


  export type FunGameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    emoji?: boolean
    isFree?: boolean
    wonPolls?: boolean | FunGame$wonPollsArgs<ExtArgs>
    votes?: boolean | FunGame$votesArgs<ExtArgs>
    polls?: boolean | FunGame$pollsArgs<ExtArgs>
    _count?: boolean | FunGameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["funGame"]>

  export type FunGameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    emoji?: boolean
    isFree?: boolean
  }, ExtArgs["result"]["funGame"]>

  export type FunGameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    emoji?: boolean
    isFree?: boolean
  }, ExtArgs["result"]["funGame"]>

  export type FunGameSelectScalar = {
    id?: boolean
    name?: boolean
    emoji?: boolean
    isFree?: boolean
  }

  export type FunGameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "emoji" | "isFree", ExtArgs["result"]["funGame"]>
  export type FunGameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wonPolls?: boolean | FunGame$wonPollsArgs<ExtArgs>
    votes?: boolean | FunGame$votesArgs<ExtArgs>
    polls?: boolean | FunGame$pollsArgs<ExtArgs>
    _count?: boolean | FunGameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FunGameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FunGameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FunGamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FunGame"
    objects: {
      wonPolls: Prisma.$PollPayload<ExtArgs>[]
      votes: Prisma.$VotePayload<ExtArgs>[]
      polls: Prisma.$PollPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      emoji: string | null
      isFree: boolean
    }, ExtArgs["result"]["funGame"]>
    composites: {}
  }

  type FunGameGetPayload<S extends boolean | null | undefined | FunGameDefaultArgs> = $Result.GetResult<Prisma.$FunGamePayload, S>

  type FunGameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FunGameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FunGameCountAggregateInputType | true
    }

  export interface FunGameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FunGame'], meta: { name: 'FunGame' } }
    /**
     * Find zero or one FunGame that matches the filter.
     * @param {FunGameFindUniqueArgs} args - Arguments to find a FunGame
     * @example
     * // Get one FunGame
     * const funGame = await prisma.funGame.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FunGameFindUniqueArgs>(args: SelectSubset<T, FunGameFindUniqueArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FunGame that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FunGameFindUniqueOrThrowArgs} args - Arguments to find a FunGame
     * @example
     * // Get one FunGame
     * const funGame = await prisma.funGame.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FunGameFindUniqueOrThrowArgs>(args: SelectSubset<T, FunGameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FunGame that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameFindFirstArgs} args - Arguments to find a FunGame
     * @example
     * // Get one FunGame
     * const funGame = await prisma.funGame.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FunGameFindFirstArgs>(args?: SelectSubset<T, FunGameFindFirstArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FunGame that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameFindFirstOrThrowArgs} args - Arguments to find a FunGame
     * @example
     * // Get one FunGame
     * const funGame = await prisma.funGame.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FunGameFindFirstOrThrowArgs>(args?: SelectSubset<T, FunGameFindFirstOrThrowArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FunGames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FunGames
     * const funGames = await prisma.funGame.findMany()
     * 
     * // Get first 10 FunGames
     * const funGames = await prisma.funGame.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const funGameWithIdOnly = await prisma.funGame.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FunGameFindManyArgs>(args?: SelectSubset<T, FunGameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FunGame.
     * @param {FunGameCreateArgs} args - Arguments to create a FunGame.
     * @example
     * // Create one FunGame
     * const FunGame = await prisma.funGame.create({
     *   data: {
     *     // ... data to create a FunGame
     *   }
     * })
     * 
     */
    create<T extends FunGameCreateArgs>(args: SelectSubset<T, FunGameCreateArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FunGames.
     * @param {FunGameCreateManyArgs} args - Arguments to create many FunGames.
     * @example
     * // Create many FunGames
     * const funGame = await prisma.funGame.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FunGameCreateManyArgs>(args?: SelectSubset<T, FunGameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FunGames and returns the data saved in the database.
     * @param {FunGameCreateManyAndReturnArgs} args - Arguments to create many FunGames.
     * @example
     * // Create many FunGames
     * const funGame = await prisma.funGame.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FunGames and only return the `id`
     * const funGameWithIdOnly = await prisma.funGame.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FunGameCreateManyAndReturnArgs>(args?: SelectSubset<T, FunGameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FunGame.
     * @param {FunGameDeleteArgs} args - Arguments to delete one FunGame.
     * @example
     * // Delete one FunGame
     * const FunGame = await prisma.funGame.delete({
     *   where: {
     *     // ... filter to delete one FunGame
     *   }
     * })
     * 
     */
    delete<T extends FunGameDeleteArgs>(args: SelectSubset<T, FunGameDeleteArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FunGame.
     * @param {FunGameUpdateArgs} args - Arguments to update one FunGame.
     * @example
     * // Update one FunGame
     * const funGame = await prisma.funGame.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FunGameUpdateArgs>(args: SelectSubset<T, FunGameUpdateArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FunGames.
     * @param {FunGameDeleteManyArgs} args - Arguments to filter FunGames to delete.
     * @example
     * // Delete a few FunGames
     * const { count } = await prisma.funGame.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FunGameDeleteManyArgs>(args?: SelectSubset<T, FunGameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FunGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FunGames
     * const funGame = await prisma.funGame.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FunGameUpdateManyArgs>(args: SelectSubset<T, FunGameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FunGames and returns the data updated in the database.
     * @param {FunGameUpdateManyAndReturnArgs} args - Arguments to update many FunGames.
     * @example
     * // Update many FunGames
     * const funGame = await prisma.funGame.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FunGames and only return the `id`
     * const funGameWithIdOnly = await prisma.funGame.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FunGameUpdateManyAndReturnArgs>(args: SelectSubset<T, FunGameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FunGame.
     * @param {FunGameUpsertArgs} args - Arguments to update or create a FunGame.
     * @example
     * // Update or create a FunGame
     * const funGame = await prisma.funGame.upsert({
     *   create: {
     *     // ... data to create a FunGame
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FunGame we want to update
     *   }
     * })
     */
    upsert<T extends FunGameUpsertArgs>(args: SelectSubset<T, FunGameUpsertArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FunGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameCountArgs} args - Arguments to filter FunGames to count.
     * @example
     * // Count the number of FunGames
     * const count = await prisma.funGame.count({
     *   where: {
     *     // ... the filter for the FunGames we want to count
     *   }
     * })
    **/
    count<T extends FunGameCountArgs>(
      args?: Subset<T, FunGameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FunGameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FunGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FunGameAggregateArgs>(args: Subset<T, FunGameAggregateArgs>): Prisma.PrismaPromise<GetFunGameAggregateType<T>>

    /**
     * Group by FunGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FunGameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FunGameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FunGameGroupByArgs['orderBy'] }
        : { orderBy?: FunGameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FunGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFunGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FunGame model
   */
  readonly fields: FunGameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FunGame.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FunGameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wonPolls<T extends FunGame$wonPollsArgs<ExtArgs> = {}>(args?: Subset<T, FunGame$wonPollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votes<T extends FunGame$votesArgs<ExtArgs> = {}>(args?: Subset<T, FunGame$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    polls<T extends FunGame$pollsArgs<ExtArgs> = {}>(args?: Subset<T, FunGame$pollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FunGame model
   */
  interface FunGameFieldRefs {
    readonly id: FieldRef<"FunGame", 'String'>
    readonly name: FieldRef<"FunGame", 'String'>
    readonly emoji: FieldRef<"FunGame", 'String'>
    readonly isFree: FieldRef<"FunGame", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * FunGame findUnique
   */
  export type FunGameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * Filter, which FunGame to fetch.
     */
    where: FunGameWhereUniqueInput
  }

  /**
   * FunGame findUniqueOrThrow
   */
  export type FunGameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * Filter, which FunGame to fetch.
     */
    where: FunGameWhereUniqueInput
  }

  /**
   * FunGame findFirst
   */
  export type FunGameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * Filter, which FunGame to fetch.
     */
    where?: FunGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunGames to fetch.
     */
    orderBy?: FunGameOrderByWithRelationInput | FunGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FunGames.
     */
    cursor?: FunGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FunGames.
     */
    distinct?: FunGameScalarFieldEnum | FunGameScalarFieldEnum[]
  }

  /**
   * FunGame findFirstOrThrow
   */
  export type FunGameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * Filter, which FunGame to fetch.
     */
    where?: FunGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunGames to fetch.
     */
    orderBy?: FunGameOrderByWithRelationInput | FunGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FunGames.
     */
    cursor?: FunGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FunGames.
     */
    distinct?: FunGameScalarFieldEnum | FunGameScalarFieldEnum[]
  }

  /**
   * FunGame findMany
   */
  export type FunGameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * Filter, which FunGames to fetch.
     */
    where?: FunGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FunGames to fetch.
     */
    orderBy?: FunGameOrderByWithRelationInput | FunGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FunGames.
     */
    cursor?: FunGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FunGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FunGames.
     */
    skip?: number
    distinct?: FunGameScalarFieldEnum | FunGameScalarFieldEnum[]
  }

  /**
   * FunGame create
   */
  export type FunGameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * The data needed to create a FunGame.
     */
    data: XOR<FunGameCreateInput, FunGameUncheckedCreateInput>
  }

  /**
   * FunGame createMany
   */
  export type FunGameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FunGames.
     */
    data: FunGameCreateManyInput | FunGameCreateManyInput[]
  }

  /**
   * FunGame createManyAndReturn
   */
  export type FunGameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * The data used to create many FunGames.
     */
    data: FunGameCreateManyInput | FunGameCreateManyInput[]
  }

  /**
   * FunGame update
   */
  export type FunGameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * The data needed to update a FunGame.
     */
    data: XOR<FunGameUpdateInput, FunGameUncheckedUpdateInput>
    /**
     * Choose, which FunGame to update.
     */
    where: FunGameWhereUniqueInput
  }

  /**
   * FunGame updateMany
   */
  export type FunGameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FunGames.
     */
    data: XOR<FunGameUpdateManyMutationInput, FunGameUncheckedUpdateManyInput>
    /**
     * Filter which FunGames to update
     */
    where?: FunGameWhereInput
    /**
     * Limit how many FunGames to update.
     */
    limit?: number
  }

  /**
   * FunGame updateManyAndReturn
   */
  export type FunGameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * The data used to update FunGames.
     */
    data: XOR<FunGameUpdateManyMutationInput, FunGameUncheckedUpdateManyInput>
    /**
     * Filter which FunGames to update
     */
    where?: FunGameWhereInput
    /**
     * Limit how many FunGames to update.
     */
    limit?: number
  }

  /**
   * FunGame upsert
   */
  export type FunGameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * The filter to search for the FunGame to update in case it exists.
     */
    where: FunGameWhereUniqueInput
    /**
     * In case the FunGame found by the `where` argument doesn't exist, create a new FunGame with this data.
     */
    create: XOR<FunGameCreateInput, FunGameUncheckedCreateInput>
    /**
     * In case the FunGame was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FunGameUpdateInput, FunGameUncheckedUpdateInput>
  }

  /**
   * FunGame delete
   */
  export type FunGameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    /**
     * Filter which FunGame to delete.
     */
    where: FunGameWhereUniqueInput
  }

  /**
   * FunGame deleteMany
   */
  export type FunGameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FunGames to delete
     */
    where?: FunGameWhereInput
    /**
     * Limit how many FunGames to delete.
     */
    limit?: number
  }

  /**
   * FunGame.wonPolls
   */
  export type FunGame$wonPollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    where?: PollWhereInput
    orderBy?: PollOrderByWithRelationInput | PollOrderByWithRelationInput[]
    cursor?: PollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PollScalarFieldEnum | PollScalarFieldEnum[]
  }

  /**
   * FunGame.votes
   */
  export type FunGame$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * FunGame.polls
   */
  export type FunGame$pollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    where?: PollWhereInput
    orderBy?: PollOrderByWithRelationInput | PollOrderByWithRelationInput[]
    cursor?: PollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PollScalarFieldEnum | PollScalarFieldEnum[]
  }

  /**
   * FunGame without action
   */
  export type FunGameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
  }


  /**
   * Model Poll
   */

  export type AggregatePoll = {
    _count: PollCountAggregateOutputType | null
    _avg: PollAvgAggregateOutputType | null
    _sum: PollSumAggregateOutputType | null
    _min: PollMinAggregateOutputType | null
    _max: PollMaxAggregateOutputType | null
  }

  export type PollAvgAggregateOutputType = {
    pollNumber: number | null
  }

  export type PollSumAggregateOutputType = {
    pollNumber: number | null
  }

  export type PollMinAggregateOutputType = {
    id: string | null
    question: string | null
    type: string | null
    pollNumber: number | null
    messageId: string | null
    createdAt: Date | null
    endedAt: Date | null
    winnerId: string | null
  }

  export type PollMaxAggregateOutputType = {
    id: string | null
    question: string | null
    type: string | null
    pollNumber: number | null
    messageId: string | null
    createdAt: Date | null
    endedAt: Date | null
    winnerId: string | null
  }

  export type PollCountAggregateOutputType = {
    id: number
    question: number
    type: number
    pollNumber: number
    messageId: number
    createdAt: number
    endedAt: number
    winnerId: number
    _all: number
  }


  export type PollAvgAggregateInputType = {
    pollNumber?: true
  }

  export type PollSumAggregateInputType = {
    pollNumber?: true
  }

  export type PollMinAggregateInputType = {
    id?: true
    question?: true
    type?: true
    pollNumber?: true
    messageId?: true
    createdAt?: true
    endedAt?: true
    winnerId?: true
  }

  export type PollMaxAggregateInputType = {
    id?: true
    question?: true
    type?: true
    pollNumber?: true
    messageId?: true
    createdAt?: true
    endedAt?: true
    winnerId?: true
  }

  export type PollCountAggregateInputType = {
    id?: true
    question?: true
    type?: true
    pollNumber?: true
    messageId?: true
    createdAt?: true
    endedAt?: true
    winnerId?: true
    _all?: true
  }

  export type PollAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Poll to aggregate.
     */
    where?: PollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polls to fetch.
     */
    orderBy?: PollOrderByWithRelationInput | PollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Polls
    **/
    _count?: true | PollCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PollAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PollSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PollMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PollMaxAggregateInputType
  }

  export type GetPollAggregateType<T extends PollAggregateArgs> = {
        [P in keyof T & keyof AggregatePoll]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePoll[P]>
      : GetScalarType<T[P], AggregatePoll[P]>
  }




  export type PollGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PollWhereInput
    orderBy?: PollOrderByWithAggregationInput | PollOrderByWithAggregationInput[]
    by: PollScalarFieldEnum[] | PollScalarFieldEnum
    having?: PollScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PollCountAggregateInputType | true
    _avg?: PollAvgAggregateInputType
    _sum?: PollSumAggregateInputType
    _min?: PollMinAggregateInputType
    _max?: PollMaxAggregateInputType
  }

  export type PollGroupByOutputType = {
    id: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt: Date
    endedAt: Date | null
    winnerId: string | null
    _count: PollCountAggregateOutputType | null
    _avg: PollAvgAggregateOutputType | null
    _sum: PollSumAggregateOutputType | null
    _min: PollMinAggregateOutputType | null
    _max: PollMaxAggregateOutputType | null
  }

  type GetPollGroupByPayload<T extends PollGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PollGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PollGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PollGroupByOutputType[P]>
            : GetScalarType<T[P], PollGroupByOutputType[P]>
        }
      >
    >


  export type PollSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    type?: boolean
    pollNumber?: boolean
    messageId?: boolean
    createdAt?: boolean
    endedAt?: boolean
    winnerId?: boolean
    winner?: boolean | Poll$winnerArgs<ExtArgs>
    votes?: boolean | Poll$votesArgs<ExtArgs>
    games?: boolean | Poll$gamesArgs<ExtArgs>
    _count?: boolean | PollCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["poll"]>

  export type PollSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    type?: boolean
    pollNumber?: boolean
    messageId?: boolean
    createdAt?: boolean
    endedAt?: boolean
    winnerId?: boolean
    winner?: boolean | Poll$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["poll"]>

  export type PollSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    type?: boolean
    pollNumber?: boolean
    messageId?: boolean
    createdAt?: boolean
    endedAt?: boolean
    winnerId?: boolean
    winner?: boolean | Poll$winnerArgs<ExtArgs>
  }, ExtArgs["result"]["poll"]>

  export type PollSelectScalar = {
    id?: boolean
    question?: boolean
    type?: boolean
    pollNumber?: boolean
    messageId?: boolean
    createdAt?: boolean
    endedAt?: boolean
    winnerId?: boolean
  }

  export type PollOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question" | "type" | "pollNumber" | "messageId" | "createdAt" | "endedAt" | "winnerId", ExtArgs["result"]["poll"]>
  export type PollInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    winner?: boolean | Poll$winnerArgs<ExtArgs>
    votes?: boolean | Poll$votesArgs<ExtArgs>
    games?: boolean | Poll$gamesArgs<ExtArgs>
    _count?: boolean | PollCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PollIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    winner?: boolean | Poll$winnerArgs<ExtArgs>
  }
  export type PollIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    winner?: boolean | Poll$winnerArgs<ExtArgs>
  }

  export type $PollPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Poll"
    objects: {
      winner: Prisma.$FunGamePayload<ExtArgs> | null
      votes: Prisma.$VotePayload<ExtArgs>[]
      games: Prisma.$FunGamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      type: string
      pollNumber: number
      messageId: string
      createdAt: Date
      endedAt: Date | null
      winnerId: string | null
    }, ExtArgs["result"]["poll"]>
    composites: {}
  }

  type PollGetPayload<S extends boolean | null | undefined | PollDefaultArgs> = $Result.GetResult<Prisma.$PollPayload, S>

  type PollCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PollFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PollCountAggregateInputType | true
    }

  export interface PollDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Poll'], meta: { name: 'Poll' } }
    /**
     * Find zero or one Poll that matches the filter.
     * @param {PollFindUniqueArgs} args - Arguments to find a Poll
     * @example
     * // Get one Poll
     * const poll = await prisma.poll.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PollFindUniqueArgs>(args: SelectSubset<T, PollFindUniqueArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Poll that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PollFindUniqueOrThrowArgs} args - Arguments to find a Poll
     * @example
     * // Get one Poll
     * const poll = await prisma.poll.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PollFindUniqueOrThrowArgs>(args: SelectSubset<T, PollFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Poll that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollFindFirstArgs} args - Arguments to find a Poll
     * @example
     * // Get one Poll
     * const poll = await prisma.poll.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PollFindFirstArgs>(args?: SelectSubset<T, PollFindFirstArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Poll that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollFindFirstOrThrowArgs} args - Arguments to find a Poll
     * @example
     * // Get one Poll
     * const poll = await prisma.poll.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PollFindFirstOrThrowArgs>(args?: SelectSubset<T, PollFindFirstOrThrowArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Polls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Polls
     * const polls = await prisma.poll.findMany()
     * 
     * // Get first 10 Polls
     * const polls = await prisma.poll.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pollWithIdOnly = await prisma.poll.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PollFindManyArgs>(args?: SelectSubset<T, PollFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Poll.
     * @param {PollCreateArgs} args - Arguments to create a Poll.
     * @example
     * // Create one Poll
     * const Poll = await prisma.poll.create({
     *   data: {
     *     // ... data to create a Poll
     *   }
     * })
     * 
     */
    create<T extends PollCreateArgs>(args: SelectSubset<T, PollCreateArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Polls.
     * @param {PollCreateManyArgs} args - Arguments to create many Polls.
     * @example
     * // Create many Polls
     * const poll = await prisma.poll.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PollCreateManyArgs>(args?: SelectSubset<T, PollCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Polls and returns the data saved in the database.
     * @param {PollCreateManyAndReturnArgs} args - Arguments to create many Polls.
     * @example
     * // Create many Polls
     * const poll = await prisma.poll.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Polls and only return the `id`
     * const pollWithIdOnly = await prisma.poll.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PollCreateManyAndReturnArgs>(args?: SelectSubset<T, PollCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Poll.
     * @param {PollDeleteArgs} args - Arguments to delete one Poll.
     * @example
     * // Delete one Poll
     * const Poll = await prisma.poll.delete({
     *   where: {
     *     // ... filter to delete one Poll
     *   }
     * })
     * 
     */
    delete<T extends PollDeleteArgs>(args: SelectSubset<T, PollDeleteArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Poll.
     * @param {PollUpdateArgs} args - Arguments to update one Poll.
     * @example
     * // Update one Poll
     * const poll = await prisma.poll.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PollUpdateArgs>(args: SelectSubset<T, PollUpdateArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Polls.
     * @param {PollDeleteManyArgs} args - Arguments to filter Polls to delete.
     * @example
     * // Delete a few Polls
     * const { count } = await prisma.poll.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PollDeleteManyArgs>(args?: SelectSubset<T, PollDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Polls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Polls
     * const poll = await prisma.poll.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PollUpdateManyArgs>(args: SelectSubset<T, PollUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Polls and returns the data updated in the database.
     * @param {PollUpdateManyAndReturnArgs} args - Arguments to update many Polls.
     * @example
     * // Update many Polls
     * const poll = await prisma.poll.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Polls and only return the `id`
     * const pollWithIdOnly = await prisma.poll.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PollUpdateManyAndReturnArgs>(args: SelectSubset<T, PollUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Poll.
     * @param {PollUpsertArgs} args - Arguments to update or create a Poll.
     * @example
     * // Update or create a Poll
     * const poll = await prisma.poll.upsert({
     *   create: {
     *     // ... data to create a Poll
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Poll we want to update
     *   }
     * })
     */
    upsert<T extends PollUpsertArgs>(args: SelectSubset<T, PollUpsertArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Polls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollCountArgs} args - Arguments to filter Polls to count.
     * @example
     * // Count the number of Polls
     * const count = await prisma.poll.count({
     *   where: {
     *     // ... the filter for the Polls we want to count
     *   }
     * })
    **/
    count<T extends PollCountArgs>(
      args?: Subset<T, PollCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PollCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Poll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PollAggregateArgs>(args: Subset<T, PollAggregateArgs>): Prisma.PrismaPromise<GetPollAggregateType<T>>

    /**
     * Group by Poll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PollGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PollGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PollGroupByArgs['orderBy'] }
        : { orderBy?: PollGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PollGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPollGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Poll model
   */
  readonly fields: PollFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Poll.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PollClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    winner<T extends Poll$winnerArgs<ExtArgs> = {}>(args?: Subset<T, Poll$winnerArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    votes<T extends Poll$votesArgs<ExtArgs> = {}>(args?: Subset<T, Poll$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    games<T extends Poll$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Poll$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Poll model
   */
  interface PollFieldRefs {
    readonly id: FieldRef<"Poll", 'String'>
    readonly question: FieldRef<"Poll", 'String'>
    readonly type: FieldRef<"Poll", 'String'>
    readonly pollNumber: FieldRef<"Poll", 'Int'>
    readonly messageId: FieldRef<"Poll", 'String'>
    readonly createdAt: FieldRef<"Poll", 'DateTime'>
    readonly endedAt: FieldRef<"Poll", 'DateTime'>
    readonly winnerId: FieldRef<"Poll", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Poll findUnique
   */
  export type PollFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * Filter, which Poll to fetch.
     */
    where: PollWhereUniqueInput
  }

  /**
   * Poll findUniqueOrThrow
   */
  export type PollFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * Filter, which Poll to fetch.
     */
    where: PollWhereUniqueInput
  }

  /**
   * Poll findFirst
   */
  export type PollFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * Filter, which Poll to fetch.
     */
    where?: PollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polls to fetch.
     */
    orderBy?: PollOrderByWithRelationInput | PollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Polls.
     */
    cursor?: PollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Polls.
     */
    distinct?: PollScalarFieldEnum | PollScalarFieldEnum[]
  }

  /**
   * Poll findFirstOrThrow
   */
  export type PollFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * Filter, which Poll to fetch.
     */
    where?: PollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polls to fetch.
     */
    orderBy?: PollOrderByWithRelationInput | PollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Polls.
     */
    cursor?: PollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Polls.
     */
    distinct?: PollScalarFieldEnum | PollScalarFieldEnum[]
  }

  /**
   * Poll findMany
   */
  export type PollFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * Filter, which Polls to fetch.
     */
    where?: PollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Polls to fetch.
     */
    orderBy?: PollOrderByWithRelationInput | PollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Polls.
     */
    cursor?: PollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Polls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Polls.
     */
    skip?: number
    distinct?: PollScalarFieldEnum | PollScalarFieldEnum[]
  }

  /**
   * Poll create
   */
  export type PollCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * The data needed to create a Poll.
     */
    data: XOR<PollCreateInput, PollUncheckedCreateInput>
  }

  /**
   * Poll createMany
   */
  export type PollCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Polls.
     */
    data: PollCreateManyInput | PollCreateManyInput[]
  }

  /**
   * Poll createManyAndReturn
   */
  export type PollCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * The data used to create many Polls.
     */
    data: PollCreateManyInput | PollCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Poll update
   */
  export type PollUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * The data needed to update a Poll.
     */
    data: XOR<PollUpdateInput, PollUncheckedUpdateInput>
    /**
     * Choose, which Poll to update.
     */
    where: PollWhereUniqueInput
  }

  /**
   * Poll updateMany
   */
  export type PollUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Polls.
     */
    data: XOR<PollUpdateManyMutationInput, PollUncheckedUpdateManyInput>
    /**
     * Filter which Polls to update
     */
    where?: PollWhereInput
    /**
     * Limit how many Polls to update.
     */
    limit?: number
  }

  /**
   * Poll updateManyAndReturn
   */
  export type PollUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * The data used to update Polls.
     */
    data: XOR<PollUpdateManyMutationInput, PollUncheckedUpdateManyInput>
    /**
     * Filter which Polls to update
     */
    where?: PollWhereInput
    /**
     * Limit how many Polls to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Poll upsert
   */
  export type PollUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * The filter to search for the Poll to update in case it exists.
     */
    where: PollWhereUniqueInput
    /**
     * In case the Poll found by the `where` argument doesn't exist, create a new Poll with this data.
     */
    create: XOR<PollCreateInput, PollUncheckedCreateInput>
    /**
     * In case the Poll was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PollUpdateInput, PollUncheckedUpdateInput>
  }

  /**
   * Poll delete
   */
  export type PollDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
    /**
     * Filter which Poll to delete.
     */
    where: PollWhereUniqueInput
  }

  /**
   * Poll deleteMany
   */
  export type PollDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Polls to delete
     */
    where?: PollWhereInput
    /**
     * Limit how many Polls to delete.
     */
    limit?: number
  }

  /**
   * Poll.winner
   */
  export type Poll$winnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    where?: FunGameWhereInput
  }

  /**
   * Poll.votes
   */
  export type Poll$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Poll.games
   */
  export type Poll$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FunGame
     */
    select?: FunGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FunGame
     */
    omit?: FunGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FunGameInclude<ExtArgs> | null
    where?: FunGameWhereInput
    orderBy?: FunGameOrderByWithRelationInput | FunGameOrderByWithRelationInput[]
    cursor?: FunGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FunGameScalarFieldEnum | FunGameScalarFieldEnum[]
  }

  /**
   * Poll without action
   */
  export type PollDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Poll
     */
    select?: PollSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Poll
     */
    omit?: PollOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PollInclude<ExtArgs> | null
  }


  /**
   * Model Vote
   */

  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    pollId: string | null
    createdAt: Date | null
  }

  export type VoteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    pollId: string | null
    createdAt: Date | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    userId: number
    gameId: number
    pollId: number
    createdAt: number
    _all: number
  }


  export type VoteMinAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    pollId?: true
    createdAt?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    pollId?: true
    createdAt?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    pollId?: true
    createdAt?: true
    _all?: true
  }

  export type VoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vote to aggregate.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithAggregationInput | VoteOrderByWithAggregationInput[]
    by: VoteScalarFieldEnum[] | VoteScalarFieldEnum
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }

  export type VoteGroupByOutputType = {
    id: string
    userId: string
    gameId: string
    pollId: string
    createdAt: Date
    _count: VoteCountAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    pollId?: boolean
    createdAt?: boolean
    poll?: boolean | PollDefaultArgs<ExtArgs>
    game?: boolean | FunGameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    pollId?: boolean
    createdAt?: boolean
    poll?: boolean | PollDefaultArgs<ExtArgs>
    game?: boolean | FunGameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    pollId?: boolean
    createdAt?: boolean
    poll?: boolean | PollDefaultArgs<ExtArgs>
    game?: boolean | FunGameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectScalar = {
    id?: boolean
    userId?: boolean
    gameId?: boolean
    pollId?: boolean
    createdAt?: boolean
  }

  export type VoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "gameId" | "pollId" | "createdAt", ExtArgs["result"]["vote"]>
  export type VoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    poll?: boolean | PollDefaultArgs<ExtArgs>
    game?: boolean | FunGameDefaultArgs<ExtArgs>
  }
  export type VoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    poll?: boolean | PollDefaultArgs<ExtArgs>
    game?: boolean | FunGameDefaultArgs<ExtArgs>
  }
  export type VoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    poll?: boolean | PollDefaultArgs<ExtArgs>
    game?: boolean | FunGameDefaultArgs<ExtArgs>
  }

  export type $VotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vote"
    objects: {
      poll: Prisma.$PollPayload<ExtArgs>
      game: Prisma.$FunGamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      gameId: string
      pollId: string
      createdAt: Date
    }, ExtArgs["result"]["vote"]>
    composites: {}
  }

  type VoteGetPayload<S extends boolean | null | undefined | VoteDefaultArgs> = $Result.GetResult<Prisma.$VotePayload, S>

  type VoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoteCountAggregateInputType | true
    }

  export interface VoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vote'], meta: { name: 'Vote' } }
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteFindUniqueArgs>(args: SelectSubset<T, VoteFindUniqueArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteFindFirstArgs>(args?: SelectSubset<T, VoteFindFirstArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoteFindManyArgs>(args?: SelectSubset<T, VoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
     */
    create<T extends VoteCreateArgs>(args: SelectSubset<T, VoteCreateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Votes.
     * @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteCreateManyArgs>(args?: SelectSubset<T, VoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Votes and returns the data saved in the database.
     * @param {VoteCreateManyAndReturnArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Votes and only return the `id`
     * const voteWithIdOnly = await prisma.vote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
     */
    delete<T extends VoteDeleteArgs>(args: SelectSubset<T, VoteDeleteArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteUpdateArgs>(args: SelectSubset<T, VoteUpdateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteDeleteManyArgs>(args?: SelectSubset<T, VoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteUpdateManyArgs>(args: SelectSubset<T, VoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes and returns the data updated in the database.
     * @param {VoteUpdateManyAndReturnArgs} args - Arguments to update many Votes.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Votes and only return the `id`
     * const voteWithIdOnly = await prisma.vote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoteUpdateManyAndReturnArgs>(args: SelectSubset<T, VoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
     */
    upsert<T extends VoteUpsertArgs>(args: SelectSubset<T, VoteUpsertArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): Prisma.PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vote model
   */
  readonly fields: VoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    poll<T extends PollDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PollDefaultArgs<ExtArgs>>): Prisma__PollClient<$Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends FunGameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FunGameDefaultArgs<ExtArgs>>): Prisma__FunGameClient<$Result.GetResult<Prisma.$FunGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vote model
   */
  interface VoteFieldRefs {
    readonly id: FieldRef<"Vote", 'String'>
    readonly userId: FieldRef<"Vote", 'String'>
    readonly gameId: FieldRef<"Vote", 'String'>
    readonly pollId: FieldRef<"Vote", 'String'>
    readonly createdAt: FieldRef<"Vote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findMany
   */
  export type VoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Votes to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote create
   */
  export type VoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Vote.
     */
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }

  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
  }

  /**
   * Vote createManyAndReturn
   */
  export type VoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vote update
   */
  export type VoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Vote.
     */
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
    /**
     * Limit how many Votes to update.
     */
    limit?: number
  }

  /**
   * Vote updateManyAndReturn
   */
  export type VoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
    /**
     * Limit how many Votes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vote upsert
   */
  export type VoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Vote to update in case it exists.
     */
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     */
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }

  /**
   * Vote delete
   */
  export type VoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter which Vote to delete.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votes to delete
     */
    where?: VoteWhereInput
    /**
     * Limit how many Votes to delete.
     */
    limit?: number
  }

  /**
   * Vote without action
   */
  export type VoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
  }


  /**
   * Model DinoName
   */

  export type AggregateDinoName = {
    _count: DinoNameCountAggregateOutputType | null
    _avg: DinoNameAvgAggregateOutputType | null
    _sum: DinoNameSumAggregateOutputType | null
    _min: DinoNameMinAggregateOutputType | null
    _max: DinoNameMaxAggregateOutputType | null
  }

  export type DinoNameAvgAggregateOutputType = {
    id: number | null
  }

  export type DinoNameSumAggregateOutputType = {
    id: number | null
  }

  export type DinoNameMinAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
    type: string | null
    size: string | null
    style: string | null
    approved: boolean | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type DinoNameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    color: string | null
    type: string | null
    size: string | null
    style: string | null
    approved: boolean | null
    submittedBy: string | null
    createdAt: Date | null
  }

  export type DinoNameCountAggregateOutputType = {
    id: number
    name: number
    color: number
    type: number
    size: number
    style: number
    approved: number
    submittedBy: number
    createdAt: number
    _all: number
  }


  export type DinoNameAvgAggregateInputType = {
    id?: true
  }

  export type DinoNameSumAggregateInputType = {
    id?: true
  }

  export type DinoNameMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
    type?: true
    size?: true
    style?: true
    approved?: true
    submittedBy?: true
    createdAt?: true
  }

  export type DinoNameMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
    type?: true
    size?: true
    style?: true
    approved?: true
    submittedBy?: true
    createdAt?: true
  }

  export type DinoNameCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    type?: true
    size?: true
    style?: true
    approved?: true
    submittedBy?: true
    createdAt?: true
    _all?: true
  }

  export type DinoNameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DinoName to aggregate.
     */
    where?: DinoNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoNames to fetch.
     */
    orderBy?: DinoNameOrderByWithRelationInput | DinoNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DinoNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DinoNames
    **/
    _count?: true | DinoNameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DinoNameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DinoNameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DinoNameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DinoNameMaxAggregateInputType
  }

  export type GetDinoNameAggregateType<T extends DinoNameAggregateArgs> = {
        [P in keyof T & keyof AggregateDinoName]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDinoName[P]>
      : GetScalarType<T[P], AggregateDinoName[P]>
  }




  export type DinoNameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DinoNameWhereInput
    orderBy?: DinoNameOrderByWithAggregationInput | DinoNameOrderByWithAggregationInput[]
    by: DinoNameScalarFieldEnum[] | DinoNameScalarFieldEnum
    having?: DinoNameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DinoNameCountAggregateInputType | true
    _avg?: DinoNameAvgAggregateInputType
    _sum?: DinoNameSumAggregateInputType
    _min?: DinoNameMinAggregateInputType
    _max?: DinoNameMaxAggregateInputType
  }

  export type DinoNameGroupByOutputType = {
    id: number
    name: string
    color: string | null
    type: string | null
    size: string | null
    style: string | null
    approved: boolean
    submittedBy: string | null
    createdAt: Date
    _count: DinoNameCountAggregateOutputType | null
    _avg: DinoNameAvgAggregateOutputType | null
    _sum: DinoNameSumAggregateOutputType | null
    _min: DinoNameMinAggregateOutputType | null
    _max: DinoNameMaxAggregateOutputType | null
  }

  type GetDinoNameGroupByPayload<T extends DinoNameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DinoNameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DinoNameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DinoNameGroupByOutputType[P]>
            : GetScalarType<T[P], DinoNameGroupByOutputType[P]>
        }
      >
    >


  export type DinoNameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    type?: boolean
    size?: boolean
    style?: boolean
    approved?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dinoName"]>

  export type DinoNameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    type?: boolean
    size?: boolean
    style?: boolean
    approved?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dinoName"]>

  export type DinoNameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    type?: boolean
    size?: boolean
    style?: boolean
    approved?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dinoName"]>

  export type DinoNameSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
    type?: boolean
    size?: boolean
    style?: boolean
    approved?: boolean
    submittedBy?: boolean
    createdAt?: boolean
  }

  export type DinoNameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "color" | "type" | "size" | "style" | "approved" | "submittedBy" | "createdAt", ExtArgs["result"]["dinoName"]>

  export type $DinoNamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DinoName"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      color: string | null
      type: string | null
      size: string | null
      style: string | null
      approved: boolean
      submittedBy: string | null
      createdAt: Date
    }, ExtArgs["result"]["dinoName"]>
    composites: {}
  }

  type DinoNameGetPayload<S extends boolean | null | undefined | DinoNameDefaultArgs> = $Result.GetResult<Prisma.$DinoNamePayload, S>

  type DinoNameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DinoNameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DinoNameCountAggregateInputType | true
    }

  export interface DinoNameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DinoName'], meta: { name: 'DinoName' } }
    /**
     * Find zero or one DinoName that matches the filter.
     * @param {DinoNameFindUniqueArgs} args - Arguments to find a DinoName
     * @example
     * // Get one DinoName
     * const dinoName = await prisma.dinoName.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DinoNameFindUniqueArgs>(args: SelectSubset<T, DinoNameFindUniqueArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DinoName that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DinoNameFindUniqueOrThrowArgs} args - Arguments to find a DinoName
     * @example
     * // Get one DinoName
     * const dinoName = await prisma.dinoName.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DinoNameFindUniqueOrThrowArgs>(args: SelectSubset<T, DinoNameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DinoName that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameFindFirstArgs} args - Arguments to find a DinoName
     * @example
     * // Get one DinoName
     * const dinoName = await prisma.dinoName.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DinoNameFindFirstArgs>(args?: SelectSubset<T, DinoNameFindFirstArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DinoName that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameFindFirstOrThrowArgs} args - Arguments to find a DinoName
     * @example
     * // Get one DinoName
     * const dinoName = await prisma.dinoName.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DinoNameFindFirstOrThrowArgs>(args?: SelectSubset<T, DinoNameFindFirstOrThrowArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DinoNames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DinoNames
     * const dinoNames = await prisma.dinoName.findMany()
     * 
     * // Get first 10 DinoNames
     * const dinoNames = await prisma.dinoName.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dinoNameWithIdOnly = await prisma.dinoName.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DinoNameFindManyArgs>(args?: SelectSubset<T, DinoNameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DinoName.
     * @param {DinoNameCreateArgs} args - Arguments to create a DinoName.
     * @example
     * // Create one DinoName
     * const DinoName = await prisma.dinoName.create({
     *   data: {
     *     // ... data to create a DinoName
     *   }
     * })
     * 
     */
    create<T extends DinoNameCreateArgs>(args: SelectSubset<T, DinoNameCreateArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DinoNames.
     * @param {DinoNameCreateManyArgs} args - Arguments to create many DinoNames.
     * @example
     * // Create many DinoNames
     * const dinoName = await prisma.dinoName.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DinoNameCreateManyArgs>(args?: SelectSubset<T, DinoNameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DinoNames and returns the data saved in the database.
     * @param {DinoNameCreateManyAndReturnArgs} args - Arguments to create many DinoNames.
     * @example
     * // Create many DinoNames
     * const dinoName = await prisma.dinoName.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DinoNames and only return the `id`
     * const dinoNameWithIdOnly = await prisma.dinoName.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DinoNameCreateManyAndReturnArgs>(args?: SelectSubset<T, DinoNameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DinoName.
     * @param {DinoNameDeleteArgs} args - Arguments to delete one DinoName.
     * @example
     * // Delete one DinoName
     * const DinoName = await prisma.dinoName.delete({
     *   where: {
     *     // ... filter to delete one DinoName
     *   }
     * })
     * 
     */
    delete<T extends DinoNameDeleteArgs>(args: SelectSubset<T, DinoNameDeleteArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DinoName.
     * @param {DinoNameUpdateArgs} args - Arguments to update one DinoName.
     * @example
     * // Update one DinoName
     * const dinoName = await prisma.dinoName.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DinoNameUpdateArgs>(args: SelectSubset<T, DinoNameUpdateArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DinoNames.
     * @param {DinoNameDeleteManyArgs} args - Arguments to filter DinoNames to delete.
     * @example
     * // Delete a few DinoNames
     * const { count } = await prisma.dinoName.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DinoNameDeleteManyArgs>(args?: SelectSubset<T, DinoNameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DinoNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DinoNames
     * const dinoName = await prisma.dinoName.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DinoNameUpdateManyArgs>(args: SelectSubset<T, DinoNameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DinoNames and returns the data updated in the database.
     * @param {DinoNameUpdateManyAndReturnArgs} args - Arguments to update many DinoNames.
     * @example
     * // Update many DinoNames
     * const dinoName = await prisma.dinoName.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DinoNames and only return the `id`
     * const dinoNameWithIdOnly = await prisma.dinoName.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DinoNameUpdateManyAndReturnArgs>(args: SelectSubset<T, DinoNameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DinoName.
     * @param {DinoNameUpsertArgs} args - Arguments to update or create a DinoName.
     * @example
     * // Update or create a DinoName
     * const dinoName = await prisma.dinoName.upsert({
     *   create: {
     *     // ... data to create a DinoName
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DinoName we want to update
     *   }
     * })
     */
    upsert<T extends DinoNameUpsertArgs>(args: SelectSubset<T, DinoNameUpsertArgs<ExtArgs>>): Prisma__DinoNameClient<$Result.GetResult<Prisma.$DinoNamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DinoNames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameCountArgs} args - Arguments to filter DinoNames to count.
     * @example
     * // Count the number of DinoNames
     * const count = await prisma.dinoName.count({
     *   where: {
     *     // ... the filter for the DinoNames we want to count
     *   }
     * })
    **/
    count<T extends DinoNameCountArgs>(
      args?: Subset<T, DinoNameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DinoNameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DinoName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DinoNameAggregateArgs>(args: Subset<T, DinoNameAggregateArgs>): Prisma.PrismaPromise<GetDinoNameAggregateType<T>>

    /**
     * Group by DinoName.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoNameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DinoNameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DinoNameGroupByArgs['orderBy'] }
        : { orderBy?: DinoNameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DinoNameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDinoNameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DinoName model
   */
  readonly fields: DinoNameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DinoName.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DinoNameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DinoName model
   */
  interface DinoNameFieldRefs {
    readonly id: FieldRef<"DinoName", 'Int'>
    readonly name: FieldRef<"DinoName", 'String'>
    readonly color: FieldRef<"DinoName", 'String'>
    readonly type: FieldRef<"DinoName", 'String'>
    readonly size: FieldRef<"DinoName", 'String'>
    readonly style: FieldRef<"DinoName", 'String'>
    readonly approved: FieldRef<"DinoName", 'Boolean'>
    readonly submittedBy: FieldRef<"DinoName", 'String'>
    readonly createdAt: FieldRef<"DinoName", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DinoName findUnique
   */
  export type DinoNameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * Filter, which DinoName to fetch.
     */
    where: DinoNameWhereUniqueInput
  }

  /**
   * DinoName findUniqueOrThrow
   */
  export type DinoNameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * Filter, which DinoName to fetch.
     */
    where: DinoNameWhereUniqueInput
  }

  /**
   * DinoName findFirst
   */
  export type DinoNameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * Filter, which DinoName to fetch.
     */
    where?: DinoNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoNames to fetch.
     */
    orderBy?: DinoNameOrderByWithRelationInput | DinoNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DinoNames.
     */
    cursor?: DinoNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DinoNames.
     */
    distinct?: DinoNameScalarFieldEnum | DinoNameScalarFieldEnum[]
  }

  /**
   * DinoName findFirstOrThrow
   */
  export type DinoNameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * Filter, which DinoName to fetch.
     */
    where?: DinoNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoNames to fetch.
     */
    orderBy?: DinoNameOrderByWithRelationInput | DinoNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DinoNames.
     */
    cursor?: DinoNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoNames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DinoNames.
     */
    distinct?: DinoNameScalarFieldEnum | DinoNameScalarFieldEnum[]
  }

  /**
   * DinoName findMany
   */
  export type DinoNameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * Filter, which DinoNames to fetch.
     */
    where?: DinoNameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoNames to fetch.
     */
    orderBy?: DinoNameOrderByWithRelationInput | DinoNameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DinoNames.
     */
    cursor?: DinoNameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoNames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoNames.
     */
    skip?: number
    distinct?: DinoNameScalarFieldEnum | DinoNameScalarFieldEnum[]
  }

  /**
   * DinoName create
   */
  export type DinoNameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * The data needed to create a DinoName.
     */
    data: XOR<DinoNameCreateInput, DinoNameUncheckedCreateInput>
  }

  /**
   * DinoName createMany
   */
  export type DinoNameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DinoNames.
     */
    data: DinoNameCreateManyInput | DinoNameCreateManyInput[]
  }

  /**
   * DinoName createManyAndReturn
   */
  export type DinoNameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * The data used to create many DinoNames.
     */
    data: DinoNameCreateManyInput | DinoNameCreateManyInput[]
  }

  /**
   * DinoName update
   */
  export type DinoNameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * The data needed to update a DinoName.
     */
    data: XOR<DinoNameUpdateInput, DinoNameUncheckedUpdateInput>
    /**
     * Choose, which DinoName to update.
     */
    where: DinoNameWhereUniqueInput
  }

  /**
   * DinoName updateMany
   */
  export type DinoNameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DinoNames.
     */
    data: XOR<DinoNameUpdateManyMutationInput, DinoNameUncheckedUpdateManyInput>
    /**
     * Filter which DinoNames to update
     */
    where?: DinoNameWhereInput
    /**
     * Limit how many DinoNames to update.
     */
    limit?: number
  }

  /**
   * DinoName updateManyAndReturn
   */
  export type DinoNameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * The data used to update DinoNames.
     */
    data: XOR<DinoNameUpdateManyMutationInput, DinoNameUncheckedUpdateManyInput>
    /**
     * Filter which DinoNames to update
     */
    where?: DinoNameWhereInput
    /**
     * Limit how many DinoNames to update.
     */
    limit?: number
  }

  /**
   * DinoName upsert
   */
  export type DinoNameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * The filter to search for the DinoName to update in case it exists.
     */
    where: DinoNameWhereUniqueInput
    /**
     * In case the DinoName found by the `where` argument doesn't exist, create a new DinoName with this data.
     */
    create: XOR<DinoNameCreateInput, DinoNameUncheckedCreateInput>
    /**
     * In case the DinoName was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DinoNameUpdateInput, DinoNameUncheckedUpdateInput>
  }

  /**
   * DinoName delete
   */
  export type DinoNameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
    /**
     * Filter which DinoName to delete.
     */
    where: DinoNameWhereUniqueInput
  }

  /**
   * DinoName deleteMany
   */
  export type DinoNameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DinoNames to delete
     */
    where?: DinoNameWhereInput
    /**
     * Limit how many DinoNames to delete.
     */
    limit?: number
  }

  /**
   * DinoName without action
   */
  export type DinoNameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoName
     */
    select?: DinoNameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoName
     */
    omit?: DinoNameOmit<ExtArgs> | null
  }


  /**
   * Model DinoStats
   */

  export type AggregateDinoStats = {
    _count: DinoStatsCountAggregateOutputType | null
    _avg: DinoStatsAvgAggregateOutputType | null
    _sum: DinoStatsSumAggregateOutputType | null
    _min: DinoStatsMinAggregateOutputType | null
    _max: DinoStatsMaxAggregateOutputType | null
  }

  export type DinoStatsAvgAggregateOutputType = {
    id: number | null
    totalUses: number | null
    totalRerolls: number | null
  }

  export type DinoStatsSumAggregateOutputType = {
    id: number | null
    totalUses: number | null
    totalRerolls: number | null
  }

  export type DinoStatsMinAggregateOutputType = {
    id: number | null
    totalUses: number | null
    totalRerolls: number | null
    updatedAt: Date | null
  }

  export type DinoStatsMaxAggregateOutputType = {
    id: number | null
    totalUses: number | null
    totalRerolls: number | null
    updatedAt: Date | null
  }

  export type DinoStatsCountAggregateOutputType = {
    id: number
    totalUses: number
    totalRerolls: number
    updatedAt: number
    _all: number
  }


  export type DinoStatsAvgAggregateInputType = {
    id?: true
    totalUses?: true
    totalRerolls?: true
  }

  export type DinoStatsSumAggregateInputType = {
    id?: true
    totalUses?: true
    totalRerolls?: true
  }

  export type DinoStatsMinAggregateInputType = {
    id?: true
    totalUses?: true
    totalRerolls?: true
    updatedAt?: true
  }

  export type DinoStatsMaxAggregateInputType = {
    id?: true
    totalUses?: true
    totalRerolls?: true
    updatedAt?: true
  }

  export type DinoStatsCountAggregateInputType = {
    id?: true
    totalUses?: true
    totalRerolls?: true
    updatedAt?: true
    _all?: true
  }

  export type DinoStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DinoStats to aggregate.
     */
    where?: DinoStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoStats to fetch.
     */
    orderBy?: DinoStatsOrderByWithRelationInput | DinoStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DinoStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DinoStats
    **/
    _count?: true | DinoStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DinoStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DinoStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DinoStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DinoStatsMaxAggregateInputType
  }

  export type GetDinoStatsAggregateType<T extends DinoStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateDinoStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDinoStats[P]>
      : GetScalarType<T[P], AggregateDinoStats[P]>
  }




  export type DinoStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DinoStatsWhereInput
    orderBy?: DinoStatsOrderByWithAggregationInput | DinoStatsOrderByWithAggregationInput[]
    by: DinoStatsScalarFieldEnum[] | DinoStatsScalarFieldEnum
    having?: DinoStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DinoStatsCountAggregateInputType | true
    _avg?: DinoStatsAvgAggregateInputType
    _sum?: DinoStatsSumAggregateInputType
    _min?: DinoStatsMinAggregateInputType
    _max?: DinoStatsMaxAggregateInputType
  }

  export type DinoStatsGroupByOutputType = {
    id: number
    totalUses: number
    totalRerolls: number
    updatedAt: Date
    _count: DinoStatsCountAggregateOutputType | null
    _avg: DinoStatsAvgAggregateOutputType | null
    _sum: DinoStatsSumAggregateOutputType | null
    _min: DinoStatsMinAggregateOutputType | null
    _max: DinoStatsMaxAggregateOutputType | null
  }

  type GetDinoStatsGroupByPayload<T extends DinoStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DinoStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DinoStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DinoStatsGroupByOutputType[P]>
            : GetScalarType<T[P], DinoStatsGroupByOutputType[P]>
        }
      >
    >


  export type DinoStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalUses?: boolean
    totalRerolls?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dinoStats"]>

  export type DinoStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalUses?: boolean
    totalRerolls?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dinoStats"]>

  export type DinoStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalUses?: boolean
    totalRerolls?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dinoStats"]>

  export type DinoStatsSelectScalar = {
    id?: boolean
    totalUses?: boolean
    totalRerolls?: boolean
    updatedAt?: boolean
  }

  export type DinoStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "totalUses" | "totalRerolls" | "updatedAt", ExtArgs["result"]["dinoStats"]>

  export type $DinoStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DinoStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      totalUses: number
      totalRerolls: number
      updatedAt: Date
    }, ExtArgs["result"]["dinoStats"]>
    composites: {}
  }

  type DinoStatsGetPayload<S extends boolean | null | undefined | DinoStatsDefaultArgs> = $Result.GetResult<Prisma.$DinoStatsPayload, S>

  type DinoStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DinoStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DinoStatsCountAggregateInputType | true
    }

  export interface DinoStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DinoStats'], meta: { name: 'DinoStats' } }
    /**
     * Find zero or one DinoStats that matches the filter.
     * @param {DinoStatsFindUniqueArgs} args - Arguments to find a DinoStats
     * @example
     * // Get one DinoStats
     * const dinoStats = await prisma.dinoStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DinoStatsFindUniqueArgs>(args: SelectSubset<T, DinoStatsFindUniqueArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DinoStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DinoStatsFindUniqueOrThrowArgs} args - Arguments to find a DinoStats
     * @example
     * // Get one DinoStats
     * const dinoStats = await prisma.dinoStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DinoStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, DinoStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DinoStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsFindFirstArgs} args - Arguments to find a DinoStats
     * @example
     * // Get one DinoStats
     * const dinoStats = await prisma.dinoStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DinoStatsFindFirstArgs>(args?: SelectSubset<T, DinoStatsFindFirstArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DinoStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsFindFirstOrThrowArgs} args - Arguments to find a DinoStats
     * @example
     * // Get one DinoStats
     * const dinoStats = await prisma.dinoStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DinoStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, DinoStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DinoStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DinoStats
     * const dinoStats = await prisma.dinoStats.findMany()
     * 
     * // Get first 10 DinoStats
     * const dinoStats = await prisma.dinoStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dinoStatsWithIdOnly = await prisma.dinoStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DinoStatsFindManyArgs>(args?: SelectSubset<T, DinoStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DinoStats.
     * @param {DinoStatsCreateArgs} args - Arguments to create a DinoStats.
     * @example
     * // Create one DinoStats
     * const DinoStats = await prisma.dinoStats.create({
     *   data: {
     *     // ... data to create a DinoStats
     *   }
     * })
     * 
     */
    create<T extends DinoStatsCreateArgs>(args: SelectSubset<T, DinoStatsCreateArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DinoStats.
     * @param {DinoStatsCreateManyArgs} args - Arguments to create many DinoStats.
     * @example
     * // Create many DinoStats
     * const dinoStats = await prisma.dinoStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DinoStatsCreateManyArgs>(args?: SelectSubset<T, DinoStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DinoStats and returns the data saved in the database.
     * @param {DinoStatsCreateManyAndReturnArgs} args - Arguments to create many DinoStats.
     * @example
     * // Create many DinoStats
     * const dinoStats = await prisma.dinoStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DinoStats and only return the `id`
     * const dinoStatsWithIdOnly = await prisma.dinoStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DinoStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, DinoStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DinoStats.
     * @param {DinoStatsDeleteArgs} args - Arguments to delete one DinoStats.
     * @example
     * // Delete one DinoStats
     * const DinoStats = await prisma.dinoStats.delete({
     *   where: {
     *     // ... filter to delete one DinoStats
     *   }
     * })
     * 
     */
    delete<T extends DinoStatsDeleteArgs>(args: SelectSubset<T, DinoStatsDeleteArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DinoStats.
     * @param {DinoStatsUpdateArgs} args - Arguments to update one DinoStats.
     * @example
     * // Update one DinoStats
     * const dinoStats = await prisma.dinoStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DinoStatsUpdateArgs>(args: SelectSubset<T, DinoStatsUpdateArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DinoStats.
     * @param {DinoStatsDeleteManyArgs} args - Arguments to filter DinoStats to delete.
     * @example
     * // Delete a few DinoStats
     * const { count } = await prisma.dinoStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DinoStatsDeleteManyArgs>(args?: SelectSubset<T, DinoStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DinoStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DinoStats
     * const dinoStats = await prisma.dinoStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DinoStatsUpdateManyArgs>(args: SelectSubset<T, DinoStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DinoStats and returns the data updated in the database.
     * @param {DinoStatsUpdateManyAndReturnArgs} args - Arguments to update many DinoStats.
     * @example
     * // Update many DinoStats
     * const dinoStats = await prisma.dinoStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DinoStats and only return the `id`
     * const dinoStatsWithIdOnly = await prisma.dinoStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DinoStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, DinoStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DinoStats.
     * @param {DinoStatsUpsertArgs} args - Arguments to update or create a DinoStats.
     * @example
     * // Update or create a DinoStats
     * const dinoStats = await prisma.dinoStats.upsert({
     *   create: {
     *     // ... data to create a DinoStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DinoStats we want to update
     *   }
     * })
     */
    upsert<T extends DinoStatsUpsertArgs>(args: SelectSubset<T, DinoStatsUpsertArgs<ExtArgs>>): Prisma__DinoStatsClient<$Result.GetResult<Prisma.$DinoStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DinoStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsCountArgs} args - Arguments to filter DinoStats to count.
     * @example
     * // Count the number of DinoStats
     * const count = await prisma.dinoStats.count({
     *   where: {
     *     // ... the filter for the DinoStats we want to count
     *   }
     * })
    **/
    count<T extends DinoStatsCountArgs>(
      args?: Subset<T, DinoStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DinoStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DinoStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DinoStatsAggregateArgs>(args: Subset<T, DinoStatsAggregateArgs>): Prisma.PrismaPromise<GetDinoStatsAggregateType<T>>

    /**
     * Group by DinoStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DinoStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DinoStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DinoStatsGroupByArgs['orderBy'] }
        : { orderBy?: DinoStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DinoStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDinoStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DinoStats model
   */
  readonly fields: DinoStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DinoStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DinoStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DinoStats model
   */
  interface DinoStatsFieldRefs {
    readonly id: FieldRef<"DinoStats", 'Int'>
    readonly totalUses: FieldRef<"DinoStats", 'Int'>
    readonly totalRerolls: FieldRef<"DinoStats", 'Int'>
    readonly updatedAt: FieldRef<"DinoStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DinoStats findUnique
   */
  export type DinoStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * Filter, which DinoStats to fetch.
     */
    where: DinoStatsWhereUniqueInput
  }

  /**
   * DinoStats findUniqueOrThrow
   */
  export type DinoStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * Filter, which DinoStats to fetch.
     */
    where: DinoStatsWhereUniqueInput
  }

  /**
   * DinoStats findFirst
   */
  export type DinoStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * Filter, which DinoStats to fetch.
     */
    where?: DinoStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoStats to fetch.
     */
    orderBy?: DinoStatsOrderByWithRelationInput | DinoStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DinoStats.
     */
    cursor?: DinoStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DinoStats.
     */
    distinct?: DinoStatsScalarFieldEnum | DinoStatsScalarFieldEnum[]
  }

  /**
   * DinoStats findFirstOrThrow
   */
  export type DinoStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * Filter, which DinoStats to fetch.
     */
    where?: DinoStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoStats to fetch.
     */
    orderBy?: DinoStatsOrderByWithRelationInput | DinoStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DinoStats.
     */
    cursor?: DinoStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DinoStats.
     */
    distinct?: DinoStatsScalarFieldEnum | DinoStatsScalarFieldEnum[]
  }

  /**
   * DinoStats findMany
   */
  export type DinoStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * Filter, which DinoStats to fetch.
     */
    where?: DinoStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DinoStats to fetch.
     */
    orderBy?: DinoStatsOrderByWithRelationInput | DinoStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DinoStats.
     */
    cursor?: DinoStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DinoStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DinoStats.
     */
    skip?: number
    distinct?: DinoStatsScalarFieldEnum | DinoStatsScalarFieldEnum[]
  }

  /**
   * DinoStats create
   */
  export type DinoStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * The data needed to create a DinoStats.
     */
    data: XOR<DinoStatsCreateInput, DinoStatsUncheckedCreateInput>
  }

  /**
   * DinoStats createMany
   */
  export type DinoStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DinoStats.
     */
    data: DinoStatsCreateManyInput | DinoStatsCreateManyInput[]
  }

  /**
   * DinoStats createManyAndReturn
   */
  export type DinoStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * The data used to create many DinoStats.
     */
    data: DinoStatsCreateManyInput | DinoStatsCreateManyInput[]
  }

  /**
   * DinoStats update
   */
  export type DinoStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * The data needed to update a DinoStats.
     */
    data: XOR<DinoStatsUpdateInput, DinoStatsUncheckedUpdateInput>
    /**
     * Choose, which DinoStats to update.
     */
    where: DinoStatsWhereUniqueInput
  }

  /**
   * DinoStats updateMany
   */
  export type DinoStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DinoStats.
     */
    data: XOR<DinoStatsUpdateManyMutationInput, DinoStatsUncheckedUpdateManyInput>
    /**
     * Filter which DinoStats to update
     */
    where?: DinoStatsWhereInput
    /**
     * Limit how many DinoStats to update.
     */
    limit?: number
  }

  /**
   * DinoStats updateManyAndReturn
   */
  export type DinoStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * The data used to update DinoStats.
     */
    data: XOR<DinoStatsUpdateManyMutationInput, DinoStatsUncheckedUpdateManyInput>
    /**
     * Filter which DinoStats to update
     */
    where?: DinoStatsWhereInput
    /**
     * Limit how many DinoStats to update.
     */
    limit?: number
  }

  /**
   * DinoStats upsert
   */
  export type DinoStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * The filter to search for the DinoStats to update in case it exists.
     */
    where: DinoStatsWhereUniqueInput
    /**
     * In case the DinoStats found by the `where` argument doesn't exist, create a new DinoStats with this data.
     */
    create: XOR<DinoStatsCreateInput, DinoStatsUncheckedCreateInput>
    /**
     * In case the DinoStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DinoStatsUpdateInput, DinoStatsUncheckedUpdateInput>
  }

  /**
   * DinoStats delete
   */
  export type DinoStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
    /**
     * Filter which DinoStats to delete.
     */
    where: DinoStatsWhereUniqueInput
  }

  /**
   * DinoStats deleteMany
   */
  export type DinoStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DinoStats to delete
     */
    where?: DinoStatsWhereInput
    /**
     * Limit how many DinoStats to delete.
     */
    limit?: number
  }

  /**
   * DinoStats without action
   */
  export type DinoStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DinoStats
     */
    select?: DinoStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DinoStats
     */
    omit?: DinoStatsOmit<ExtArgs> | null
  }


  /**
   * Model GlobalStats
   */

  export type AggregateGlobalStats = {
    _count: GlobalStatsCountAggregateOutputType | null
    _avg: GlobalStatsAvgAggregateOutputType | null
    _sum: GlobalStatsSumAggregateOutputType | null
    _min: GlobalStatsMinAggregateOutputType | null
    _max: GlobalStatsMaxAggregateOutputType | null
  }

  export type GlobalStatsAvgAggregateOutputType = {
    totalGuilds: number | null
    dbSizeMB: number | null
    totalDinoSuggestions: number | null
    totalDinoApproved: number | null
    totalFeedbacks: number | null
    totalVotingsStarted: number | null
    totalVotesCast: number | null
    totalGamesInDB: number | null
    totalFungamesViews: number | null
  }

  export type GlobalStatsSumAggregateOutputType = {
    totalGuilds: number | null
    dbSizeMB: number | null
    totalDinoSuggestions: number | null
    totalDinoApproved: number | null
    totalFeedbacks: number | null
    totalVotingsStarted: number | null
    totalVotesCast: number | null
    totalGamesInDB: number | null
    totalFungamesViews: number | null
  }

  export type GlobalStatsMinAggregateOutputType = {
    id: string | null
    timestamp: Date | null
    totalGuilds: number | null
    lastBotOnline: Date | null
    dbSizeMB: number | null
    totalDinoSuggestions: number | null
    totalDinoApproved: number | null
    totalFeedbacks: number | null
    totalVotingsStarted: number | null
    totalVotesCast: number | null
    totalGamesInDB: number | null
    totalFungamesViews: number | null
  }

  export type GlobalStatsMaxAggregateOutputType = {
    id: string | null
    timestamp: Date | null
    totalGuilds: number | null
    lastBotOnline: Date | null
    dbSizeMB: number | null
    totalDinoSuggestions: number | null
    totalDinoApproved: number | null
    totalFeedbacks: number | null
    totalVotingsStarted: number | null
    totalVotesCast: number | null
    totalGamesInDB: number | null
    totalFungamesViews: number | null
  }

  export type GlobalStatsCountAggregateOutputType = {
    id: number
    timestamp: number
    totalGuilds: number
    lastBotOnline: number
    dbSizeMB: number
    totalDinoSuggestions: number
    totalDinoApproved: number
    totalFeedbacks: number
    totalVotingsStarted: number
    totalVotesCast: number
    totalGamesInDB: number
    totalFungamesViews: number
    _all: number
  }


  export type GlobalStatsAvgAggregateInputType = {
    totalGuilds?: true
    dbSizeMB?: true
    totalDinoSuggestions?: true
    totalDinoApproved?: true
    totalFeedbacks?: true
    totalVotingsStarted?: true
    totalVotesCast?: true
    totalGamesInDB?: true
    totalFungamesViews?: true
  }

  export type GlobalStatsSumAggregateInputType = {
    totalGuilds?: true
    dbSizeMB?: true
    totalDinoSuggestions?: true
    totalDinoApproved?: true
    totalFeedbacks?: true
    totalVotingsStarted?: true
    totalVotesCast?: true
    totalGamesInDB?: true
    totalFungamesViews?: true
  }

  export type GlobalStatsMinAggregateInputType = {
    id?: true
    timestamp?: true
    totalGuilds?: true
    lastBotOnline?: true
    dbSizeMB?: true
    totalDinoSuggestions?: true
    totalDinoApproved?: true
    totalFeedbacks?: true
    totalVotingsStarted?: true
    totalVotesCast?: true
    totalGamesInDB?: true
    totalFungamesViews?: true
  }

  export type GlobalStatsMaxAggregateInputType = {
    id?: true
    timestamp?: true
    totalGuilds?: true
    lastBotOnline?: true
    dbSizeMB?: true
    totalDinoSuggestions?: true
    totalDinoApproved?: true
    totalFeedbacks?: true
    totalVotingsStarted?: true
    totalVotesCast?: true
    totalGamesInDB?: true
    totalFungamesViews?: true
  }

  export type GlobalStatsCountAggregateInputType = {
    id?: true
    timestamp?: true
    totalGuilds?: true
    lastBotOnline?: true
    dbSizeMB?: true
    totalDinoSuggestions?: true
    totalDinoApproved?: true
    totalFeedbacks?: true
    totalVotingsStarted?: true
    totalVotesCast?: true
    totalGamesInDB?: true
    totalFungamesViews?: true
    _all?: true
  }

  export type GlobalStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalStats to aggregate.
     */
    where?: GlobalStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStats to fetch.
     */
    orderBy?: GlobalStatsOrderByWithRelationInput | GlobalStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlobalStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GlobalStats
    **/
    _count?: true | GlobalStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GlobalStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GlobalStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlobalStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlobalStatsMaxAggregateInputType
  }

  export type GetGlobalStatsAggregateType<T extends GlobalStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateGlobalStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlobalStats[P]>
      : GetScalarType<T[P], AggregateGlobalStats[P]>
  }




  export type GlobalStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlobalStatsWhereInput
    orderBy?: GlobalStatsOrderByWithAggregationInput | GlobalStatsOrderByWithAggregationInput[]
    by: GlobalStatsScalarFieldEnum[] | GlobalStatsScalarFieldEnum
    having?: GlobalStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlobalStatsCountAggregateInputType | true
    _avg?: GlobalStatsAvgAggregateInputType
    _sum?: GlobalStatsSumAggregateInputType
    _min?: GlobalStatsMinAggregateInputType
    _max?: GlobalStatsMaxAggregateInputType
  }

  export type GlobalStatsGroupByOutputType = {
    id: string
    timestamp: Date
    totalGuilds: number
    lastBotOnline: Date | null
    dbSizeMB: number
    totalDinoSuggestions: number
    totalDinoApproved: number
    totalFeedbacks: number
    totalVotingsStarted: number
    totalVotesCast: number
    totalGamesInDB: number
    totalFungamesViews: number
    _count: GlobalStatsCountAggregateOutputType | null
    _avg: GlobalStatsAvgAggregateOutputType | null
    _sum: GlobalStatsSumAggregateOutputType | null
    _min: GlobalStatsMinAggregateOutputType | null
    _max: GlobalStatsMaxAggregateOutputType | null
  }

  type GetGlobalStatsGroupByPayload<T extends GlobalStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlobalStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlobalStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlobalStatsGroupByOutputType[P]>
            : GetScalarType<T[P], GlobalStatsGroupByOutputType[P]>
        }
      >
    >


  export type GlobalStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    totalGuilds?: boolean
    lastBotOnline?: boolean
    dbSizeMB?: boolean
    totalDinoSuggestions?: boolean
    totalDinoApproved?: boolean
    totalFeedbacks?: boolean
    totalVotingsStarted?: boolean
    totalVotesCast?: boolean
    totalGamesInDB?: boolean
    totalFungamesViews?: boolean
  }, ExtArgs["result"]["globalStats"]>

  export type GlobalStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    totalGuilds?: boolean
    lastBotOnline?: boolean
    dbSizeMB?: boolean
    totalDinoSuggestions?: boolean
    totalDinoApproved?: boolean
    totalFeedbacks?: boolean
    totalVotingsStarted?: boolean
    totalVotesCast?: boolean
    totalGamesInDB?: boolean
    totalFungamesViews?: boolean
  }, ExtArgs["result"]["globalStats"]>

  export type GlobalStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    totalGuilds?: boolean
    lastBotOnline?: boolean
    dbSizeMB?: boolean
    totalDinoSuggestions?: boolean
    totalDinoApproved?: boolean
    totalFeedbacks?: boolean
    totalVotingsStarted?: boolean
    totalVotesCast?: boolean
    totalGamesInDB?: boolean
    totalFungamesViews?: boolean
  }, ExtArgs["result"]["globalStats"]>

  export type GlobalStatsSelectScalar = {
    id?: boolean
    timestamp?: boolean
    totalGuilds?: boolean
    lastBotOnline?: boolean
    dbSizeMB?: boolean
    totalDinoSuggestions?: boolean
    totalDinoApproved?: boolean
    totalFeedbacks?: boolean
    totalVotingsStarted?: boolean
    totalVotesCast?: boolean
    totalGamesInDB?: boolean
    totalFungamesViews?: boolean
  }

  export type GlobalStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "timestamp" | "totalGuilds" | "lastBotOnline" | "dbSizeMB" | "totalDinoSuggestions" | "totalDinoApproved" | "totalFeedbacks" | "totalVotingsStarted" | "totalVotesCast" | "totalGamesInDB" | "totalFungamesViews", ExtArgs["result"]["globalStats"]>

  export type $GlobalStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GlobalStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      timestamp: Date
      totalGuilds: number
      lastBotOnline: Date | null
      dbSizeMB: number
      totalDinoSuggestions: number
      totalDinoApproved: number
      totalFeedbacks: number
      totalVotingsStarted: number
      totalVotesCast: number
      totalGamesInDB: number
      totalFungamesViews: number
    }, ExtArgs["result"]["globalStats"]>
    composites: {}
  }

  type GlobalStatsGetPayload<S extends boolean | null | undefined | GlobalStatsDefaultArgs> = $Result.GetResult<Prisma.$GlobalStatsPayload, S>

  type GlobalStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GlobalStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GlobalStatsCountAggregateInputType | true
    }

  export interface GlobalStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GlobalStats'], meta: { name: 'GlobalStats' } }
    /**
     * Find zero or one GlobalStats that matches the filter.
     * @param {GlobalStatsFindUniqueArgs} args - Arguments to find a GlobalStats
     * @example
     * // Get one GlobalStats
     * const globalStats = await prisma.globalStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GlobalStatsFindUniqueArgs>(args: SelectSubset<T, GlobalStatsFindUniqueArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GlobalStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GlobalStatsFindUniqueOrThrowArgs} args - Arguments to find a GlobalStats
     * @example
     * // Get one GlobalStats
     * const globalStats = await prisma.globalStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GlobalStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, GlobalStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GlobalStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsFindFirstArgs} args - Arguments to find a GlobalStats
     * @example
     * // Get one GlobalStats
     * const globalStats = await prisma.globalStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GlobalStatsFindFirstArgs>(args?: SelectSubset<T, GlobalStatsFindFirstArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GlobalStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsFindFirstOrThrowArgs} args - Arguments to find a GlobalStats
     * @example
     * // Get one GlobalStats
     * const globalStats = await prisma.globalStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GlobalStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, GlobalStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GlobalStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GlobalStats
     * const globalStats = await prisma.globalStats.findMany()
     * 
     * // Get first 10 GlobalStats
     * const globalStats = await prisma.globalStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const globalStatsWithIdOnly = await prisma.globalStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GlobalStatsFindManyArgs>(args?: SelectSubset<T, GlobalStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GlobalStats.
     * @param {GlobalStatsCreateArgs} args - Arguments to create a GlobalStats.
     * @example
     * // Create one GlobalStats
     * const GlobalStats = await prisma.globalStats.create({
     *   data: {
     *     // ... data to create a GlobalStats
     *   }
     * })
     * 
     */
    create<T extends GlobalStatsCreateArgs>(args: SelectSubset<T, GlobalStatsCreateArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GlobalStats.
     * @param {GlobalStatsCreateManyArgs} args - Arguments to create many GlobalStats.
     * @example
     * // Create many GlobalStats
     * const globalStats = await prisma.globalStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GlobalStatsCreateManyArgs>(args?: SelectSubset<T, GlobalStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GlobalStats and returns the data saved in the database.
     * @param {GlobalStatsCreateManyAndReturnArgs} args - Arguments to create many GlobalStats.
     * @example
     * // Create many GlobalStats
     * const globalStats = await prisma.globalStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GlobalStats and only return the `id`
     * const globalStatsWithIdOnly = await prisma.globalStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GlobalStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, GlobalStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GlobalStats.
     * @param {GlobalStatsDeleteArgs} args - Arguments to delete one GlobalStats.
     * @example
     * // Delete one GlobalStats
     * const GlobalStats = await prisma.globalStats.delete({
     *   where: {
     *     // ... filter to delete one GlobalStats
     *   }
     * })
     * 
     */
    delete<T extends GlobalStatsDeleteArgs>(args: SelectSubset<T, GlobalStatsDeleteArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GlobalStats.
     * @param {GlobalStatsUpdateArgs} args - Arguments to update one GlobalStats.
     * @example
     * // Update one GlobalStats
     * const globalStats = await prisma.globalStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GlobalStatsUpdateArgs>(args: SelectSubset<T, GlobalStatsUpdateArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GlobalStats.
     * @param {GlobalStatsDeleteManyArgs} args - Arguments to filter GlobalStats to delete.
     * @example
     * // Delete a few GlobalStats
     * const { count } = await prisma.globalStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GlobalStatsDeleteManyArgs>(args?: SelectSubset<T, GlobalStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GlobalStats
     * const globalStats = await prisma.globalStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GlobalStatsUpdateManyArgs>(args: SelectSubset<T, GlobalStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GlobalStats and returns the data updated in the database.
     * @param {GlobalStatsUpdateManyAndReturnArgs} args - Arguments to update many GlobalStats.
     * @example
     * // Update many GlobalStats
     * const globalStats = await prisma.globalStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GlobalStats and only return the `id`
     * const globalStatsWithIdOnly = await prisma.globalStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GlobalStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, GlobalStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GlobalStats.
     * @param {GlobalStatsUpsertArgs} args - Arguments to update or create a GlobalStats.
     * @example
     * // Update or create a GlobalStats
     * const globalStats = await prisma.globalStats.upsert({
     *   create: {
     *     // ... data to create a GlobalStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GlobalStats we want to update
     *   }
     * })
     */
    upsert<T extends GlobalStatsUpsertArgs>(args: SelectSubset<T, GlobalStatsUpsertArgs<ExtArgs>>): Prisma__GlobalStatsClient<$Result.GetResult<Prisma.$GlobalStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GlobalStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsCountArgs} args - Arguments to filter GlobalStats to count.
     * @example
     * // Count the number of GlobalStats
     * const count = await prisma.globalStats.count({
     *   where: {
     *     // ... the filter for the GlobalStats we want to count
     *   }
     * })
    **/
    count<T extends GlobalStatsCountArgs>(
      args?: Subset<T, GlobalStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlobalStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GlobalStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlobalStatsAggregateArgs>(args: Subset<T, GlobalStatsAggregateArgs>): Prisma.PrismaPromise<GetGlobalStatsAggregateType<T>>

    /**
     * Group by GlobalStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlobalStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlobalStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlobalStatsGroupByArgs['orderBy'] }
        : { orderBy?: GlobalStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlobalStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlobalStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GlobalStats model
   */
  readonly fields: GlobalStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GlobalStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlobalStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GlobalStats model
   */
  interface GlobalStatsFieldRefs {
    readonly id: FieldRef<"GlobalStats", 'String'>
    readonly timestamp: FieldRef<"GlobalStats", 'DateTime'>
    readonly totalGuilds: FieldRef<"GlobalStats", 'Int'>
    readonly lastBotOnline: FieldRef<"GlobalStats", 'DateTime'>
    readonly dbSizeMB: FieldRef<"GlobalStats", 'Float'>
    readonly totalDinoSuggestions: FieldRef<"GlobalStats", 'Int'>
    readonly totalDinoApproved: FieldRef<"GlobalStats", 'Int'>
    readonly totalFeedbacks: FieldRef<"GlobalStats", 'Int'>
    readonly totalVotingsStarted: FieldRef<"GlobalStats", 'Int'>
    readonly totalVotesCast: FieldRef<"GlobalStats", 'Int'>
    readonly totalGamesInDB: FieldRef<"GlobalStats", 'Int'>
    readonly totalFungamesViews: FieldRef<"GlobalStats", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GlobalStats findUnique
   */
  export type GlobalStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStats to fetch.
     */
    where: GlobalStatsWhereUniqueInput
  }

  /**
   * GlobalStats findUniqueOrThrow
   */
  export type GlobalStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStats to fetch.
     */
    where: GlobalStatsWhereUniqueInput
  }

  /**
   * GlobalStats findFirst
   */
  export type GlobalStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStats to fetch.
     */
    where?: GlobalStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStats to fetch.
     */
    orderBy?: GlobalStatsOrderByWithRelationInput | GlobalStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalStats.
     */
    cursor?: GlobalStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalStats.
     */
    distinct?: GlobalStatsScalarFieldEnum | GlobalStatsScalarFieldEnum[]
  }

  /**
   * GlobalStats findFirstOrThrow
   */
  export type GlobalStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStats to fetch.
     */
    where?: GlobalStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStats to fetch.
     */
    orderBy?: GlobalStatsOrderByWithRelationInput | GlobalStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GlobalStats.
     */
    cursor?: GlobalStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GlobalStats.
     */
    distinct?: GlobalStatsScalarFieldEnum | GlobalStatsScalarFieldEnum[]
  }

  /**
   * GlobalStats findMany
   */
  export type GlobalStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * Filter, which GlobalStats to fetch.
     */
    where?: GlobalStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GlobalStats to fetch.
     */
    orderBy?: GlobalStatsOrderByWithRelationInput | GlobalStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GlobalStats.
     */
    cursor?: GlobalStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GlobalStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GlobalStats.
     */
    skip?: number
    distinct?: GlobalStatsScalarFieldEnum | GlobalStatsScalarFieldEnum[]
  }

  /**
   * GlobalStats create
   */
  export type GlobalStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * The data needed to create a GlobalStats.
     */
    data?: XOR<GlobalStatsCreateInput, GlobalStatsUncheckedCreateInput>
  }

  /**
   * GlobalStats createMany
   */
  export type GlobalStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GlobalStats.
     */
    data: GlobalStatsCreateManyInput | GlobalStatsCreateManyInput[]
  }

  /**
   * GlobalStats createManyAndReturn
   */
  export type GlobalStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * The data used to create many GlobalStats.
     */
    data: GlobalStatsCreateManyInput | GlobalStatsCreateManyInput[]
  }

  /**
   * GlobalStats update
   */
  export type GlobalStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * The data needed to update a GlobalStats.
     */
    data: XOR<GlobalStatsUpdateInput, GlobalStatsUncheckedUpdateInput>
    /**
     * Choose, which GlobalStats to update.
     */
    where: GlobalStatsWhereUniqueInput
  }

  /**
   * GlobalStats updateMany
   */
  export type GlobalStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GlobalStats.
     */
    data: XOR<GlobalStatsUpdateManyMutationInput, GlobalStatsUncheckedUpdateManyInput>
    /**
     * Filter which GlobalStats to update
     */
    where?: GlobalStatsWhereInput
    /**
     * Limit how many GlobalStats to update.
     */
    limit?: number
  }

  /**
   * GlobalStats updateManyAndReturn
   */
  export type GlobalStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * The data used to update GlobalStats.
     */
    data: XOR<GlobalStatsUpdateManyMutationInput, GlobalStatsUncheckedUpdateManyInput>
    /**
     * Filter which GlobalStats to update
     */
    where?: GlobalStatsWhereInput
    /**
     * Limit how many GlobalStats to update.
     */
    limit?: number
  }

  /**
   * GlobalStats upsert
   */
  export type GlobalStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * The filter to search for the GlobalStats to update in case it exists.
     */
    where: GlobalStatsWhereUniqueInput
    /**
     * In case the GlobalStats found by the `where` argument doesn't exist, create a new GlobalStats with this data.
     */
    create: XOR<GlobalStatsCreateInput, GlobalStatsUncheckedCreateInput>
    /**
     * In case the GlobalStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlobalStatsUpdateInput, GlobalStatsUncheckedUpdateInput>
  }

  /**
   * GlobalStats delete
   */
  export type GlobalStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
    /**
     * Filter which GlobalStats to delete.
     */
    where: GlobalStatsWhereUniqueInput
  }

  /**
   * GlobalStats deleteMany
   */
  export type GlobalStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GlobalStats to delete
     */
    where?: GlobalStatsWhereInput
    /**
     * Limit how many GlobalStats to delete.
     */
    limit?: number
  }

  /**
   * GlobalStats without action
   */
  export type GlobalStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GlobalStats
     */
    select?: GlobalStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GlobalStats
     */
    omit?: GlobalStatsOmit<ExtArgs> | null
  }


  /**
   * Model GuildStats
   */

  export type AggregateGuildStats = {
    _count: GuildStatsCountAggregateOutputType | null
    _avg: GuildStatsAvgAggregateOutputType | null
    _sum: GuildStatsSumAggregateOutputType | null
    _min: GuildStatsMinAggregateOutputType | null
    _max: GuildStatsMaxAggregateOutputType | null
  }

  export type GuildStatsAvgAggregateOutputType = {
    dinoSuggestions: number | null
    dinoApproved: number | null
    feedbacks: number | null
    votingsStarted: number | null
    votesCast: number | null
    gamesInDB: number | null
    fungamesViews: number | null
    memberCount: number | null
    memberOnline: number | null
    textChannelCount: number | null
    voiceChannelCount: number | null
    roleCount: number | null
    newMembers24h: number | null
  }

  export type GuildStatsSumAggregateOutputType = {
    dinoSuggestions: number | null
    dinoApproved: number | null
    feedbacks: number | null
    votingsStarted: number | null
    votesCast: number | null
    gamesInDB: number | null
    fungamesViews: number | null
    memberCount: number | null
    memberOnline: number | null
    textChannelCount: number | null
    voiceChannelCount: number | null
    roleCount: number | null
    newMembers24h: number | null
  }

  export type GuildStatsMinAggregateOutputType = {
    id: string | null
    guildId: string | null
    timestamp: Date | null
    dinoSuggestions: number | null
    dinoApproved: number | null
    feedbacks: number | null
    votingsStarted: number | null
    votesCast: number | null
    gamesInDB: number | null
    fungamesViews: number | null
    memberCount: number | null
    memberOnline: number | null
    textChannelCount: number | null
    voiceChannelCount: number | null
    roleCount: number | null
    createdAt: Date | null
    newMembers24h: number | null
  }

  export type GuildStatsMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
    timestamp: Date | null
    dinoSuggestions: number | null
    dinoApproved: number | null
    feedbacks: number | null
    votingsStarted: number | null
    votesCast: number | null
    gamesInDB: number | null
    fungamesViews: number | null
    memberCount: number | null
    memberOnline: number | null
    textChannelCount: number | null
    voiceChannelCount: number | null
    roleCount: number | null
    createdAt: Date | null
    newMembers24h: number | null
  }

  export type GuildStatsCountAggregateOutputType = {
    id: number
    guildId: number
    timestamp: number
    dinoSuggestions: number
    dinoApproved: number
    feedbacks: number
    votingsStarted: number
    votesCast: number
    gamesInDB: number
    fungamesViews: number
    memberCount: number
    memberOnline: number
    textChannelCount: number
    voiceChannelCount: number
    roleCount: number
    createdAt: number
    newMembers24h: number
    _all: number
  }


  export type GuildStatsAvgAggregateInputType = {
    dinoSuggestions?: true
    dinoApproved?: true
    feedbacks?: true
    votingsStarted?: true
    votesCast?: true
    gamesInDB?: true
    fungamesViews?: true
    memberCount?: true
    memberOnline?: true
    textChannelCount?: true
    voiceChannelCount?: true
    roleCount?: true
    newMembers24h?: true
  }

  export type GuildStatsSumAggregateInputType = {
    dinoSuggestions?: true
    dinoApproved?: true
    feedbacks?: true
    votingsStarted?: true
    votesCast?: true
    gamesInDB?: true
    fungamesViews?: true
    memberCount?: true
    memberOnline?: true
    textChannelCount?: true
    voiceChannelCount?: true
    roleCount?: true
    newMembers24h?: true
  }

  export type GuildStatsMinAggregateInputType = {
    id?: true
    guildId?: true
    timestamp?: true
    dinoSuggestions?: true
    dinoApproved?: true
    feedbacks?: true
    votingsStarted?: true
    votesCast?: true
    gamesInDB?: true
    fungamesViews?: true
    memberCount?: true
    memberOnline?: true
    textChannelCount?: true
    voiceChannelCount?: true
    roleCount?: true
    createdAt?: true
    newMembers24h?: true
  }

  export type GuildStatsMaxAggregateInputType = {
    id?: true
    guildId?: true
    timestamp?: true
    dinoSuggestions?: true
    dinoApproved?: true
    feedbacks?: true
    votingsStarted?: true
    votesCast?: true
    gamesInDB?: true
    fungamesViews?: true
    memberCount?: true
    memberOnline?: true
    textChannelCount?: true
    voiceChannelCount?: true
    roleCount?: true
    createdAt?: true
    newMembers24h?: true
  }

  export type GuildStatsCountAggregateInputType = {
    id?: true
    guildId?: true
    timestamp?: true
    dinoSuggestions?: true
    dinoApproved?: true
    feedbacks?: true
    votingsStarted?: true
    votesCast?: true
    gamesInDB?: true
    fungamesViews?: true
    memberCount?: true
    memberOnline?: true
    textChannelCount?: true
    voiceChannelCount?: true
    roleCount?: true
    createdAt?: true
    newMembers24h?: true
    _all?: true
  }

  export type GuildStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuildStats to aggregate.
     */
    where?: GuildStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildStats to fetch.
     */
    orderBy?: GuildStatsOrderByWithRelationInput | GuildStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuildStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GuildStats
    **/
    _count?: true | GuildStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuildStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuildStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildStatsMaxAggregateInputType
  }

  export type GetGuildStatsAggregateType<T extends GuildStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuildStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuildStats[P]>
      : GetScalarType<T[P], AggregateGuildStats[P]>
  }




  export type GuildStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuildStatsWhereInput
    orderBy?: GuildStatsOrderByWithAggregationInput | GuildStatsOrderByWithAggregationInput[]
    by: GuildStatsScalarFieldEnum[] | GuildStatsScalarFieldEnum
    having?: GuildStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildStatsCountAggregateInputType | true
    _avg?: GuildStatsAvgAggregateInputType
    _sum?: GuildStatsSumAggregateInputType
    _min?: GuildStatsMinAggregateInputType
    _max?: GuildStatsMaxAggregateInputType
  }

  export type GuildStatsGroupByOutputType = {
    id: string
    guildId: string
    timestamp: Date
    dinoSuggestions: number
    dinoApproved: number
    feedbacks: number
    votingsStarted: number
    votesCast: number
    gamesInDB: number
    fungamesViews: number
    memberCount: number
    memberOnline: number
    textChannelCount: number
    voiceChannelCount: number
    roleCount: number
    createdAt: Date | null
    newMembers24h: number
    _count: GuildStatsCountAggregateOutputType | null
    _avg: GuildStatsAvgAggregateOutputType | null
    _sum: GuildStatsSumAggregateOutputType | null
    _min: GuildStatsMinAggregateOutputType | null
    _max: GuildStatsMaxAggregateOutputType | null
  }

  type GetGuildStatsGroupByPayload<T extends GuildStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuildStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuildStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuildStatsGroupByOutputType[P]>
            : GetScalarType<T[P], GuildStatsGroupByOutputType[P]>
        }
      >
    >


  export type GuildStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    timestamp?: boolean
    dinoSuggestions?: boolean
    dinoApproved?: boolean
    feedbacks?: boolean
    votingsStarted?: boolean
    votesCast?: boolean
    gamesInDB?: boolean
    fungamesViews?: boolean
    memberCount?: boolean
    memberOnline?: boolean
    textChannelCount?: boolean
    voiceChannelCount?: boolean
    roleCount?: boolean
    createdAt?: boolean
    newMembers24h?: boolean
  }, ExtArgs["result"]["guildStats"]>

  export type GuildStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    timestamp?: boolean
    dinoSuggestions?: boolean
    dinoApproved?: boolean
    feedbacks?: boolean
    votingsStarted?: boolean
    votesCast?: boolean
    gamesInDB?: boolean
    fungamesViews?: boolean
    memberCount?: boolean
    memberOnline?: boolean
    textChannelCount?: boolean
    voiceChannelCount?: boolean
    roleCount?: boolean
    createdAt?: boolean
    newMembers24h?: boolean
  }, ExtArgs["result"]["guildStats"]>

  export type GuildStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    timestamp?: boolean
    dinoSuggestions?: boolean
    dinoApproved?: boolean
    feedbacks?: boolean
    votingsStarted?: boolean
    votesCast?: boolean
    gamesInDB?: boolean
    fungamesViews?: boolean
    memberCount?: boolean
    memberOnline?: boolean
    textChannelCount?: boolean
    voiceChannelCount?: boolean
    roleCount?: boolean
    createdAt?: boolean
    newMembers24h?: boolean
  }, ExtArgs["result"]["guildStats"]>

  export type GuildStatsSelectScalar = {
    id?: boolean
    guildId?: boolean
    timestamp?: boolean
    dinoSuggestions?: boolean
    dinoApproved?: boolean
    feedbacks?: boolean
    votingsStarted?: boolean
    votesCast?: boolean
    gamesInDB?: boolean
    fungamesViews?: boolean
    memberCount?: boolean
    memberOnline?: boolean
    textChannelCount?: boolean
    voiceChannelCount?: boolean
    roleCount?: boolean
    createdAt?: boolean
    newMembers24h?: boolean
  }

  export type GuildStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "guildId" | "timestamp" | "dinoSuggestions" | "dinoApproved" | "feedbacks" | "votingsStarted" | "votesCast" | "gamesInDB" | "fungamesViews" | "memberCount" | "memberOnline" | "textChannelCount" | "voiceChannelCount" | "roleCount" | "createdAt" | "newMembers24h", ExtArgs["result"]["guildStats"]>

  export type $GuildStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GuildStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      guildId: string
      timestamp: Date
      dinoSuggestions: number
      dinoApproved: number
      feedbacks: number
      votingsStarted: number
      votesCast: number
      gamesInDB: number
      fungamesViews: number
      memberCount: number
      memberOnline: number
      textChannelCount: number
      voiceChannelCount: number
      roleCount: number
      createdAt: Date | null
      newMembers24h: number
    }, ExtArgs["result"]["guildStats"]>
    composites: {}
  }

  type GuildStatsGetPayload<S extends boolean | null | undefined | GuildStatsDefaultArgs> = $Result.GetResult<Prisma.$GuildStatsPayload, S>

  type GuildStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GuildStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GuildStatsCountAggregateInputType | true
    }

  export interface GuildStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GuildStats'], meta: { name: 'GuildStats' } }
    /**
     * Find zero or one GuildStats that matches the filter.
     * @param {GuildStatsFindUniqueArgs} args - Arguments to find a GuildStats
     * @example
     * // Get one GuildStats
     * const guildStats = await prisma.guildStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuildStatsFindUniqueArgs>(args: SelectSubset<T, GuildStatsFindUniqueArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GuildStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GuildStatsFindUniqueOrThrowArgs} args - Arguments to find a GuildStats
     * @example
     * // Get one GuildStats
     * const guildStats = await prisma.guildStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuildStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, GuildStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GuildStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsFindFirstArgs} args - Arguments to find a GuildStats
     * @example
     * // Get one GuildStats
     * const guildStats = await prisma.guildStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuildStatsFindFirstArgs>(args?: SelectSubset<T, GuildStatsFindFirstArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GuildStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsFindFirstOrThrowArgs} args - Arguments to find a GuildStats
     * @example
     * // Get one GuildStats
     * const guildStats = await prisma.guildStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuildStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, GuildStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GuildStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuildStats
     * const guildStats = await prisma.guildStats.findMany()
     * 
     * // Get first 10 GuildStats
     * const guildStats = await prisma.guildStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildStatsWithIdOnly = await prisma.guildStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuildStatsFindManyArgs>(args?: SelectSubset<T, GuildStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GuildStats.
     * @param {GuildStatsCreateArgs} args - Arguments to create a GuildStats.
     * @example
     * // Create one GuildStats
     * const GuildStats = await prisma.guildStats.create({
     *   data: {
     *     // ... data to create a GuildStats
     *   }
     * })
     * 
     */
    create<T extends GuildStatsCreateArgs>(args: SelectSubset<T, GuildStatsCreateArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GuildStats.
     * @param {GuildStatsCreateManyArgs} args - Arguments to create many GuildStats.
     * @example
     * // Create many GuildStats
     * const guildStats = await prisma.guildStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuildStatsCreateManyArgs>(args?: SelectSubset<T, GuildStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GuildStats and returns the data saved in the database.
     * @param {GuildStatsCreateManyAndReturnArgs} args - Arguments to create many GuildStats.
     * @example
     * // Create many GuildStats
     * const guildStats = await prisma.guildStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GuildStats and only return the `id`
     * const guildStatsWithIdOnly = await prisma.guildStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GuildStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, GuildStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GuildStats.
     * @param {GuildStatsDeleteArgs} args - Arguments to delete one GuildStats.
     * @example
     * // Delete one GuildStats
     * const GuildStats = await prisma.guildStats.delete({
     *   where: {
     *     // ... filter to delete one GuildStats
     *   }
     * })
     * 
     */
    delete<T extends GuildStatsDeleteArgs>(args: SelectSubset<T, GuildStatsDeleteArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GuildStats.
     * @param {GuildStatsUpdateArgs} args - Arguments to update one GuildStats.
     * @example
     * // Update one GuildStats
     * const guildStats = await prisma.guildStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuildStatsUpdateArgs>(args: SelectSubset<T, GuildStatsUpdateArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GuildStats.
     * @param {GuildStatsDeleteManyArgs} args - Arguments to filter GuildStats to delete.
     * @example
     * // Delete a few GuildStats
     * const { count } = await prisma.guildStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuildStatsDeleteManyArgs>(args?: SelectSubset<T, GuildStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuildStats
     * const guildStats = await prisma.guildStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuildStatsUpdateManyArgs>(args: SelectSubset<T, GuildStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildStats and returns the data updated in the database.
     * @param {GuildStatsUpdateManyAndReturnArgs} args - Arguments to update many GuildStats.
     * @example
     * // Update many GuildStats
     * const guildStats = await prisma.guildStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GuildStats and only return the `id`
     * const guildStatsWithIdOnly = await prisma.guildStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GuildStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, GuildStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GuildStats.
     * @param {GuildStatsUpsertArgs} args - Arguments to update or create a GuildStats.
     * @example
     * // Update or create a GuildStats
     * const guildStats = await prisma.guildStats.upsert({
     *   create: {
     *     // ... data to create a GuildStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuildStats we want to update
     *   }
     * })
     */
    upsert<T extends GuildStatsUpsertArgs>(args: SelectSubset<T, GuildStatsUpsertArgs<ExtArgs>>): Prisma__GuildStatsClient<$Result.GetResult<Prisma.$GuildStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GuildStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsCountArgs} args - Arguments to filter GuildStats to count.
     * @example
     * // Count the number of GuildStats
     * const count = await prisma.guildStats.count({
     *   where: {
     *     // ... the filter for the GuildStats we want to count
     *   }
     * })
    **/
    count<T extends GuildStatsCountArgs>(
      args?: Subset<T, GuildStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuildStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildStatsAggregateArgs>(args: Subset<T, GuildStatsAggregateArgs>): Prisma.PrismaPromise<GetGuildStatsAggregateType<T>>

    /**
     * Group by GuildStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildStatsGroupByArgs['orderBy'] }
        : { orderBy?: GuildStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GuildStats model
   */
  readonly fields: GuildStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GuildStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuildStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GuildStats model
   */
  interface GuildStatsFieldRefs {
    readonly id: FieldRef<"GuildStats", 'String'>
    readonly guildId: FieldRef<"GuildStats", 'String'>
    readonly timestamp: FieldRef<"GuildStats", 'DateTime'>
    readonly dinoSuggestions: FieldRef<"GuildStats", 'Int'>
    readonly dinoApproved: FieldRef<"GuildStats", 'Int'>
    readonly feedbacks: FieldRef<"GuildStats", 'Int'>
    readonly votingsStarted: FieldRef<"GuildStats", 'Int'>
    readonly votesCast: FieldRef<"GuildStats", 'Int'>
    readonly gamesInDB: FieldRef<"GuildStats", 'Int'>
    readonly fungamesViews: FieldRef<"GuildStats", 'Int'>
    readonly memberCount: FieldRef<"GuildStats", 'Int'>
    readonly memberOnline: FieldRef<"GuildStats", 'Int'>
    readonly textChannelCount: FieldRef<"GuildStats", 'Int'>
    readonly voiceChannelCount: FieldRef<"GuildStats", 'Int'>
    readonly roleCount: FieldRef<"GuildStats", 'Int'>
    readonly createdAt: FieldRef<"GuildStats", 'DateTime'>
    readonly newMembers24h: FieldRef<"GuildStats", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GuildStats findUnique
   */
  export type GuildStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * Filter, which GuildStats to fetch.
     */
    where: GuildStatsWhereUniqueInput
  }

  /**
   * GuildStats findUniqueOrThrow
   */
  export type GuildStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * Filter, which GuildStats to fetch.
     */
    where: GuildStatsWhereUniqueInput
  }

  /**
   * GuildStats findFirst
   */
  export type GuildStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * Filter, which GuildStats to fetch.
     */
    where?: GuildStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildStats to fetch.
     */
    orderBy?: GuildStatsOrderByWithRelationInput | GuildStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildStats.
     */
    cursor?: GuildStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildStats.
     */
    distinct?: GuildStatsScalarFieldEnum | GuildStatsScalarFieldEnum[]
  }

  /**
   * GuildStats findFirstOrThrow
   */
  export type GuildStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * Filter, which GuildStats to fetch.
     */
    where?: GuildStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildStats to fetch.
     */
    orderBy?: GuildStatsOrderByWithRelationInput | GuildStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildStats.
     */
    cursor?: GuildStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildStats.
     */
    distinct?: GuildStatsScalarFieldEnum | GuildStatsScalarFieldEnum[]
  }

  /**
   * GuildStats findMany
   */
  export type GuildStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * Filter, which GuildStats to fetch.
     */
    where?: GuildStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildStats to fetch.
     */
    orderBy?: GuildStatsOrderByWithRelationInput | GuildStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GuildStats.
     */
    cursor?: GuildStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildStats.
     */
    skip?: number
    distinct?: GuildStatsScalarFieldEnum | GuildStatsScalarFieldEnum[]
  }

  /**
   * GuildStats create
   */
  export type GuildStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * The data needed to create a GuildStats.
     */
    data: XOR<GuildStatsCreateInput, GuildStatsUncheckedCreateInput>
  }

  /**
   * GuildStats createMany
   */
  export type GuildStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GuildStats.
     */
    data: GuildStatsCreateManyInput | GuildStatsCreateManyInput[]
  }

  /**
   * GuildStats createManyAndReturn
   */
  export type GuildStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * The data used to create many GuildStats.
     */
    data: GuildStatsCreateManyInput | GuildStatsCreateManyInput[]
  }

  /**
   * GuildStats update
   */
  export type GuildStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * The data needed to update a GuildStats.
     */
    data: XOR<GuildStatsUpdateInput, GuildStatsUncheckedUpdateInput>
    /**
     * Choose, which GuildStats to update.
     */
    where: GuildStatsWhereUniqueInput
  }

  /**
   * GuildStats updateMany
   */
  export type GuildStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GuildStats.
     */
    data: XOR<GuildStatsUpdateManyMutationInput, GuildStatsUncheckedUpdateManyInput>
    /**
     * Filter which GuildStats to update
     */
    where?: GuildStatsWhereInput
    /**
     * Limit how many GuildStats to update.
     */
    limit?: number
  }

  /**
   * GuildStats updateManyAndReturn
   */
  export type GuildStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * The data used to update GuildStats.
     */
    data: XOR<GuildStatsUpdateManyMutationInput, GuildStatsUncheckedUpdateManyInput>
    /**
     * Filter which GuildStats to update
     */
    where?: GuildStatsWhereInput
    /**
     * Limit how many GuildStats to update.
     */
    limit?: number
  }

  /**
   * GuildStats upsert
   */
  export type GuildStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * The filter to search for the GuildStats to update in case it exists.
     */
    where: GuildStatsWhereUniqueInput
    /**
     * In case the GuildStats found by the `where` argument doesn't exist, create a new GuildStats with this data.
     */
    create: XOR<GuildStatsCreateInput, GuildStatsUncheckedCreateInput>
    /**
     * In case the GuildStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuildStatsUpdateInput, GuildStatsUncheckedUpdateInput>
  }

  /**
   * GuildStats delete
   */
  export type GuildStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
    /**
     * Filter which GuildStats to delete.
     */
    where: GuildStatsWhereUniqueInput
  }

  /**
   * GuildStats deleteMany
   */
  export type GuildStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuildStats to delete
     */
    where?: GuildStatsWhereInput
    /**
     * Limit how many GuildStats to delete.
     */
    limit?: number
  }

  /**
   * GuildStats without action
   */
  export type GuildStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildStats
     */
    select?: GuildStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildStats
     */
    omit?: GuildStatsOmit<ExtArgs> | null
  }


  /**
   * Model VotingStats
   */

  export type AggregateVotingStats = {
    _count: VotingStatsCountAggregateOutputType | null
    _avg: VotingStatsAvgAggregateOutputType | null
    _sum: VotingStatsSumAggregateOutputType | null
    _min: VotingStatsMinAggregateOutputType | null
    _max: VotingStatsMaxAggregateOutputType | null
  }

  export type VotingStatsAvgAggregateOutputType = {
    votesCast: number | null
  }

  export type VotingStatsSumAggregateOutputType = {
    votesCast: number | null
  }

  export type VotingStatsMinAggregateOutputType = {
    id: string | null
    votingType: string | null
    startedAt: Date | null
    endedAt: Date | null
    votesCast: number | null
    guildId: string | null
  }

  export type VotingStatsMaxAggregateOutputType = {
    id: string | null
    votingType: string | null
    startedAt: Date | null
    endedAt: Date | null
    votesCast: number | null
    guildId: string | null
  }

  export type VotingStatsCountAggregateOutputType = {
    id: number
    votingType: number
    startedAt: number
    endedAt: number
    votesCast: number
    guildId: number
    _all: number
  }


  export type VotingStatsAvgAggregateInputType = {
    votesCast?: true
  }

  export type VotingStatsSumAggregateInputType = {
    votesCast?: true
  }

  export type VotingStatsMinAggregateInputType = {
    id?: true
    votingType?: true
    startedAt?: true
    endedAt?: true
    votesCast?: true
    guildId?: true
  }

  export type VotingStatsMaxAggregateInputType = {
    id?: true
    votingType?: true
    startedAt?: true
    endedAt?: true
    votesCast?: true
    guildId?: true
  }

  export type VotingStatsCountAggregateInputType = {
    id?: true
    votingType?: true
    startedAt?: true
    endedAt?: true
    votesCast?: true
    guildId?: true
    _all?: true
  }

  export type VotingStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VotingStats to aggregate.
     */
    where?: VotingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VotingStats to fetch.
     */
    orderBy?: VotingStatsOrderByWithRelationInput | VotingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VotingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VotingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VotingStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VotingStats
    **/
    _count?: true | VotingStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VotingStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VotingStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VotingStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VotingStatsMaxAggregateInputType
  }

  export type GetVotingStatsAggregateType<T extends VotingStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateVotingStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVotingStats[P]>
      : GetScalarType<T[P], AggregateVotingStats[P]>
  }




  export type VotingStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VotingStatsWhereInput
    orderBy?: VotingStatsOrderByWithAggregationInput | VotingStatsOrderByWithAggregationInput[]
    by: VotingStatsScalarFieldEnum[] | VotingStatsScalarFieldEnum
    having?: VotingStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VotingStatsCountAggregateInputType | true
    _avg?: VotingStatsAvgAggregateInputType
    _sum?: VotingStatsSumAggregateInputType
    _min?: VotingStatsMinAggregateInputType
    _max?: VotingStatsMaxAggregateInputType
  }

  export type VotingStatsGroupByOutputType = {
    id: string
    votingType: string
    startedAt: Date
    endedAt: Date | null
    votesCast: number
    guildId: string | null
    _count: VotingStatsCountAggregateOutputType | null
    _avg: VotingStatsAvgAggregateOutputType | null
    _sum: VotingStatsSumAggregateOutputType | null
    _min: VotingStatsMinAggregateOutputType | null
    _max: VotingStatsMaxAggregateOutputType | null
  }

  type GetVotingStatsGroupByPayload<T extends VotingStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VotingStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VotingStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VotingStatsGroupByOutputType[P]>
            : GetScalarType<T[P], VotingStatsGroupByOutputType[P]>
        }
      >
    >


  export type VotingStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    votingType?: boolean
    startedAt?: boolean
    endedAt?: boolean
    votesCast?: boolean
    guildId?: boolean
  }, ExtArgs["result"]["votingStats"]>

  export type VotingStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    votingType?: boolean
    startedAt?: boolean
    endedAt?: boolean
    votesCast?: boolean
    guildId?: boolean
  }, ExtArgs["result"]["votingStats"]>

  export type VotingStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    votingType?: boolean
    startedAt?: boolean
    endedAt?: boolean
    votesCast?: boolean
    guildId?: boolean
  }, ExtArgs["result"]["votingStats"]>

  export type VotingStatsSelectScalar = {
    id?: boolean
    votingType?: boolean
    startedAt?: boolean
    endedAt?: boolean
    votesCast?: boolean
    guildId?: boolean
  }

  export type VotingStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "votingType" | "startedAt" | "endedAt" | "votesCast" | "guildId", ExtArgs["result"]["votingStats"]>

  export type $VotingStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VotingStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      votingType: string
      startedAt: Date
      endedAt: Date | null
      votesCast: number
      guildId: string | null
    }, ExtArgs["result"]["votingStats"]>
    composites: {}
  }

  type VotingStatsGetPayload<S extends boolean | null | undefined | VotingStatsDefaultArgs> = $Result.GetResult<Prisma.$VotingStatsPayload, S>

  type VotingStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VotingStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VotingStatsCountAggregateInputType | true
    }

  export interface VotingStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VotingStats'], meta: { name: 'VotingStats' } }
    /**
     * Find zero or one VotingStats that matches the filter.
     * @param {VotingStatsFindUniqueArgs} args - Arguments to find a VotingStats
     * @example
     * // Get one VotingStats
     * const votingStats = await prisma.votingStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VotingStatsFindUniqueArgs>(args: SelectSubset<T, VotingStatsFindUniqueArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VotingStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VotingStatsFindUniqueOrThrowArgs} args - Arguments to find a VotingStats
     * @example
     * // Get one VotingStats
     * const votingStats = await prisma.votingStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VotingStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, VotingStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VotingStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsFindFirstArgs} args - Arguments to find a VotingStats
     * @example
     * // Get one VotingStats
     * const votingStats = await prisma.votingStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VotingStatsFindFirstArgs>(args?: SelectSubset<T, VotingStatsFindFirstArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VotingStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsFindFirstOrThrowArgs} args - Arguments to find a VotingStats
     * @example
     * // Get one VotingStats
     * const votingStats = await prisma.votingStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VotingStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, VotingStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VotingStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VotingStats
     * const votingStats = await prisma.votingStats.findMany()
     * 
     * // Get first 10 VotingStats
     * const votingStats = await prisma.votingStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const votingStatsWithIdOnly = await prisma.votingStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VotingStatsFindManyArgs>(args?: SelectSubset<T, VotingStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VotingStats.
     * @param {VotingStatsCreateArgs} args - Arguments to create a VotingStats.
     * @example
     * // Create one VotingStats
     * const VotingStats = await prisma.votingStats.create({
     *   data: {
     *     // ... data to create a VotingStats
     *   }
     * })
     * 
     */
    create<T extends VotingStatsCreateArgs>(args: SelectSubset<T, VotingStatsCreateArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VotingStats.
     * @param {VotingStatsCreateManyArgs} args - Arguments to create many VotingStats.
     * @example
     * // Create many VotingStats
     * const votingStats = await prisma.votingStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VotingStatsCreateManyArgs>(args?: SelectSubset<T, VotingStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VotingStats and returns the data saved in the database.
     * @param {VotingStatsCreateManyAndReturnArgs} args - Arguments to create many VotingStats.
     * @example
     * // Create many VotingStats
     * const votingStats = await prisma.votingStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VotingStats and only return the `id`
     * const votingStatsWithIdOnly = await prisma.votingStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VotingStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, VotingStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VotingStats.
     * @param {VotingStatsDeleteArgs} args - Arguments to delete one VotingStats.
     * @example
     * // Delete one VotingStats
     * const VotingStats = await prisma.votingStats.delete({
     *   where: {
     *     // ... filter to delete one VotingStats
     *   }
     * })
     * 
     */
    delete<T extends VotingStatsDeleteArgs>(args: SelectSubset<T, VotingStatsDeleteArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VotingStats.
     * @param {VotingStatsUpdateArgs} args - Arguments to update one VotingStats.
     * @example
     * // Update one VotingStats
     * const votingStats = await prisma.votingStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VotingStatsUpdateArgs>(args: SelectSubset<T, VotingStatsUpdateArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VotingStats.
     * @param {VotingStatsDeleteManyArgs} args - Arguments to filter VotingStats to delete.
     * @example
     * // Delete a few VotingStats
     * const { count } = await prisma.votingStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VotingStatsDeleteManyArgs>(args?: SelectSubset<T, VotingStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VotingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VotingStats
     * const votingStats = await prisma.votingStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VotingStatsUpdateManyArgs>(args: SelectSubset<T, VotingStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VotingStats and returns the data updated in the database.
     * @param {VotingStatsUpdateManyAndReturnArgs} args - Arguments to update many VotingStats.
     * @example
     * // Update many VotingStats
     * const votingStats = await prisma.votingStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VotingStats and only return the `id`
     * const votingStatsWithIdOnly = await prisma.votingStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VotingStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, VotingStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VotingStats.
     * @param {VotingStatsUpsertArgs} args - Arguments to update or create a VotingStats.
     * @example
     * // Update or create a VotingStats
     * const votingStats = await prisma.votingStats.upsert({
     *   create: {
     *     // ... data to create a VotingStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VotingStats we want to update
     *   }
     * })
     */
    upsert<T extends VotingStatsUpsertArgs>(args: SelectSubset<T, VotingStatsUpsertArgs<ExtArgs>>): Prisma__VotingStatsClient<$Result.GetResult<Prisma.$VotingStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VotingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsCountArgs} args - Arguments to filter VotingStats to count.
     * @example
     * // Count the number of VotingStats
     * const count = await prisma.votingStats.count({
     *   where: {
     *     // ... the filter for the VotingStats we want to count
     *   }
     * })
    **/
    count<T extends VotingStatsCountArgs>(
      args?: Subset<T, VotingStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VotingStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VotingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VotingStatsAggregateArgs>(args: Subset<T, VotingStatsAggregateArgs>): Prisma.PrismaPromise<GetVotingStatsAggregateType<T>>

    /**
     * Group by VotingStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotingStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VotingStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VotingStatsGroupByArgs['orderBy'] }
        : { orderBy?: VotingStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VotingStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVotingStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VotingStats model
   */
  readonly fields: VotingStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VotingStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VotingStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VotingStats model
   */
  interface VotingStatsFieldRefs {
    readonly id: FieldRef<"VotingStats", 'String'>
    readonly votingType: FieldRef<"VotingStats", 'String'>
    readonly startedAt: FieldRef<"VotingStats", 'DateTime'>
    readonly endedAt: FieldRef<"VotingStats", 'DateTime'>
    readonly votesCast: FieldRef<"VotingStats", 'Int'>
    readonly guildId: FieldRef<"VotingStats", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VotingStats findUnique
   */
  export type VotingStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * Filter, which VotingStats to fetch.
     */
    where: VotingStatsWhereUniqueInput
  }

  /**
   * VotingStats findUniqueOrThrow
   */
  export type VotingStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * Filter, which VotingStats to fetch.
     */
    where: VotingStatsWhereUniqueInput
  }

  /**
   * VotingStats findFirst
   */
  export type VotingStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * Filter, which VotingStats to fetch.
     */
    where?: VotingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VotingStats to fetch.
     */
    orderBy?: VotingStatsOrderByWithRelationInput | VotingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VotingStats.
     */
    cursor?: VotingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VotingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VotingStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VotingStats.
     */
    distinct?: VotingStatsScalarFieldEnum | VotingStatsScalarFieldEnum[]
  }

  /**
   * VotingStats findFirstOrThrow
   */
  export type VotingStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * Filter, which VotingStats to fetch.
     */
    where?: VotingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VotingStats to fetch.
     */
    orderBy?: VotingStatsOrderByWithRelationInput | VotingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VotingStats.
     */
    cursor?: VotingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VotingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VotingStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VotingStats.
     */
    distinct?: VotingStatsScalarFieldEnum | VotingStatsScalarFieldEnum[]
  }

  /**
   * VotingStats findMany
   */
  export type VotingStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * Filter, which VotingStats to fetch.
     */
    where?: VotingStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VotingStats to fetch.
     */
    orderBy?: VotingStatsOrderByWithRelationInput | VotingStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VotingStats.
     */
    cursor?: VotingStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VotingStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VotingStats.
     */
    skip?: number
    distinct?: VotingStatsScalarFieldEnum | VotingStatsScalarFieldEnum[]
  }

  /**
   * VotingStats create
   */
  export type VotingStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * The data needed to create a VotingStats.
     */
    data: XOR<VotingStatsCreateInput, VotingStatsUncheckedCreateInput>
  }

  /**
   * VotingStats createMany
   */
  export type VotingStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VotingStats.
     */
    data: VotingStatsCreateManyInput | VotingStatsCreateManyInput[]
  }

  /**
   * VotingStats createManyAndReturn
   */
  export type VotingStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * The data used to create many VotingStats.
     */
    data: VotingStatsCreateManyInput | VotingStatsCreateManyInput[]
  }

  /**
   * VotingStats update
   */
  export type VotingStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * The data needed to update a VotingStats.
     */
    data: XOR<VotingStatsUpdateInput, VotingStatsUncheckedUpdateInput>
    /**
     * Choose, which VotingStats to update.
     */
    where: VotingStatsWhereUniqueInput
  }

  /**
   * VotingStats updateMany
   */
  export type VotingStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VotingStats.
     */
    data: XOR<VotingStatsUpdateManyMutationInput, VotingStatsUncheckedUpdateManyInput>
    /**
     * Filter which VotingStats to update
     */
    where?: VotingStatsWhereInput
    /**
     * Limit how many VotingStats to update.
     */
    limit?: number
  }

  /**
   * VotingStats updateManyAndReturn
   */
  export type VotingStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * The data used to update VotingStats.
     */
    data: XOR<VotingStatsUpdateManyMutationInput, VotingStatsUncheckedUpdateManyInput>
    /**
     * Filter which VotingStats to update
     */
    where?: VotingStatsWhereInput
    /**
     * Limit how many VotingStats to update.
     */
    limit?: number
  }

  /**
   * VotingStats upsert
   */
  export type VotingStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * The filter to search for the VotingStats to update in case it exists.
     */
    where: VotingStatsWhereUniqueInput
    /**
     * In case the VotingStats found by the `where` argument doesn't exist, create a new VotingStats with this data.
     */
    create: XOR<VotingStatsCreateInput, VotingStatsUncheckedCreateInput>
    /**
     * In case the VotingStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VotingStatsUpdateInput, VotingStatsUncheckedUpdateInput>
  }

  /**
   * VotingStats delete
   */
  export type VotingStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
    /**
     * Filter which VotingStats to delete.
     */
    where: VotingStatsWhereUniqueInput
  }

  /**
   * VotingStats deleteMany
   */
  export type VotingStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VotingStats to delete
     */
    where?: VotingStatsWhereInput
    /**
     * Limit how many VotingStats to delete.
     */
    limit?: number
  }

  /**
   * VotingStats without action
   */
  export type VotingStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VotingStats
     */
    select?: VotingStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VotingStats
     */
    omit?: VotingStatsOmit<ExtArgs> | null
  }


  /**
   * Model FeedbackStats
   */

  export type AggregateFeedbackStats = {
    _count: FeedbackStatsCountAggregateOutputType | null
    _min: FeedbackStatsMinAggregateOutputType | null
    _max: FeedbackStatsMaxAggregateOutputType | null
  }

  export type FeedbackStatsMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    guildId: string | null
    submittedBy: string | null
  }

  export type FeedbackStatsMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    guildId: string | null
    submittedBy: string | null
  }

  export type FeedbackStatsCountAggregateOutputType = {
    id: number
    createdAt: number
    guildId: number
    submittedBy: number
    _all: number
  }


  export type FeedbackStatsMinAggregateInputType = {
    id?: true
    createdAt?: true
    guildId?: true
    submittedBy?: true
  }

  export type FeedbackStatsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    guildId?: true
    submittedBy?: true
  }

  export type FeedbackStatsCountAggregateInputType = {
    id?: true
    createdAt?: true
    guildId?: true
    submittedBy?: true
    _all?: true
  }

  export type FeedbackStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackStats to aggregate.
     */
    where?: FeedbackStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackStats to fetch.
     */
    orderBy?: FeedbackStatsOrderByWithRelationInput | FeedbackStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedbackStats
    **/
    _count?: true | FeedbackStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackStatsMaxAggregateInputType
  }

  export type GetFeedbackStatsAggregateType<T extends FeedbackStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackStats[P]>
      : GetScalarType<T[P], AggregateFeedbackStats[P]>
  }




  export type FeedbackStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackStatsWhereInput
    orderBy?: FeedbackStatsOrderByWithAggregationInput | FeedbackStatsOrderByWithAggregationInput[]
    by: FeedbackStatsScalarFieldEnum[] | FeedbackStatsScalarFieldEnum
    having?: FeedbackStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackStatsCountAggregateInputType | true
    _min?: FeedbackStatsMinAggregateInputType
    _max?: FeedbackStatsMaxAggregateInputType
  }

  export type FeedbackStatsGroupByOutputType = {
    id: string
    createdAt: Date
    guildId: string | null
    submittedBy: string | null
    _count: FeedbackStatsCountAggregateOutputType | null
    _min: FeedbackStatsMinAggregateOutputType | null
    _max: FeedbackStatsMaxAggregateOutputType | null
  }

  type GetFeedbackStatsGroupByPayload<T extends FeedbackStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackStatsGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackStatsGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    guildId?: boolean
    submittedBy?: boolean
  }, ExtArgs["result"]["feedbackStats"]>

  export type FeedbackStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    guildId?: boolean
    submittedBy?: boolean
  }, ExtArgs["result"]["feedbackStats"]>

  export type FeedbackStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    guildId?: boolean
    submittedBy?: boolean
  }, ExtArgs["result"]["feedbackStats"]>

  export type FeedbackStatsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    guildId?: boolean
    submittedBy?: boolean
  }

  export type FeedbackStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "guildId" | "submittedBy", ExtArgs["result"]["feedbackStats"]>

  export type $FeedbackStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedbackStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      guildId: string | null
      submittedBy: string | null
    }, ExtArgs["result"]["feedbackStats"]>
    composites: {}
  }

  type FeedbackStatsGetPayload<S extends boolean | null | undefined | FeedbackStatsDefaultArgs> = $Result.GetResult<Prisma.$FeedbackStatsPayload, S>

  type FeedbackStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackStatsCountAggregateInputType | true
    }

  export interface FeedbackStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackStats'], meta: { name: 'FeedbackStats' } }
    /**
     * Find zero or one FeedbackStats that matches the filter.
     * @param {FeedbackStatsFindUniqueArgs} args - Arguments to find a FeedbackStats
     * @example
     * // Get one FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackStatsFindUniqueArgs>(args: SelectSubset<T, FeedbackStatsFindUniqueArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedbackStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackStatsFindUniqueOrThrowArgs} args - Arguments to find a FeedbackStats
     * @example
     * // Get one FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedbackStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsFindFirstArgs} args - Arguments to find a FeedbackStats
     * @example
     * // Get one FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackStatsFindFirstArgs>(args?: SelectSubset<T, FeedbackStatsFindFirstArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedbackStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsFindFirstOrThrowArgs} args - Arguments to find a FeedbackStats
     * @example
     * // Get one FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedbackStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.findMany()
     * 
     * // Get first 10 FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackStatsWithIdOnly = await prisma.feedbackStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackStatsFindManyArgs>(args?: SelectSubset<T, FeedbackStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedbackStats.
     * @param {FeedbackStatsCreateArgs} args - Arguments to create a FeedbackStats.
     * @example
     * // Create one FeedbackStats
     * const FeedbackStats = await prisma.feedbackStats.create({
     *   data: {
     *     // ... data to create a FeedbackStats
     *   }
     * })
     * 
     */
    create<T extends FeedbackStatsCreateArgs>(args: SelectSubset<T, FeedbackStatsCreateArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedbackStats.
     * @param {FeedbackStatsCreateManyArgs} args - Arguments to create many FeedbackStats.
     * @example
     * // Create many FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackStatsCreateManyArgs>(args?: SelectSubset<T, FeedbackStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedbackStats and returns the data saved in the database.
     * @param {FeedbackStatsCreateManyAndReturnArgs} args - Arguments to create many FeedbackStats.
     * @example
     * // Create many FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedbackStats and only return the `id`
     * const feedbackStatsWithIdOnly = await prisma.feedbackStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedbackStats.
     * @param {FeedbackStatsDeleteArgs} args - Arguments to delete one FeedbackStats.
     * @example
     * // Delete one FeedbackStats
     * const FeedbackStats = await prisma.feedbackStats.delete({
     *   where: {
     *     // ... filter to delete one FeedbackStats
     *   }
     * })
     * 
     */
    delete<T extends FeedbackStatsDeleteArgs>(args: SelectSubset<T, FeedbackStatsDeleteArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedbackStats.
     * @param {FeedbackStatsUpdateArgs} args - Arguments to update one FeedbackStats.
     * @example
     * // Update one FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackStatsUpdateArgs>(args: SelectSubset<T, FeedbackStatsUpdateArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedbackStats.
     * @param {FeedbackStatsDeleteManyArgs} args - Arguments to filter FeedbackStats to delete.
     * @example
     * // Delete a few FeedbackStats
     * const { count } = await prisma.feedbackStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackStatsDeleteManyArgs>(args?: SelectSubset<T, FeedbackStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackStatsUpdateManyArgs>(args: SelectSubset<T, FeedbackStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackStats and returns the data updated in the database.
     * @param {FeedbackStatsUpdateManyAndReturnArgs} args - Arguments to update many FeedbackStats.
     * @example
     * // Update many FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedbackStats and only return the `id`
     * const feedbackStatsWithIdOnly = await prisma.feedbackStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedbackStats.
     * @param {FeedbackStatsUpsertArgs} args - Arguments to update or create a FeedbackStats.
     * @example
     * // Update or create a FeedbackStats
     * const feedbackStats = await prisma.feedbackStats.upsert({
     *   create: {
     *     // ... data to create a FeedbackStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackStats we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackStatsUpsertArgs>(args: SelectSubset<T, FeedbackStatsUpsertArgs<ExtArgs>>): Prisma__FeedbackStatsClient<$Result.GetResult<Prisma.$FeedbackStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedbackStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsCountArgs} args - Arguments to filter FeedbackStats to count.
     * @example
     * // Count the number of FeedbackStats
     * const count = await prisma.feedbackStats.count({
     *   where: {
     *     // ... the filter for the FeedbackStats we want to count
     *   }
     * })
    **/
    count<T extends FeedbackStatsCountArgs>(
      args?: Subset<T, FeedbackStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackStatsAggregateArgs>(args: Subset<T, FeedbackStatsAggregateArgs>): Prisma.PrismaPromise<GetFeedbackStatsAggregateType<T>>

    /**
     * Group by FeedbackStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackStatsGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackStats model
   */
  readonly fields: FeedbackStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedbackStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedbackStats model
   */
  interface FeedbackStatsFieldRefs {
    readonly id: FieldRef<"FeedbackStats", 'String'>
    readonly createdAt: FieldRef<"FeedbackStats", 'DateTime'>
    readonly guildId: FieldRef<"FeedbackStats", 'String'>
    readonly submittedBy: FieldRef<"FeedbackStats", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FeedbackStats findUnique
   */
  export type FeedbackStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * Filter, which FeedbackStats to fetch.
     */
    where: FeedbackStatsWhereUniqueInput
  }

  /**
   * FeedbackStats findUniqueOrThrow
   */
  export type FeedbackStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * Filter, which FeedbackStats to fetch.
     */
    where: FeedbackStatsWhereUniqueInput
  }

  /**
   * FeedbackStats findFirst
   */
  export type FeedbackStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * Filter, which FeedbackStats to fetch.
     */
    where?: FeedbackStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackStats to fetch.
     */
    orderBy?: FeedbackStatsOrderByWithRelationInput | FeedbackStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackStats.
     */
    cursor?: FeedbackStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackStats.
     */
    distinct?: FeedbackStatsScalarFieldEnum | FeedbackStatsScalarFieldEnum[]
  }

  /**
   * FeedbackStats findFirstOrThrow
   */
  export type FeedbackStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * Filter, which FeedbackStats to fetch.
     */
    where?: FeedbackStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackStats to fetch.
     */
    orderBy?: FeedbackStatsOrderByWithRelationInput | FeedbackStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackStats.
     */
    cursor?: FeedbackStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackStats.
     */
    distinct?: FeedbackStatsScalarFieldEnum | FeedbackStatsScalarFieldEnum[]
  }

  /**
   * FeedbackStats findMany
   */
  export type FeedbackStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * Filter, which FeedbackStats to fetch.
     */
    where?: FeedbackStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackStats to fetch.
     */
    orderBy?: FeedbackStatsOrderByWithRelationInput | FeedbackStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedbackStats.
     */
    cursor?: FeedbackStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackStats.
     */
    skip?: number
    distinct?: FeedbackStatsScalarFieldEnum | FeedbackStatsScalarFieldEnum[]
  }

  /**
   * FeedbackStats create
   */
  export type FeedbackStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * The data needed to create a FeedbackStats.
     */
    data?: XOR<FeedbackStatsCreateInput, FeedbackStatsUncheckedCreateInput>
  }

  /**
   * FeedbackStats createMany
   */
  export type FeedbackStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedbackStats.
     */
    data: FeedbackStatsCreateManyInput | FeedbackStatsCreateManyInput[]
  }

  /**
   * FeedbackStats createManyAndReturn
   */
  export type FeedbackStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * The data used to create many FeedbackStats.
     */
    data: FeedbackStatsCreateManyInput | FeedbackStatsCreateManyInput[]
  }

  /**
   * FeedbackStats update
   */
  export type FeedbackStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * The data needed to update a FeedbackStats.
     */
    data: XOR<FeedbackStatsUpdateInput, FeedbackStatsUncheckedUpdateInput>
    /**
     * Choose, which FeedbackStats to update.
     */
    where: FeedbackStatsWhereUniqueInput
  }

  /**
   * FeedbackStats updateMany
   */
  export type FeedbackStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedbackStats.
     */
    data: XOR<FeedbackStatsUpdateManyMutationInput, FeedbackStatsUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackStats to update
     */
    where?: FeedbackStatsWhereInput
    /**
     * Limit how many FeedbackStats to update.
     */
    limit?: number
  }

  /**
   * FeedbackStats updateManyAndReturn
   */
  export type FeedbackStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * The data used to update FeedbackStats.
     */
    data: XOR<FeedbackStatsUpdateManyMutationInput, FeedbackStatsUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackStats to update
     */
    where?: FeedbackStatsWhereInput
    /**
     * Limit how many FeedbackStats to update.
     */
    limit?: number
  }

  /**
   * FeedbackStats upsert
   */
  export type FeedbackStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * The filter to search for the FeedbackStats to update in case it exists.
     */
    where: FeedbackStatsWhereUniqueInput
    /**
     * In case the FeedbackStats found by the `where` argument doesn't exist, create a new FeedbackStats with this data.
     */
    create: XOR<FeedbackStatsCreateInput, FeedbackStatsUncheckedCreateInput>
    /**
     * In case the FeedbackStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackStatsUpdateInput, FeedbackStatsUncheckedUpdateInput>
  }

  /**
   * FeedbackStats delete
   */
  export type FeedbackStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
    /**
     * Filter which FeedbackStats to delete.
     */
    where: FeedbackStatsWhereUniqueInput
  }

  /**
   * FeedbackStats deleteMany
   */
  export type FeedbackStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackStats to delete
     */
    where?: FeedbackStatsWhereInput
    /**
     * Limit how many FeedbackStats to delete.
     */
    limit?: number
  }

  /**
   * FeedbackStats without action
   */
  export type FeedbackStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackStats
     */
    select?: FeedbackStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackStats
     */
    omit?: FeedbackStatsOmit<ExtArgs> | null
  }


  /**
   * Model YouTubePost
   */

  export type AggregateYouTubePost = {
    _count: YouTubePostCountAggregateOutputType | null
    _min: YouTubePostMinAggregateOutputType | null
    _max: YouTubePostMaxAggregateOutputType | null
  }

  export type YouTubePostMinAggregateOutputType = {
    id: string | null
    videoId: string | null
    guildId: string | null
    postedAt: Date | null
  }

  export type YouTubePostMaxAggregateOutputType = {
    id: string | null
    videoId: string | null
    guildId: string | null
    postedAt: Date | null
  }

  export type YouTubePostCountAggregateOutputType = {
    id: number
    videoId: number
    guildId: number
    postedAt: number
    _all: number
  }


  export type YouTubePostMinAggregateInputType = {
    id?: true
    videoId?: true
    guildId?: true
    postedAt?: true
  }

  export type YouTubePostMaxAggregateInputType = {
    id?: true
    videoId?: true
    guildId?: true
    postedAt?: true
  }

  export type YouTubePostCountAggregateInputType = {
    id?: true
    videoId?: true
    guildId?: true
    postedAt?: true
    _all?: true
  }

  export type YouTubePostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YouTubePost to aggregate.
     */
    where?: YouTubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YouTubePosts to fetch.
     */
    orderBy?: YouTubePostOrderByWithRelationInput | YouTubePostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YouTubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YouTubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YouTubePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YouTubePosts
    **/
    _count?: true | YouTubePostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YouTubePostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YouTubePostMaxAggregateInputType
  }

  export type GetYouTubePostAggregateType<T extends YouTubePostAggregateArgs> = {
        [P in keyof T & keyof AggregateYouTubePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYouTubePost[P]>
      : GetScalarType<T[P], AggregateYouTubePost[P]>
  }




  export type YouTubePostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YouTubePostWhereInput
    orderBy?: YouTubePostOrderByWithAggregationInput | YouTubePostOrderByWithAggregationInput[]
    by: YouTubePostScalarFieldEnum[] | YouTubePostScalarFieldEnum
    having?: YouTubePostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YouTubePostCountAggregateInputType | true
    _min?: YouTubePostMinAggregateInputType
    _max?: YouTubePostMaxAggregateInputType
  }

  export type YouTubePostGroupByOutputType = {
    id: string
    videoId: string
    guildId: string
    postedAt: Date
    _count: YouTubePostCountAggregateOutputType | null
    _min: YouTubePostMinAggregateOutputType | null
    _max: YouTubePostMaxAggregateOutputType | null
  }

  type GetYouTubePostGroupByPayload<T extends YouTubePostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YouTubePostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YouTubePostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YouTubePostGroupByOutputType[P]>
            : GetScalarType<T[P], YouTubePostGroupByOutputType[P]>
        }
      >
    >


  export type YouTubePostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    guildId?: boolean
    postedAt?: boolean
  }, ExtArgs["result"]["youTubePost"]>

  export type YouTubePostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    guildId?: boolean
    postedAt?: boolean
  }, ExtArgs["result"]["youTubePost"]>

  export type YouTubePostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    guildId?: boolean
    postedAt?: boolean
  }, ExtArgs["result"]["youTubePost"]>

  export type YouTubePostSelectScalar = {
    id?: boolean
    videoId?: boolean
    guildId?: boolean
    postedAt?: boolean
  }

  export type YouTubePostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "videoId" | "guildId" | "postedAt", ExtArgs["result"]["youTubePost"]>

  export type $YouTubePostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YouTubePost"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      videoId: string
      guildId: string
      postedAt: Date
    }, ExtArgs["result"]["youTubePost"]>
    composites: {}
  }

  type YouTubePostGetPayload<S extends boolean | null | undefined | YouTubePostDefaultArgs> = $Result.GetResult<Prisma.$YouTubePostPayload, S>

  type YouTubePostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<YouTubePostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: YouTubePostCountAggregateInputType | true
    }

  export interface YouTubePostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YouTubePost'], meta: { name: 'YouTubePost' } }
    /**
     * Find zero or one YouTubePost that matches the filter.
     * @param {YouTubePostFindUniqueArgs} args - Arguments to find a YouTubePost
     * @example
     * // Get one YouTubePost
     * const youTubePost = await prisma.youTubePost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YouTubePostFindUniqueArgs>(args: SelectSubset<T, YouTubePostFindUniqueArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one YouTubePost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {YouTubePostFindUniqueOrThrowArgs} args - Arguments to find a YouTubePost
     * @example
     * // Get one YouTubePost
     * const youTubePost = await prisma.youTubePost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YouTubePostFindUniqueOrThrowArgs>(args: SelectSubset<T, YouTubePostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YouTubePost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostFindFirstArgs} args - Arguments to find a YouTubePost
     * @example
     * // Get one YouTubePost
     * const youTubePost = await prisma.youTubePost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YouTubePostFindFirstArgs>(args?: SelectSubset<T, YouTubePostFindFirstArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YouTubePost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostFindFirstOrThrowArgs} args - Arguments to find a YouTubePost
     * @example
     * // Get one YouTubePost
     * const youTubePost = await prisma.youTubePost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YouTubePostFindFirstOrThrowArgs>(args?: SelectSubset<T, YouTubePostFindFirstOrThrowArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more YouTubePosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YouTubePosts
     * const youTubePosts = await prisma.youTubePost.findMany()
     * 
     * // Get first 10 YouTubePosts
     * const youTubePosts = await prisma.youTubePost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youTubePostWithIdOnly = await prisma.youTubePost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends YouTubePostFindManyArgs>(args?: SelectSubset<T, YouTubePostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a YouTubePost.
     * @param {YouTubePostCreateArgs} args - Arguments to create a YouTubePost.
     * @example
     * // Create one YouTubePost
     * const YouTubePost = await prisma.youTubePost.create({
     *   data: {
     *     // ... data to create a YouTubePost
     *   }
     * })
     * 
     */
    create<T extends YouTubePostCreateArgs>(args: SelectSubset<T, YouTubePostCreateArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many YouTubePosts.
     * @param {YouTubePostCreateManyArgs} args - Arguments to create many YouTubePosts.
     * @example
     * // Create many YouTubePosts
     * const youTubePost = await prisma.youTubePost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YouTubePostCreateManyArgs>(args?: SelectSubset<T, YouTubePostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many YouTubePosts and returns the data saved in the database.
     * @param {YouTubePostCreateManyAndReturnArgs} args - Arguments to create many YouTubePosts.
     * @example
     * // Create many YouTubePosts
     * const youTubePost = await prisma.youTubePost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many YouTubePosts and only return the `id`
     * const youTubePostWithIdOnly = await prisma.youTubePost.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends YouTubePostCreateManyAndReturnArgs>(args?: SelectSubset<T, YouTubePostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a YouTubePost.
     * @param {YouTubePostDeleteArgs} args - Arguments to delete one YouTubePost.
     * @example
     * // Delete one YouTubePost
     * const YouTubePost = await prisma.youTubePost.delete({
     *   where: {
     *     // ... filter to delete one YouTubePost
     *   }
     * })
     * 
     */
    delete<T extends YouTubePostDeleteArgs>(args: SelectSubset<T, YouTubePostDeleteArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one YouTubePost.
     * @param {YouTubePostUpdateArgs} args - Arguments to update one YouTubePost.
     * @example
     * // Update one YouTubePost
     * const youTubePost = await prisma.youTubePost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YouTubePostUpdateArgs>(args: SelectSubset<T, YouTubePostUpdateArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more YouTubePosts.
     * @param {YouTubePostDeleteManyArgs} args - Arguments to filter YouTubePosts to delete.
     * @example
     * // Delete a few YouTubePosts
     * const { count } = await prisma.youTubePost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YouTubePostDeleteManyArgs>(args?: SelectSubset<T, YouTubePostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YouTubePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YouTubePosts
     * const youTubePost = await prisma.youTubePost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YouTubePostUpdateManyArgs>(args: SelectSubset<T, YouTubePostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YouTubePosts and returns the data updated in the database.
     * @param {YouTubePostUpdateManyAndReturnArgs} args - Arguments to update many YouTubePosts.
     * @example
     * // Update many YouTubePosts
     * const youTubePost = await prisma.youTubePost.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more YouTubePosts and only return the `id`
     * const youTubePostWithIdOnly = await prisma.youTubePost.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends YouTubePostUpdateManyAndReturnArgs>(args: SelectSubset<T, YouTubePostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one YouTubePost.
     * @param {YouTubePostUpsertArgs} args - Arguments to update or create a YouTubePost.
     * @example
     * // Update or create a YouTubePost
     * const youTubePost = await prisma.youTubePost.upsert({
     *   create: {
     *     // ... data to create a YouTubePost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YouTubePost we want to update
     *   }
     * })
     */
    upsert<T extends YouTubePostUpsertArgs>(args: SelectSubset<T, YouTubePostUpsertArgs<ExtArgs>>): Prisma__YouTubePostClient<$Result.GetResult<Prisma.$YouTubePostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of YouTubePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostCountArgs} args - Arguments to filter YouTubePosts to count.
     * @example
     * // Count the number of YouTubePosts
     * const count = await prisma.youTubePost.count({
     *   where: {
     *     // ... the filter for the YouTubePosts we want to count
     *   }
     * })
    **/
    count<T extends YouTubePostCountArgs>(
      args?: Subset<T, YouTubePostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YouTubePostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YouTubePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YouTubePostAggregateArgs>(args: Subset<T, YouTubePostAggregateArgs>): Prisma.PrismaPromise<GetYouTubePostAggregateType<T>>

    /**
     * Group by YouTubePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YouTubePostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YouTubePostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YouTubePostGroupByArgs['orderBy'] }
        : { orderBy?: YouTubePostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YouTubePostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYouTubePostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YouTubePost model
   */
  readonly fields: YouTubePostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YouTubePost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YouTubePostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YouTubePost model
   */
  interface YouTubePostFieldRefs {
    readonly id: FieldRef<"YouTubePost", 'String'>
    readonly videoId: FieldRef<"YouTubePost", 'String'>
    readonly guildId: FieldRef<"YouTubePost", 'String'>
    readonly postedAt: FieldRef<"YouTubePost", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * YouTubePost findUnique
   */
  export type YouTubePostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * Filter, which YouTubePost to fetch.
     */
    where: YouTubePostWhereUniqueInput
  }

  /**
   * YouTubePost findUniqueOrThrow
   */
  export type YouTubePostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * Filter, which YouTubePost to fetch.
     */
    where: YouTubePostWhereUniqueInput
  }

  /**
   * YouTubePost findFirst
   */
  export type YouTubePostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * Filter, which YouTubePost to fetch.
     */
    where?: YouTubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YouTubePosts to fetch.
     */
    orderBy?: YouTubePostOrderByWithRelationInput | YouTubePostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YouTubePosts.
     */
    cursor?: YouTubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YouTubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YouTubePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YouTubePosts.
     */
    distinct?: YouTubePostScalarFieldEnum | YouTubePostScalarFieldEnum[]
  }

  /**
   * YouTubePost findFirstOrThrow
   */
  export type YouTubePostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * Filter, which YouTubePost to fetch.
     */
    where?: YouTubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YouTubePosts to fetch.
     */
    orderBy?: YouTubePostOrderByWithRelationInput | YouTubePostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YouTubePosts.
     */
    cursor?: YouTubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YouTubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YouTubePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YouTubePosts.
     */
    distinct?: YouTubePostScalarFieldEnum | YouTubePostScalarFieldEnum[]
  }

  /**
   * YouTubePost findMany
   */
  export type YouTubePostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * Filter, which YouTubePosts to fetch.
     */
    where?: YouTubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YouTubePosts to fetch.
     */
    orderBy?: YouTubePostOrderByWithRelationInput | YouTubePostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YouTubePosts.
     */
    cursor?: YouTubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YouTubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YouTubePosts.
     */
    skip?: number
    distinct?: YouTubePostScalarFieldEnum | YouTubePostScalarFieldEnum[]
  }

  /**
   * YouTubePost create
   */
  export type YouTubePostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * The data needed to create a YouTubePost.
     */
    data: XOR<YouTubePostCreateInput, YouTubePostUncheckedCreateInput>
  }

  /**
   * YouTubePost createMany
   */
  export type YouTubePostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YouTubePosts.
     */
    data: YouTubePostCreateManyInput | YouTubePostCreateManyInput[]
  }

  /**
   * YouTubePost createManyAndReturn
   */
  export type YouTubePostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * The data used to create many YouTubePosts.
     */
    data: YouTubePostCreateManyInput | YouTubePostCreateManyInput[]
  }

  /**
   * YouTubePost update
   */
  export type YouTubePostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * The data needed to update a YouTubePost.
     */
    data: XOR<YouTubePostUpdateInput, YouTubePostUncheckedUpdateInput>
    /**
     * Choose, which YouTubePost to update.
     */
    where: YouTubePostWhereUniqueInput
  }

  /**
   * YouTubePost updateMany
   */
  export type YouTubePostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YouTubePosts.
     */
    data: XOR<YouTubePostUpdateManyMutationInput, YouTubePostUncheckedUpdateManyInput>
    /**
     * Filter which YouTubePosts to update
     */
    where?: YouTubePostWhereInput
    /**
     * Limit how many YouTubePosts to update.
     */
    limit?: number
  }

  /**
   * YouTubePost updateManyAndReturn
   */
  export type YouTubePostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * The data used to update YouTubePosts.
     */
    data: XOR<YouTubePostUpdateManyMutationInput, YouTubePostUncheckedUpdateManyInput>
    /**
     * Filter which YouTubePosts to update
     */
    where?: YouTubePostWhereInput
    /**
     * Limit how many YouTubePosts to update.
     */
    limit?: number
  }

  /**
   * YouTubePost upsert
   */
  export type YouTubePostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * The filter to search for the YouTubePost to update in case it exists.
     */
    where: YouTubePostWhereUniqueInput
    /**
     * In case the YouTubePost found by the `where` argument doesn't exist, create a new YouTubePost with this data.
     */
    create: XOR<YouTubePostCreateInput, YouTubePostUncheckedCreateInput>
    /**
     * In case the YouTubePost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YouTubePostUpdateInput, YouTubePostUncheckedUpdateInput>
  }

  /**
   * YouTubePost delete
   */
  export type YouTubePostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
    /**
     * Filter which YouTubePost to delete.
     */
    where: YouTubePostWhereUniqueInput
  }

  /**
   * YouTubePost deleteMany
   */
  export type YouTubePostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YouTubePosts to delete
     */
    where?: YouTubePostWhereInput
    /**
     * Limit how many YouTubePosts to delete.
     */
    limit?: number
  }

  /**
   * YouTubePost without action
   */
  export type YouTubePostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YouTubePost
     */
    select?: YouTubePostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YouTubePost
     */
    omit?: YouTubePostOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    discordId: 'discordId',
    name: 'name',
    optIn: 'optIn',
    joinedAt: 'joinedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CommandStatScalarFieldEnum: {
    command: 'command',
    count: 'count',
    updatedAt: 'updatedAt'
  };

  export type CommandStatScalarFieldEnum = (typeof CommandStatScalarFieldEnum)[keyof typeof CommandStatScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    protocolNo: 'protocolNo',
    userId: 'userId',
    username: 'username',
    serverId: 'serverId',
    title: 'title',
    description: 'description',
    category: 'category',
    importance: 'importance',
    module: 'module',
    fileUrl: 'fileUrl',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const FunGameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    emoji: 'emoji',
    isFree: 'isFree'
  };

  export type FunGameScalarFieldEnum = (typeof FunGameScalarFieldEnum)[keyof typeof FunGameScalarFieldEnum]


  export const PollScalarFieldEnum: {
    id: 'id',
    question: 'question',
    type: 'type',
    pollNumber: 'pollNumber',
    messageId: 'messageId',
    createdAt: 'createdAt',
    endedAt: 'endedAt',
    winnerId: 'winnerId'
  };

  export type PollScalarFieldEnum = (typeof PollScalarFieldEnum)[keyof typeof PollScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    gameId: 'gameId',
    pollId: 'pollId',
    createdAt: 'createdAt'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const DinoNameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color',
    type: 'type',
    size: 'size',
    style: 'style',
    approved: 'approved',
    submittedBy: 'submittedBy',
    createdAt: 'createdAt'
  };

  export type DinoNameScalarFieldEnum = (typeof DinoNameScalarFieldEnum)[keyof typeof DinoNameScalarFieldEnum]


  export const DinoStatsScalarFieldEnum: {
    id: 'id',
    totalUses: 'totalUses',
    totalRerolls: 'totalRerolls',
    updatedAt: 'updatedAt'
  };

  export type DinoStatsScalarFieldEnum = (typeof DinoStatsScalarFieldEnum)[keyof typeof DinoStatsScalarFieldEnum]


  export const GlobalStatsScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    totalGuilds: 'totalGuilds',
    lastBotOnline: 'lastBotOnline',
    dbSizeMB: 'dbSizeMB',
    totalDinoSuggestions: 'totalDinoSuggestions',
    totalDinoApproved: 'totalDinoApproved',
    totalFeedbacks: 'totalFeedbacks',
    totalVotingsStarted: 'totalVotingsStarted',
    totalVotesCast: 'totalVotesCast',
    totalGamesInDB: 'totalGamesInDB',
    totalFungamesViews: 'totalFungamesViews'
  };

  export type GlobalStatsScalarFieldEnum = (typeof GlobalStatsScalarFieldEnum)[keyof typeof GlobalStatsScalarFieldEnum]


  export const GuildStatsScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId',
    timestamp: 'timestamp',
    dinoSuggestions: 'dinoSuggestions',
    dinoApproved: 'dinoApproved',
    feedbacks: 'feedbacks',
    votingsStarted: 'votingsStarted',
    votesCast: 'votesCast',
    gamesInDB: 'gamesInDB',
    fungamesViews: 'fungamesViews',
    memberCount: 'memberCount',
    memberOnline: 'memberOnline',
    textChannelCount: 'textChannelCount',
    voiceChannelCount: 'voiceChannelCount',
    roleCount: 'roleCount',
    createdAt: 'createdAt',
    newMembers24h: 'newMembers24h'
  };

  export type GuildStatsScalarFieldEnum = (typeof GuildStatsScalarFieldEnum)[keyof typeof GuildStatsScalarFieldEnum]


  export const VotingStatsScalarFieldEnum: {
    id: 'id',
    votingType: 'votingType',
    startedAt: 'startedAt',
    endedAt: 'endedAt',
    votesCast: 'votesCast',
    guildId: 'guildId'
  };

  export type VotingStatsScalarFieldEnum = (typeof VotingStatsScalarFieldEnum)[keyof typeof VotingStatsScalarFieldEnum]


  export const FeedbackStatsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    guildId: 'guildId',
    submittedBy: 'submittedBy'
  };

  export type FeedbackStatsScalarFieldEnum = (typeof FeedbackStatsScalarFieldEnum)[keyof typeof FeedbackStatsScalarFieldEnum]


  export const YouTubePostScalarFieldEnum: {
    id: 'id',
    videoId: 'videoId',
    guildId: 'guildId',
    postedAt: 'postedAt'
  };

  export type YouTubePostScalarFieldEnum = (typeof YouTubePostScalarFieldEnum)[keyof typeof YouTubePostScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    discordId?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    optIn?: BoolFilter<"User"> | boolean
    joinedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    discordId?: SortOrder
    name?: SortOrderInput | SortOrder
    optIn?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    discordId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    optIn?: BoolFilter<"User"> | boolean
    joinedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "discordId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    discordId?: SortOrder
    name?: SortOrderInput | SortOrder
    optIn?: SortOrder
    joinedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    discordId?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    optIn?: BoolWithAggregatesFilter<"User"> | boolean
    joinedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CommandStatWhereInput = {
    AND?: CommandStatWhereInput | CommandStatWhereInput[]
    OR?: CommandStatWhereInput[]
    NOT?: CommandStatWhereInput | CommandStatWhereInput[]
    command?: StringFilter<"CommandStat"> | string
    count?: IntFilter<"CommandStat"> | number
    updatedAt?: DateTimeFilter<"CommandStat"> | Date | string
  }

  export type CommandStatOrderByWithRelationInput = {
    command?: SortOrder
    count?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommandStatWhereUniqueInput = Prisma.AtLeast<{
    command?: string
    AND?: CommandStatWhereInput | CommandStatWhereInput[]
    OR?: CommandStatWhereInput[]
    NOT?: CommandStatWhereInput | CommandStatWhereInput[]
    count?: IntFilter<"CommandStat"> | number
    updatedAt?: DateTimeFilter<"CommandStat"> | Date | string
  }, "command">

  export type CommandStatOrderByWithAggregationInput = {
    command?: SortOrder
    count?: SortOrder
    updatedAt?: SortOrder
    _count?: CommandStatCountOrderByAggregateInput
    _avg?: CommandStatAvgOrderByAggregateInput
    _max?: CommandStatMaxOrderByAggregateInput
    _min?: CommandStatMinOrderByAggregateInput
    _sum?: CommandStatSumOrderByAggregateInput
  }

  export type CommandStatScalarWhereWithAggregatesInput = {
    AND?: CommandStatScalarWhereWithAggregatesInput | CommandStatScalarWhereWithAggregatesInput[]
    OR?: CommandStatScalarWhereWithAggregatesInput[]
    NOT?: CommandStatScalarWhereWithAggregatesInput | CommandStatScalarWhereWithAggregatesInput[]
    command?: StringWithAggregatesFilter<"CommandStat"> | string
    count?: IntWithAggregatesFilter<"CommandStat"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"CommandStat"> | Date | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    protocolNo?: IntFilter<"Feedback"> | number
    userId?: StringFilter<"Feedback"> | string
    username?: StringFilter<"Feedback"> | string
    serverId?: StringFilter<"Feedback"> | string
    title?: StringFilter<"Feedback"> | string
    description?: StringFilter<"Feedback"> | string
    category?: StringFilter<"Feedback"> | string
    importance?: StringFilter<"Feedback"> | string
    module?: StringNullableFilter<"Feedback"> | string | null
    fileUrl?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    protocolNo?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    importance?: SortOrder
    module?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    protocolNo?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    userId?: StringFilter<"Feedback"> | string
    username?: StringFilter<"Feedback"> | string
    serverId?: StringFilter<"Feedback"> | string
    title?: StringFilter<"Feedback"> | string
    description?: StringFilter<"Feedback"> | string
    category?: StringFilter<"Feedback"> | string
    importance?: StringFilter<"Feedback"> | string
    module?: StringNullableFilter<"Feedback"> | string | null
    fileUrl?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }, "id" | "protocolNo">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    protocolNo?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    importance?: SortOrder
    module?: SortOrderInput | SortOrder
    fileUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    protocolNo?: IntWithAggregatesFilter<"Feedback"> | number
    userId?: StringWithAggregatesFilter<"Feedback"> | string
    username?: StringWithAggregatesFilter<"Feedback"> | string
    serverId?: StringWithAggregatesFilter<"Feedback"> | string
    title?: StringWithAggregatesFilter<"Feedback"> | string
    description?: StringWithAggregatesFilter<"Feedback"> | string
    category?: StringWithAggregatesFilter<"Feedback"> | string
    importance?: StringWithAggregatesFilter<"Feedback"> | string
    module?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    fileUrl?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type FunGameWhereInput = {
    AND?: FunGameWhereInput | FunGameWhereInput[]
    OR?: FunGameWhereInput[]
    NOT?: FunGameWhereInput | FunGameWhereInput[]
    id?: StringFilter<"FunGame"> | string
    name?: StringFilter<"FunGame"> | string
    emoji?: StringNullableFilter<"FunGame"> | string | null
    isFree?: BoolFilter<"FunGame"> | boolean
    wonPolls?: PollListRelationFilter
    votes?: VoteListRelationFilter
    polls?: PollListRelationFilter
  }

  export type FunGameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    emoji?: SortOrderInput | SortOrder
    isFree?: SortOrder
    wonPolls?: PollOrderByRelationAggregateInput
    votes?: VoteOrderByRelationAggregateInput
    polls?: PollOrderByRelationAggregateInput
  }

  export type FunGameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: FunGameWhereInput | FunGameWhereInput[]
    OR?: FunGameWhereInput[]
    NOT?: FunGameWhereInput | FunGameWhereInput[]
    emoji?: StringNullableFilter<"FunGame"> | string | null
    isFree?: BoolFilter<"FunGame"> | boolean
    wonPolls?: PollListRelationFilter
    votes?: VoteListRelationFilter
    polls?: PollListRelationFilter
  }, "id" | "name">

  export type FunGameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    emoji?: SortOrderInput | SortOrder
    isFree?: SortOrder
    _count?: FunGameCountOrderByAggregateInput
    _max?: FunGameMaxOrderByAggregateInput
    _min?: FunGameMinOrderByAggregateInput
  }

  export type FunGameScalarWhereWithAggregatesInput = {
    AND?: FunGameScalarWhereWithAggregatesInput | FunGameScalarWhereWithAggregatesInput[]
    OR?: FunGameScalarWhereWithAggregatesInput[]
    NOT?: FunGameScalarWhereWithAggregatesInput | FunGameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FunGame"> | string
    name?: StringWithAggregatesFilter<"FunGame"> | string
    emoji?: StringNullableWithAggregatesFilter<"FunGame"> | string | null
    isFree?: BoolWithAggregatesFilter<"FunGame"> | boolean
  }

  export type PollWhereInput = {
    AND?: PollWhereInput | PollWhereInput[]
    OR?: PollWhereInput[]
    NOT?: PollWhereInput | PollWhereInput[]
    id?: StringFilter<"Poll"> | string
    question?: StringFilter<"Poll"> | string
    type?: StringFilter<"Poll"> | string
    pollNumber?: IntFilter<"Poll"> | number
    messageId?: StringFilter<"Poll"> | string
    createdAt?: DateTimeFilter<"Poll"> | Date | string
    endedAt?: DateTimeNullableFilter<"Poll"> | Date | string | null
    winnerId?: StringNullableFilter<"Poll"> | string | null
    winner?: XOR<FunGameNullableScalarRelationFilter, FunGameWhereInput> | null
    votes?: VoteListRelationFilter
    games?: FunGameListRelationFilter
  }

  export type PollOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    type?: SortOrder
    pollNumber?: SortOrder
    messageId?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    winner?: FunGameOrderByWithRelationInput
    votes?: VoteOrderByRelationAggregateInput
    games?: FunGameOrderByRelationAggregateInput
  }

  export type PollWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PollWhereInput | PollWhereInput[]
    OR?: PollWhereInput[]
    NOT?: PollWhereInput | PollWhereInput[]
    question?: StringFilter<"Poll"> | string
    type?: StringFilter<"Poll"> | string
    pollNumber?: IntFilter<"Poll"> | number
    messageId?: StringFilter<"Poll"> | string
    createdAt?: DateTimeFilter<"Poll"> | Date | string
    endedAt?: DateTimeNullableFilter<"Poll"> | Date | string | null
    winnerId?: StringNullableFilter<"Poll"> | string | null
    winner?: XOR<FunGameNullableScalarRelationFilter, FunGameWhereInput> | null
    votes?: VoteListRelationFilter
    games?: FunGameListRelationFilter
  }, "id">

  export type PollOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    type?: SortOrder
    pollNumber?: SortOrder
    messageId?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    winnerId?: SortOrderInput | SortOrder
    _count?: PollCountOrderByAggregateInput
    _avg?: PollAvgOrderByAggregateInput
    _max?: PollMaxOrderByAggregateInput
    _min?: PollMinOrderByAggregateInput
    _sum?: PollSumOrderByAggregateInput
  }

  export type PollScalarWhereWithAggregatesInput = {
    AND?: PollScalarWhereWithAggregatesInput | PollScalarWhereWithAggregatesInput[]
    OR?: PollScalarWhereWithAggregatesInput[]
    NOT?: PollScalarWhereWithAggregatesInput | PollScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Poll"> | string
    question?: StringWithAggregatesFilter<"Poll"> | string
    type?: StringWithAggregatesFilter<"Poll"> | string
    pollNumber?: IntWithAggregatesFilter<"Poll"> | number
    messageId?: StringWithAggregatesFilter<"Poll"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Poll"> | Date | string
    endedAt?: DateTimeNullableWithAggregatesFilter<"Poll"> | Date | string | null
    winnerId?: StringNullableWithAggregatesFilter<"Poll"> | string | null
  }

  export type VoteWhereInput = {
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    id?: StringFilter<"Vote"> | string
    userId?: StringFilter<"Vote"> | string
    gameId?: StringFilter<"Vote"> | string
    pollId?: StringFilter<"Vote"> | string
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    poll?: XOR<PollScalarRelationFilter, PollWhereInput>
    game?: XOR<FunGameScalarRelationFilter, FunGameWhereInput>
  }

  export type VoteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    pollId?: SortOrder
    createdAt?: SortOrder
    poll?: PollOrderByWithRelationInput
    game?: FunGameOrderByWithRelationInput
  }

  export type VoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    userId?: StringFilter<"Vote"> | string
    gameId?: StringFilter<"Vote"> | string
    pollId?: StringFilter<"Vote"> | string
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    poll?: XOR<PollScalarRelationFilter, PollWhereInput>
    game?: XOR<FunGameScalarRelationFilter, FunGameWhereInput>
  }, "id">

  export type VoteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    pollId?: SortOrder
    createdAt?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    OR?: VoteScalarWhereWithAggregatesInput[]
    NOT?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vote"> | string
    userId?: StringWithAggregatesFilter<"Vote"> | string
    gameId?: StringWithAggregatesFilter<"Vote"> | string
    pollId?: StringWithAggregatesFilter<"Vote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Vote"> | Date | string
  }

  export type DinoNameWhereInput = {
    AND?: DinoNameWhereInput | DinoNameWhereInput[]
    OR?: DinoNameWhereInput[]
    NOT?: DinoNameWhereInput | DinoNameWhereInput[]
    id?: IntFilter<"DinoName"> | number
    name?: StringFilter<"DinoName"> | string
    color?: StringNullableFilter<"DinoName"> | string | null
    type?: StringNullableFilter<"DinoName"> | string | null
    size?: StringNullableFilter<"DinoName"> | string | null
    style?: StringNullableFilter<"DinoName"> | string | null
    approved?: BoolFilter<"DinoName"> | boolean
    submittedBy?: StringNullableFilter<"DinoName"> | string | null
    createdAt?: DateTimeFilter<"DinoName"> | Date | string
  }

  export type DinoNameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    style?: SortOrderInput | SortOrder
    approved?: SortOrder
    submittedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type DinoNameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: DinoNameWhereInput | DinoNameWhereInput[]
    OR?: DinoNameWhereInput[]
    NOT?: DinoNameWhereInput | DinoNameWhereInput[]
    color?: StringNullableFilter<"DinoName"> | string | null
    type?: StringNullableFilter<"DinoName"> | string | null
    size?: StringNullableFilter<"DinoName"> | string | null
    style?: StringNullableFilter<"DinoName"> | string | null
    approved?: BoolFilter<"DinoName"> | boolean
    submittedBy?: StringNullableFilter<"DinoName"> | string | null
    createdAt?: DateTimeFilter<"DinoName"> | Date | string
  }, "id" | "name">

  export type DinoNameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    style?: SortOrderInput | SortOrder
    approved?: SortOrder
    submittedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DinoNameCountOrderByAggregateInput
    _avg?: DinoNameAvgOrderByAggregateInput
    _max?: DinoNameMaxOrderByAggregateInput
    _min?: DinoNameMinOrderByAggregateInput
    _sum?: DinoNameSumOrderByAggregateInput
  }

  export type DinoNameScalarWhereWithAggregatesInput = {
    AND?: DinoNameScalarWhereWithAggregatesInput | DinoNameScalarWhereWithAggregatesInput[]
    OR?: DinoNameScalarWhereWithAggregatesInput[]
    NOT?: DinoNameScalarWhereWithAggregatesInput | DinoNameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DinoName"> | number
    name?: StringWithAggregatesFilter<"DinoName"> | string
    color?: StringNullableWithAggregatesFilter<"DinoName"> | string | null
    type?: StringNullableWithAggregatesFilter<"DinoName"> | string | null
    size?: StringNullableWithAggregatesFilter<"DinoName"> | string | null
    style?: StringNullableWithAggregatesFilter<"DinoName"> | string | null
    approved?: BoolWithAggregatesFilter<"DinoName"> | boolean
    submittedBy?: StringNullableWithAggregatesFilter<"DinoName"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DinoName"> | Date | string
  }

  export type DinoStatsWhereInput = {
    AND?: DinoStatsWhereInput | DinoStatsWhereInput[]
    OR?: DinoStatsWhereInput[]
    NOT?: DinoStatsWhereInput | DinoStatsWhereInput[]
    id?: IntFilter<"DinoStats"> | number
    totalUses?: IntFilter<"DinoStats"> | number
    totalRerolls?: IntFilter<"DinoStats"> | number
    updatedAt?: DateTimeFilter<"DinoStats"> | Date | string
  }

  export type DinoStatsOrderByWithRelationInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
    updatedAt?: SortOrder
  }

  export type DinoStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DinoStatsWhereInput | DinoStatsWhereInput[]
    OR?: DinoStatsWhereInput[]
    NOT?: DinoStatsWhereInput | DinoStatsWhereInput[]
    totalUses?: IntFilter<"DinoStats"> | number
    totalRerolls?: IntFilter<"DinoStats"> | number
    updatedAt?: DateTimeFilter<"DinoStats"> | Date | string
  }, "id">

  export type DinoStatsOrderByWithAggregationInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
    updatedAt?: SortOrder
    _count?: DinoStatsCountOrderByAggregateInput
    _avg?: DinoStatsAvgOrderByAggregateInput
    _max?: DinoStatsMaxOrderByAggregateInput
    _min?: DinoStatsMinOrderByAggregateInput
    _sum?: DinoStatsSumOrderByAggregateInput
  }

  export type DinoStatsScalarWhereWithAggregatesInput = {
    AND?: DinoStatsScalarWhereWithAggregatesInput | DinoStatsScalarWhereWithAggregatesInput[]
    OR?: DinoStatsScalarWhereWithAggregatesInput[]
    NOT?: DinoStatsScalarWhereWithAggregatesInput | DinoStatsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DinoStats"> | number
    totalUses?: IntWithAggregatesFilter<"DinoStats"> | number
    totalRerolls?: IntWithAggregatesFilter<"DinoStats"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"DinoStats"> | Date | string
  }

  export type GlobalStatsWhereInput = {
    AND?: GlobalStatsWhereInput | GlobalStatsWhereInput[]
    OR?: GlobalStatsWhereInput[]
    NOT?: GlobalStatsWhereInput | GlobalStatsWhereInput[]
    id?: StringFilter<"GlobalStats"> | string
    timestamp?: DateTimeFilter<"GlobalStats"> | Date | string
    totalGuilds?: IntFilter<"GlobalStats"> | number
    lastBotOnline?: DateTimeNullableFilter<"GlobalStats"> | Date | string | null
    dbSizeMB?: FloatFilter<"GlobalStats"> | number
    totalDinoSuggestions?: IntFilter<"GlobalStats"> | number
    totalDinoApproved?: IntFilter<"GlobalStats"> | number
    totalFeedbacks?: IntFilter<"GlobalStats"> | number
    totalVotingsStarted?: IntFilter<"GlobalStats"> | number
    totalVotesCast?: IntFilter<"GlobalStats"> | number
    totalGamesInDB?: IntFilter<"GlobalStats"> | number
    totalFungamesViews?: IntFilter<"GlobalStats"> | number
  }

  export type GlobalStatsOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    totalGuilds?: SortOrder
    lastBotOnline?: SortOrderInput | SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
  }

  export type GlobalStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GlobalStatsWhereInput | GlobalStatsWhereInput[]
    OR?: GlobalStatsWhereInput[]
    NOT?: GlobalStatsWhereInput | GlobalStatsWhereInput[]
    timestamp?: DateTimeFilter<"GlobalStats"> | Date | string
    totalGuilds?: IntFilter<"GlobalStats"> | number
    lastBotOnline?: DateTimeNullableFilter<"GlobalStats"> | Date | string | null
    dbSizeMB?: FloatFilter<"GlobalStats"> | number
    totalDinoSuggestions?: IntFilter<"GlobalStats"> | number
    totalDinoApproved?: IntFilter<"GlobalStats"> | number
    totalFeedbacks?: IntFilter<"GlobalStats"> | number
    totalVotingsStarted?: IntFilter<"GlobalStats"> | number
    totalVotesCast?: IntFilter<"GlobalStats"> | number
    totalGamesInDB?: IntFilter<"GlobalStats"> | number
    totalFungamesViews?: IntFilter<"GlobalStats"> | number
  }, "id">

  export type GlobalStatsOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    totalGuilds?: SortOrder
    lastBotOnline?: SortOrderInput | SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
    _count?: GlobalStatsCountOrderByAggregateInput
    _avg?: GlobalStatsAvgOrderByAggregateInput
    _max?: GlobalStatsMaxOrderByAggregateInput
    _min?: GlobalStatsMinOrderByAggregateInput
    _sum?: GlobalStatsSumOrderByAggregateInput
  }

  export type GlobalStatsScalarWhereWithAggregatesInput = {
    AND?: GlobalStatsScalarWhereWithAggregatesInput | GlobalStatsScalarWhereWithAggregatesInput[]
    OR?: GlobalStatsScalarWhereWithAggregatesInput[]
    NOT?: GlobalStatsScalarWhereWithAggregatesInput | GlobalStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GlobalStats"> | string
    timestamp?: DateTimeWithAggregatesFilter<"GlobalStats"> | Date | string
    totalGuilds?: IntWithAggregatesFilter<"GlobalStats"> | number
    lastBotOnline?: DateTimeNullableWithAggregatesFilter<"GlobalStats"> | Date | string | null
    dbSizeMB?: FloatWithAggregatesFilter<"GlobalStats"> | number
    totalDinoSuggestions?: IntWithAggregatesFilter<"GlobalStats"> | number
    totalDinoApproved?: IntWithAggregatesFilter<"GlobalStats"> | number
    totalFeedbacks?: IntWithAggregatesFilter<"GlobalStats"> | number
    totalVotingsStarted?: IntWithAggregatesFilter<"GlobalStats"> | number
    totalVotesCast?: IntWithAggregatesFilter<"GlobalStats"> | number
    totalGamesInDB?: IntWithAggregatesFilter<"GlobalStats"> | number
    totalFungamesViews?: IntWithAggregatesFilter<"GlobalStats"> | number
  }

  export type GuildStatsWhereInput = {
    AND?: GuildStatsWhereInput | GuildStatsWhereInput[]
    OR?: GuildStatsWhereInput[]
    NOT?: GuildStatsWhereInput | GuildStatsWhereInput[]
    id?: StringFilter<"GuildStats"> | string
    guildId?: StringFilter<"GuildStats"> | string
    timestamp?: DateTimeFilter<"GuildStats"> | Date | string
    dinoSuggestions?: IntFilter<"GuildStats"> | number
    dinoApproved?: IntFilter<"GuildStats"> | number
    feedbacks?: IntFilter<"GuildStats"> | number
    votingsStarted?: IntFilter<"GuildStats"> | number
    votesCast?: IntFilter<"GuildStats"> | number
    gamesInDB?: IntFilter<"GuildStats"> | number
    fungamesViews?: IntFilter<"GuildStats"> | number
    memberCount?: IntFilter<"GuildStats"> | number
    memberOnline?: IntFilter<"GuildStats"> | number
    textChannelCount?: IntFilter<"GuildStats"> | number
    voiceChannelCount?: IntFilter<"GuildStats"> | number
    roleCount?: IntFilter<"GuildStats"> | number
    createdAt?: DateTimeNullableFilter<"GuildStats"> | Date | string | null
    newMembers24h?: IntFilter<"GuildStats"> | number
  }

  export type GuildStatsOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    timestamp?: SortOrder
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    newMembers24h?: SortOrder
  }

  export type GuildStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuildStatsWhereInput | GuildStatsWhereInput[]
    OR?: GuildStatsWhereInput[]
    NOT?: GuildStatsWhereInput | GuildStatsWhereInput[]
    guildId?: StringFilter<"GuildStats"> | string
    timestamp?: DateTimeFilter<"GuildStats"> | Date | string
    dinoSuggestions?: IntFilter<"GuildStats"> | number
    dinoApproved?: IntFilter<"GuildStats"> | number
    feedbacks?: IntFilter<"GuildStats"> | number
    votingsStarted?: IntFilter<"GuildStats"> | number
    votesCast?: IntFilter<"GuildStats"> | number
    gamesInDB?: IntFilter<"GuildStats"> | number
    fungamesViews?: IntFilter<"GuildStats"> | number
    memberCount?: IntFilter<"GuildStats"> | number
    memberOnline?: IntFilter<"GuildStats"> | number
    textChannelCount?: IntFilter<"GuildStats"> | number
    voiceChannelCount?: IntFilter<"GuildStats"> | number
    roleCount?: IntFilter<"GuildStats"> | number
    createdAt?: DateTimeNullableFilter<"GuildStats"> | Date | string | null
    newMembers24h?: IntFilter<"GuildStats"> | number
  }, "id">

  export type GuildStatsOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    timestamp?: SortOrder
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    newMembers24h?: SortOrder
    _count?: GuildStatsCountOrderByAggregateInput
    _avg?: GuildStatsAvgOrderByAggregateInput
    _max?: GuildStatsMaxOrderByAggregateInput
    _min?: GuildStatsMinOrderByAggregateInput
    _sum?: GuildStatsSumOrderByAggregateInput
  }

  export type GuildStatsScalarWhereWithAggregatesInput = {
    AND?: GuildStatsScalarWhereWithAggregatesInput | GuildStatsScalarWhereWithAggregatesInput[]
    OR?: GuildStatsScalarWhereWithAggregatesInput[]
    NOT?: GuildStatsScalarWhereWithAggregatesInput | GuildStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GuildStats"> | string
    guildId?: StringWithAggregatesFilter<"GuildStats"> | string
    timestamp?: DateTimeWithAggregatesFilter<"GuildStats"> | Date | string
    dinoSuggestions?: IntWithAggregatesFilter<"GuildStats"> | number
    dinoApproved?: IntWithAggregatesFilter<"GuildStats"> | number
    feedbacks?: IntWithAggregatesFilter<"GuildStats"> | number
    votingsStarted?: IntWithAggregatesFilter<"GuildStats"> | number
    votesCast?: IntWithAggregatesFilter<"GuildStats"> | number
    gamesInDB?: IntWithAggregatesFilter<"GuildStats"> | number
    fungamesViews?: IntWithAggregatesFilter<"GuildStats"> | number
    memberCount?: IntWithAggregatesFilter<"GuildStats"> | number
    memberOnline?: IntWithAggregatesFilter<"GuildStats"> | number
    textChannelCount?: IntWithAggregatesFilter<"GuildStats"> | number
    voiceChannelCount?: IntWithAggregatesFilter<"GuildStats"> | number
    roleCount?: IntWithAggregatesFilter<"GuildStats"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"GuildStats"> | Date | string | null
    newMembers24h?: IntWithAggregatesFilter<"GuildStats"> | number
  }

  export type VotingStatsWhereInput = {
    AND?: VotingStatsWhereInput | VotingStatsWhereInput[]
    OR?: VotingStatsWhereInput[]
    NOT?: VotingStatsWhereInput | VotingStatsWhereInput[]
    id?: StringFilter<"VotingStats"> | string
    votingType?: StringFilter<"VotingStats"> | string
    startedAt?: DateTimeFilter<"VotingStats"> | Date | string
    endedAt?: DateTimeNullableFilter<"VotingStats"> | Date | string | null
    votesCast?: IntFilter<"VotingStats"> | number
    guildId?: StringNullableFilter<"VotingStats"> | string | null
  }

  export type VotingStatsOrderByWithRelationInput = {
    id?: SortOrder
    votingType?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    votesCast?: SortOrder
    guildId?: SortOrderInput | SortOrder
  }

  export type VotingStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VotingStatsWhereInput | VotingStatsWhereInput[]
    OR?: VotingStatsWhereInput[]
    NOT?: VotingStatsWhereInput | VotingStatsWhereInput[]
    votingType?: StringFilter<"VotingStats"> | string
    startedAt?: DateTimeFilter<"VotingStats"> | Date | string
    endedAt?: DateTimeNullableFilter<"VotingStats"> | Date | string | null
    votesCast?: IntFilter<"VotingStats"> | number
    guildId?: StringNullableFilter<"VotingStats"> | string | null
  }, "id">

  export type VotingStatsOrderByWithAggregationInput = {
    id?: SortOrder
    votingType?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    votesCast?: SortOrder
    guildId?: SortOrderInput | SortOrder
    _count?: VotingStatsCountOrderByAggregateInput
    _avg?: VotingStatsAvgOrderByAggregateInput
    _max?: VotingStatsMaxOrderByAggregateInput
    _min?: VotingStatsMinOrderByAggregateInput
    _sum?: VotingStatsSumOrderByAggregateInput
  }

  export type VotingStatsScalarWhereWithAggregatesInput = {
    AND?: VotingStatsScalarWhereWithAggregatesInput | VotingStatsScalarWhereWithAggregatesInput[]
    OR?: VotingStatsScalarWhereWithAggregatesInput[]
    NOT?: VotingStatsScalarWhereWithAggregatesInput | VotingStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VotingStats"> | string
    votingType?: StringWithAggregatesFilter<"VotingStats"> | string
    startedAt?: DateTimeWithAggregatesFilter<"VotingStats"> | Date | string
    endedAt?: DateTimeNullableWithAggregatesFilter<"VotingStats"> | Date | string | null
    votesCast?: IntWithAggregatesFilter<"VotingStats"> | number
    guildId?: StringNullableWithAggregatesFilter<"VotingStats"> | string | null
  }

  export type FeedbackStatsWhereInput = {
    AND?: FeedbackStatsWhereInput | FeedbackStatsWhereInput[]
    OR?: FeedbackStatsWhereInput[]
    NOT?: FeedbackStatsWhereInput | FeedbackStatsWhereInput[]
    id?: StringFilter<"FeedbackStats"> | string
    createdAt?: DateTimeFilter<"FeedbackStats"> | Date | string
    guildId?: StringNullableFilter<"FeedbackStats"> | string | null
    submittedBy?: StringNullableFilter<"FeedbackStats"> | string | null
  }

  export type FeedbackStatsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrderInput | SortOrder
    submittedBy?: SortOrderInput | SortOrder
  }

  export type FeedbackStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackStatsWhereInput | FeedbackStatsWhereInput[]
    OR?: FeedbackStatsWhereInput[]
    NOT?: FeedbackStatsWhereInput | FeedbackStatsWhereInput[]
    createdAt?: DateTimeFilter<"FeedbackStats"> | Date | string
    guildId?: StringNullableFilter<"FeedbackStats"> | string | null
    submittedBy?: StringNullableFilter<"FeedbackStats"> | string | null
  }, "id">

  export type FeedbackStatsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrderInput | SortOrder
    submittedBy?: SortOrderInput | SortOrder
    _count?: FeedbackStatsCountOrderByAggregateInput
    _max?: FeedbackStatsMaxOrderByAggregateInput
    _min?: FeedbackStatsMinOrderByAggregateInput
  }

  export type FeedbackStatsScalarWhereWithAggregatesInput = {
    AND?: FeedbackStatsScalarWhereWithAggregatesInput | FeedbackStatsScalarWhereWithAggregatesInput[]
    OR?: FeedbackStatsScalarWhereWithAggregatesInput[]
    NOT?: FeedbackStatsScalarWhereWithAggregatesInput | FeedbackStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedbackStats"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FeedbackStats"> | Date | string
    guildId?: StringNullableWithAggregatesFilter<"FeedbackStats"> | string | null
    submittedBy?: StringNullableWithAggregatesFilter<"FeedbackStats"> | string | null
  }

  export type YouTubePostWhereInput = {
    AND?: YouTubePostWhereInput | YouTubePostWhereInput[]
    OR?: YouTubePostWhereInput[]
    NOT?: YouTubePostWhereInput | YouTubePostWhereInput[]
    id?: StringFilter<"YouTubePost"> | string
    videoId?: StringFilter<"YouTubePost"> | string
    guildId?: StringFilter<"YouTubePost"> | string
    postedAt?: DateTimeFilter<"YouTubePost"> | Date | string
  }

  export type YouTubePostOrderByWithRelationInput = {
    id?: SortOrder
    videoId?: SortOrder
    guildId?: SortOrder
    postedAt?: SortOrder
  }

  export type YouTubePostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    videoId?: string
    AND?: YouTubePostWhereInput | YouTubePostWhereInput[]
    OR?: YouTubePostWhereInput[]
    NOT?: YouTubePostWhereInput | YouTubePostWhereInput[]
    guildId?: StringFilter<"YouTubePost"> | string
    postedAt?: DateTimeFilter<"YouTubePost"> | Date | string
  }, "id" | "videoId">

  export type YouTubePostOrderByWithAggregationInput = {
    id?: SortOrder
    videoId?: SortOrder
    guildId?: SortOrder
    postedAt?: SortOrder
    _count?: YouTubePostCountOrderByAggregateInput
    _max?: YouTubePostMaxOrderByAggregateInput
    _min?: YouTubePostMinOrderByAggregateInput
  }

  export type YouTubePostScalarWhereWithAggregatesInput = {
    AND?: YouTubePostScalarWhereWithAggregatesInput | YouTubePostScalarWhereWithAggregatesInput[]
    OR?: YouTubePostScalarWhereWithAggregatesInput[]
    NOT?: YouTubePostScalarWhereWithAggregatesInput | YouTubePostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"YouTubePost"> | string
    videoId?: StringWithAggregatesFilter<"YouTubePost"> | string
    guildId?: StringWithAggregatesFilter<"YouTubePost"> | string
    postedAt?: DateTimeWithAggregatesFilter<"YouTubePost"> | Date | string
  }

  export type UserCreateInput = {
    discordId: string
    name?: string | null
    optIn?: boolean
    joinedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    discordId: string
    name?: string | null
    optIn?: boolean
    joinedAt?: Date | string
  }

  export type UserUpdateInput = {
    discordId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    optIn?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    discordId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    optIn?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    discordId: string
    name?: string | null
    optIn?: boolean
    joinedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    discordId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    optIn?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    discordId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    optIn?: BoolFieldUpdateOperationsInput | boolean
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommandStatCreateInput = {
    command: string
    count?: number
    updatedAt?: Date | string
  }

  export type CommandStatUncheckedCreateInput = {
    command: string
    count?: number
    updatedAt?: Date | string
  }

  export type CommandStatUpdateInput = {
    command?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommandStatUncheckedUpdateInput = {
    command?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommandStatCreateManyInput = {
    command: string
    count?: number
    updatedAt?: Date | string
  }

  export type CommandStatUpdateManyMutationInput = {
    command?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommandStatUncheckedUpdateManyInput = {
    command?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateInput = {
    id?: string
    protocolNo: number
    userId: string
    username: string
    serverId: string
    title: string
    description: string
    category: string
    importance: string
    module?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    protocolNo: number
    userId: string
    username: string
    serverId: string
    title: string
    description: string
    category: string
    importance: string
    module?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolNo?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    importance?: StringFieldUpdateOperationsInput | string
    module?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolNo?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    importance?: StringFieldUpdateOperationsInput | string
    module?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: string
    protocolNo: number
    userId: string
    username: string
    serverId: string
    title: string
    description: string
    category: string
    importance: string
    module?: string | null
    fileUrl?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolNo?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    importance?: StringFieldUpdateOperationsInput | string
    module?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    protocolNo?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    importance?: StringFieldUpdateOperationsInput | string
    module?: NullableStringFieldUpdateOperationsInput | string | null
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FunGameCreateInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    wonPolls?: PollCreateNestedManyWithoutWinnerInput
    votes?: VoteCreateNestedManyWithoutGameInput
    polls?: PollCreateNestedManyWithoutGamesInput
  }

  export type FunGameUncheckedCreateInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    wonPolls?: PollUncheckedCreateNestedManyWithoutWinnerInput
    votes?: VoteUncheckedCreateNestedManyWithoutGameInput
    polls?: PollUncheckedCreateNestedManyWithoutGamesInput
  }

  export type FunGameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    wonPolls?: PollUpdateManyWithoutWinnerNestedInput
    votes?: VoteUpdateManyWithoutGameNestedInput
    polls?: PollUpdateManyWithoutGamesNestedInput
  }

  export type FunGameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    wonPolls?: PollUncheckedUpdateManyWithoutWinnerNestedInput
    votes?: VoteUncheckedUpdateManyWithoutGameNestedInput
    polls?: PollUncheckedUpdateManyWithoutGamesNestedInput
  }

  export type FunGameCreateManyInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
  }

  export type FunGameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FunGameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PollCreateInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winner?: FunGameCreateNestedOneWithoutWonPollsInput
    votes?: VoteCreateNestedManyWithoutPollInput
    games?: FunGameCreateNestedManyWithoutPollsInput
  }

  export type PollUncheckedCreateInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winnerId?: string | null
    votes?: VoteUncheckedCreateNestedManyWithoutPollInput
    games?: FunGameUncheckedCreateNestedManyWithoutPollsInput
  }

  export type PollUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: FunGameUpdateOneWithoutWonPollsNestedInput
    votes?: VoteUpdateManyWithoutPollNestedInput
    games?: FunGameUpdateManyWithoutPollsNestedInput
  }

  export type PollUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: VoteUncheckedUpdateManyWithoutPollNestedInput
    games?: FunGameUncheckedUpdateManyWithoutPollsNestedInput
  }

  export type PollCreateManyInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winnerId?: string | null
  }

  export type PollUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PollUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VoteCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    poll: PollCreateNestedOneWithoutVotesInput
    game: FunGameCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateInput = {
    id?: string
    userId: string
    gameId: string
    pollId: string
    createdAt?: Date | string
  }

  export type VoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poll?: PollUpdateOneRequiredWithoutVotesNestedInput
    game?: FunGameUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    pollId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyInput = {
    id?: string
    userId: string
    gameId: string
    pollId: string
    createdAt?: Date | string
  }

  export type VoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    pollId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoNameCreateInput = {
    name: string
    color?: string | null
    type?: string | null
    size?: string | null
    style?: string | null
    approved?: boolean
    submittedBy?: string | null
    createdAt?: Date | string
  }

  export type DinoNameUncheckedCreateInput = {
    id?: number
    name: string
    color?: string | null
    type?: string | null
    size?: string | null
    style?: string | null
    approved?: boolean
    submittedBy?: string | null
    createdAt?: Date | string
  }

  export type DinoNameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    style?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoNameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    style?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoNameCreateManyInput = {
    id?: number
    name: string
    color?: string | null
    type?: string | null
    size?: string | null
    style?: string | null
    approved?: boolean
    submittedBy?: string | null
    createdAt?: Date | string
  }

  export type DinoNameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    style?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoNameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    color?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    style?: NullableStringFieldUpdateOperationsInput | string | null
    approved?: BoolFieldUpdateOperationsInput | boolean
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoStatsCreateInput = {
    totalUses?: number
    totalRerolls?: number
    updatedAt?: Date | string
  }

  export type DinoStatsUncheckedCreateInput = {
    id?: number
    totalUses?: number
    totalRerolls?: number
    updatedAt?: Date | string
  }

  export type DinoStatsUpdateInput = {
    totalUses?: IntFieldUpdateOperationsInput | number
    totalRerolls?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalUses?: IntFieldUpdateOperationsInput | number
    totalRerolls?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoStatsCreateManyInput = {
    id?: number
    totalUses?: number
    totalRerolls?: number
    updatedAt?: Date | string
  }

  export type DinoStatsUpdateManyMutationInput = {
    totalUses?: IntFieldUpdateOperationsInput | number
    totalRerolls?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DinoStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalUses?: IntFieldUpdateOperationsInput | number
    totalRerolls?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GlobalStatsCreateInput = {
    id?: string
    timestamp?: Date | string
    totalGuilds?: number
    lastBotOnline?: Date | string | null
    dbSizeMB?: number
    totalDinoSuggestions?: number
    totalDinoApproved?: number
    totalFeedbacks?: number
    totalVotingsStarted?: number
    totalVotesCast?: number
    totalGamesInDB?: number
    totalFungamesViews?: number
  }

  export type GlobalStatsUncheckedCreateInput = {
    id?: string
    timestamp?: Date | string
    totalGuilds?: number
    lastBotOnline?: Date | string | null
    dbSizeMB?: number
    totalDinoSuggestions?: number
    totalDinoApproved?: number
    totalFeedbacks?: number
    totalVotingsStarted?: number
    totalVotesCast?: number
    totalGamesInDB?: number
    totalFungamesViews?: number
  }

  export type GlobalStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalGuilds?: IntFieldUpdateOperationsInput | number
    lastBotOnline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbSizeMB?: FloatFieldUpdateOperationsInput | number
    totalDinoSuggestions?: IntFieldUpdateOperationsInput | number
    totalDinoApproved?: IntFieldUpdateOperationsInput | number
    totalFeedbacks?: IntFieldUpdateOperationsInput | number
    totalVotingsStarted?: IntFieldUpdateOperationsInput | number
    totalVotesCast?: IntFieldUpdateOperationsInput | number
    totalGamesInDB?: IntFieldUpdateOperationsInput | number
    totalFungamesViews?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalGuilds?: IntFieldUpdateOperationsInput | number
    lastBotOnline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbSizeMB?: FloatFieldUpdateOperationsInput | number
    totalDinoSuggestions?: IntFieldUpdateOperationsInput | number
    totalDinoApproved?: IntFieldUpdateOperationsInput | number
    totalFeedbacks?: IntFieldUpdateOperationsInput | number
    totalVotingsStarted?: IntFieldUpdateOperationsInput | number
    totalVotesCast?: IntFieldUpdateOperationsInput | number
    totalGamesInDB?: IntFieldUpdateOperationsInput | number
    totalFungamesViews?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatsCreateManyInput = {
    id?: string
    timestamp?: Date | string
    totalGuilds?: number
    lastBotOnline?: Date | string | null
    dbSizeMB?: number
    totalDinoSuggestions?: number
    totalDinoApproved?: number
    totalFeedbacks?: number
    totalVotingsStarted?: number
    totalVotesCast?: number
    totalGamesInDB?: number
    totalFungamesViews?: number
  }

  export type GlobalStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalGuilds?: IntFieldUpdateOperationsInput | number
    lastBotOnline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbSizeMB?: FloatFieldUpdateOperationsInput | number
    totalDinoSuggestions?: IntFieldUpdateOperationsInput | number
    totalDinoApproved?: IntFieldUpdateOperationsInput | number
    totalFeedbacks?: IntFieldUpdateOperationsInput | number
    totalVotingsStarted?: IntFieldUpdateOperationsInput | number
    totalVotesCast?: IntFieldUpdateOperationsInput | number
    totalGamesInDB?: IntFieldUpdateOperationsInput | number
    totalFungamesViews?: IntFieldUpdateOperationsInput | number
  }

  export type GlobalStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    totalGuilds?: IntFieldUpdateOperationsInput | number
    lastBotOnline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbSizeMB?: FloatFieldUpdateOperationsInput | number
    totalDinoSuggestions?: IntFieldUpdateOperationsInput | number
    totalDinoApproved?: IntFieldUpdateOperationsInput | number
    totalFeedbacks?: IntFieldUpdateOperationsInput | number
    totalVotingsStarted?: IntFieldUpdateOperationsInput | number
    totalVotesCast?: IntFieldUpdateOperationsInput | number
    totalGamesInDB?: IntFieldUpdateOperationsInput | number
    totalFungamesViews?: IntFieldUpdateOperationsInput | number
  }

  export type GuildStatsCreateInput = {
    id?: string
    guildId: string
    timestamp?: Date | string
    dinoSuggestions?: number
    dinoApproved?: number
    feedbacks?: number
    votingsStarted?: number
    votesCast?: number
    gamesInDB?: number
    fungamesViews?: number
    memberCount?: number
    memberOnline?: number
    textChannelCount?: number
    voiceChannelCount?: number
    roleCount?: number
    createdAt?: Date | string | null
    newMembers24h?: number
  }

  export type GuildStatsUncheckedCreateInput = {
    id?: string
    guildId: string
    timestamp?: Date | string
    dinoSuggestions?: number
    dinoApproved?: number
    feedbacks?: number
    votingsStarted?: number
    votesCast?: number
    gamesInDB?: number
    fungamesViews?: number
    memberCount?: number
    memberOnline?: number
    textChannelCount?: number
    voiceChannelCount?: number
    roleCount?: number
    createdAt?: Date | string | null
    newMembers24h?: number
  }

  export type GuildStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    dinoSuggestions?: IntFieldUpdateOperationsInput | number
    dinoApproved?: IntFieldUpdateOperationsInput | number
    feedbacks?: IntFieldUpdateOperationsInput | number
    votingsStarted?: IntFieldUpdateOperationsInput | number
    votesCast?: IntFieldUpdateOperationsInput | number
    gamesInDB?: IntFieldUpdateOperationsInput | number
    fungamesViews?: IntFieldUpdateOperationsInput | number
    memberCount?: IntFieldUpdateOperationsInput | number
    memberOnline?: IntFieldUpdateOperationsInput | number
    textChannelCount?: IntFieldUpdateOperationsInput | number
    voiceChannelCount?: IntFieldUpdateOperationsInput | number
    roleCount?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newMembers24h?: IntFieldUpdateOperationsInput | number
  }

  export type GuildStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    dinoSuggestions?: IntFieldUpdateOperationsInput | number
    dinoApproved?: IntFieldUpdateOperationsInput | number
    feedbacks?: IntFieldUpdateOperationsInput | number
    votingsStarted?: IntFieldUpdateOperationsInput | number
    votesCast?: IntFieldUpdateOperationsInput | number
    gamesInDB?: IntFieldUpdateOperationsInput | number
    fungamesViews?: IntFieldUpdateOperationsInput | number
    memberCount?: IntFieldUpdateOperationsInput | number
    memberOnline?: IntFieldUpdateOperationsInput | number
    textChannelCount?: IntFieldUpdateOperationsInput | number
    voiceChannelCount?: IntFieldUpdateOperationsInput | number
    roleCount?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newMembers24h?: IntFieldUpdateOperationsInput | number
  }

  export type GuildStatsCreateManyInput = {
    id?: string
    guildId: string
    timestamp?: Date | string
    dinoSuggestions?: number
    dinoApproved?: number
    feedbacks?: number
    votingsStarted?: number
    votesCast?: number
    gamesInDB?: number
    fungamesViews?: number
    memberCount?: number
    memberOnline?: number
    textChannelCount?: number
    voiceChannelCount?: number
    roleCount?: number
    createdAt?: Date | string | null
    newMembers24h?: number
  }

  export type GuildStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    dinoSuggestions?: IntFieldUpdateOperationsInput | number
    dinoApproved?: IntFieldUpdateOperationsInput | number
    feedbacks?: IntFieldUpdateOperationsInput | number
    votingsStarted?: IntFieldUpdateOperationsInput | number
    votesCast?: IntFieldUpdateOperationsInput | number
    gamesInDB?: IntFieldUpdateOperationsInput | number
    fungamesViews?: IntFieldUpdateOperationsInput | number
    memberCount?: IntFieldUpdateOperationsInput | number
    memberOnline?: IntFieldUpdateOperationsInput | number
    textChannelCount?: IntFieldUpdateOperationsInput | number
    voiceChannelCount?: IntFieldUpdateOperationsInput | number
    roleCount?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newMembers24h?: IntFieldUpdateOperationsInput | number
  }

  export type GuildStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    dinoSuggestions?: IntFieldUpdateOperationsInput | number
    dinoApproved?: IntFieldUpdateOperationsInput | number
    feedbacks?: IntFieldUpdateOperationsInput | number
    votingsStarted?: IntFieldUpdateOperationsInput | number
    votesCast?: IntFieldUpdateOperationsInput | number
    gamesInDB?: IntFieldUpdateOperationsInput | number
    fungamesViews?: IntFieldUpdateOperationsInput | number
    memberCount?: IntFieldUpdateOperationsInput | number
    memberOnline?: IntFieldUpdateOperationsInput | number
    textChannelCount?: IntFieldUpdateOperationsInput | number
    voiceChannelCount?: IntFieldUpdateOperationsInput | number
    roleCount?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    newMembers24h?: IntFieldUpdateOperationsInput | number
  }

  export type VotingStatsCreateInput = {
    id?: string
    votingType: string
    startedAt: Date | string
    endedAt?: Date | string | null
    votesCast?: number
    guildId?: string | null
  }

  export type VotingStatsUncheckedCreateInput = {
    id?: string
    votingType: string
    startedAt: Date | string
    endedAt?: Date | string | null
    votesCast?: number
    guildId?: string | null
  }

  export type VotingStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    votingType?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votesCast?: IntFieldUpdateOperationsInput | number
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VotingStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    votingType?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votesCast?: IntFieldUpdateOperationsInput | number
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VotingStatsCreateManyInput = {
    id?: string
    votingType: string
    startedAt: Date | string
    endedAt?: Date | string | null
    votesCast?: number
    guildId?: string | null
  }

  export type VotingStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    votingType?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votesCast?: IntFieldUpdateOperationsInput | number
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VotingStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    votingType?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votesCast?: IntFieldUpdateOperationsInput | number
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackStatsCreateInput = {
    id?: string
    createdAt?: Date | string
    guildId?: string | null
    submittedBy?: string | null
  }

  export type FeedbackStatsUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    guildId?: string | null
    submittedBy?: string | null
  }

  export type FeedbackStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackStatsCreateManyInput = {
    id?: string
    createdAt?: Date | string
    guildId?: string | null
    submittedBy?: string | null
  }

  export type FeedbackStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guildId?: NullableStringFieldUpdateOperationsInput | string | null
    submittedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type YouTubePostCreateInput = {
    id?: string
    videoId: string
    guildId: string
    postedAt?: Date | string
  }

  export type YouTubePostUncheckedCreateInput = {
    id?: string
    videoId: string
    guildId: string
    postedAt?: Date | string
  }

  export type YouTubePostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YouTubePostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YouTubePostCreateManyInput = {
    id?: string
    videoId: string
    guildId: string
    postedAt?: Date | string
  }

  export type YouTubePostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YouTubePostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    postedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    discordId?: SortOrder
    name?: SortOrder
    optIn?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    discordId?: SortOrder
    name?: SortOrder
    optIn?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    discordId?: SortOrder
    name?: SortOrder
    optIn?: SortOrder
    joinedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CommandStatCountOrderByAggregateInput = {
    command?: SortOrder
    count?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommandStatAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type CommandStatMaxOrderByAggregateInput = {
    command?: SortOrder
    count?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommandStatMinOrderByAggregateInput = {
    command?: SortOrder
    count?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommandStatSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    protocolNo?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    importance?: SortOrder
    module?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    protocolNo?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    protocolNo?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    importance?: SortOrder
    module?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    protocolNo?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    serverId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    importance?: SortOrder
    module?: SortOrder
    fileUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    protocolNo?: SortOrder
  }

  export type PollListRelationFilter = {
    every?: PollWhereInput
    some?: PollWhereInput
    none?: PollWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type PollOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FunGameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    emoji?: SortOrder
    isFree?: SortOrder
  }

  export type FunGameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    emoji?: SortOrder
    isFree?: SortOrder
  }

  export type FunGameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    emoji?: SortOrder
    isFree?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FunGameNullableScalarRelationFilter = {
    is?: FunGameWhereInput | null
    isNot?: FunGameWhereInput | null
  }

  export type FunGameListRelationFilter = {
    every?: FunGameWhereInput
    some?: FunGameWhereInput
    none?: FunGameWhereInput
  }

  export type FunGameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PollCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    type?: SortOrder
    pollNumber?: SortOrder
    messageId?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrder
    winnerId?: SortOrder
  }

  export type PollAvgOrderByAggregateInput = {
    pollNumber?: SortOrder
  }

  export type PollMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    type?: SortOrder
    pollNumber?: SortOrder
    messageId?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrder
    winnerId?: SortOrder
  }

  export type PollMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    type?: SortOrder
    pollNumber?: SortOrder
    messageId?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrder
    winnerId?: SortOrder
  }

  export type PollSumOrderByAggregateInput = {
    pollNumber?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PollScalarRelationFilter = {
    is?: PollWhereInput
    isNot?: PollWhereInput
  }

  export type FunGameScalarRelationFilter = {
    is?: FunGameWhereInput
    isNot?: FunGameWhereInput
  }

  export type VoteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    pollId?: SortOrder
    createdAt?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    pollId?: SortOrder
    createdAt?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    pollId?: SortOrder
    createdAt?: SortOrder
  }

  export type DinoNameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    type?: SortOrder
    size?: SortOrder
    style?: SortOrder
    approved?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type DinoNameAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DinoNameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    type?: SortOrder
    size?: SortOrder
    style?: SortOrder
    approved?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type DinoNameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    type?: SortOrder
    size?: SortOrder
    style?: SortOrder
    approved?: SortOrder
    submittedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type DinoNameSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DinoStatsCountOrderByAggregateInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
    updatedAt?: SortOrder
  }

  export type DinoStatsAvgOrderByAggregateInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
  }

  export type DinoStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
    updatedAt?: SortOrder
  }

  export type DinoStatsMinOrderByAggregateInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
    updatedAt?: SortOrder
  }

  export type DinoStatsSumOrderByAggregateInput = {
    id?: SortOrder
    totalUses?: SortOrder
    totalRerolls?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type GlobalStatsCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    totalGuilds?: SortOrder
    lastBotOnline?: SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
  }

  export type GlobalStatsAvgOrderByAggregateInput = {
    totalGuilds?: SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
  }

  export type GlobalStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    totalGuilds?: SortOrder
    lastBotOnline?: SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
  }

  export type GlobalStatsMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    totalGuilds?: SortOrder
    lastBotOnline?: SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
  }

  export type GlobalStatsSumOrderByAggregateInput = {
    totalGuilds?: SortOrder
    dbSizeMB?: SortOrder
    totalDinoSuggestions?: SortOrder
    totalDinoApproved?: SortOrder
    totalFeedbacks?: SortOrder
    totalVotingsStarted?: SortOrder
    totalVotesCast?: SortOrder
    totalGamesInDB?: SortOrder
    totalFungamesViews?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type GuildStatsCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    timestamp?: SortOrder
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    createdAt?: SortOrder
    newMembers24h?: SortOrder
  }

  export type GuildStatsAvgOrderByAggregateInput = {
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    newMembers24h?: SortOrder
  }

  export type GuildStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    timestamp?: SortOrder
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    createdAt?: SortOrder
    newMembers24h?: SortOrder
  }

  export type GuildStatsMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    timestamp?: SortOrder
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    createdAt?: SortOrder
    newMembers24h?: SortOrder
  }

  export type GuildStatsSumOrderByAggregateInput = {
    dinoSuggestions?: SortOrder
    dinoApproved?: SortOrder
    feedbacks?: SortOrder
    votingsStarted?: SortOrder
    votesCast?: SortOrder
    gamesInDB?: SortOrder
    fungamesViews?: SortOrder
    memberCount?: SortOrder
    memberOnline?: SortOrder
    textChannelCount?: SortOrder
    voiceChannelCount?: SortOrder
    roleCount?: SortOrder
    newMembers24h?: SortOrder
  }

  export type VotingStatsCountOrderByAggregateInput = {
    id?: SortOrder
    votingType?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    votesCast?: SortOrder
    guildId?: SortOrder
  }

  export type VotingStatsAvgOrderByAggregateInput = {
    votesCast?: SortOrder
  }

  export type VotingStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    votingType?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    votesCast?: SortOrder
    guildId?: SortOrder
  }

  export type VotingStatsMinOrderByAggregateInput = {
    id?: SortOrder
    votingType?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    votesCast?: SortOrder
    guildId?: SortOrder
  }

  export type VotingStatsSumOrderByAggregateInput = {
    votesCast?: SortOrder
  }

  export type FeedbackStatsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    submittedBy?: SortOrder
  }

  export type FeedbackStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    submittedBy?: SortOrder
  }

  export type FeedbackStatsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    guildId?: SortOrder
    submittedBy?: SortOrder
  }

  export type YouTubePostCountOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    guildId?: SortOrder
    postedAt?: SortOrder
  }

  export type YouTubePostMaxOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    guildId?: SortOrder
    postedAt?: SortOrder
  }

  export type YouTubePostMinOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    guildId?: SortOrder
    postedAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PollCreateNestedManyWithoutWinnerInput = {
    create?: XOR<PollCreateWithoutWinnerInput, PollUncheckedCreateWithoutWinnerInput> | PollCreateWithoutWinnerInput[] | PollUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: PollCreateOrConnectWithoutWinnerInput | PollCreateOrConnectWithoutWinnerInput[]
    createMany?: PollCreateManyWinnerInputEnvelope
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
  }

  export type VoteCreateNestedManyWithoutGameInput = {
    create?: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput> | VoteCreateWithoutGameInput[] | VoteUncheckedCreateWithoutGameInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutGameInput | VoteCreateOrConnectWithoutGameInput[]
    createMany?: VoteCreateManyGameInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type PollCreateNestedManyWithoutGamesInput = {
    create?: XOR<PollCreateWithoutGamesInput, PollUncheckedCreateWithoutGamesInput> | PollCreateWithoutGamesInput[] | PollUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: PollCreateOrConnectWithoutGamesInput | PollCreateOrConnectWithoutGamesInput[]
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
  }

  export type PollUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<PollCreateWithoutWinnerInput, PollUncheckedCreateWithoutWinnerInput> | PollCreateWithoutWinnerInput[] | PollUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: PollCreateOrConnectWithoutWinnerInput | PollCreateOrConnectWithoutWinnerInput[]
    createMany?: PollCreateManyWinnerInputEnvelope
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput> | VoteCreateWithoutGameInput[] | VoteUncheckedCreateWithoutGameInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutGameInput | VoteCreateOrConnectWithoutGameInput[]
    createMany?: VoteCreateManyGameInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type PollUncheckedCreateNestedManyWithoutGamesInput = {
    create?: XOR<PollCreateWithoutGamesInput, PollUncheckedCreateWithoutGamesInput> | PollCreateWithoutGamesInput[] | PollUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: PollCreateOrConnectWithoutGamesInput | PollCreateOrConnectWithoutGamesInput[]
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
  }

  export type PollUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<PollCreateWithoutWinnerInput, PollUncheckedCreateWithoutWinnerInput> | PollCreateWithoutWinnerInput[] | PollUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: PollCreateOrConnectWithoutWinnerInput | PollCreateOrConnectWithoutWinnerInput[]
    upsert?: PollUpsertWithWhereUniqueWithoutWinnerInput | PollUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: PollCreateManyWinnerInputEnvelope
    set?: PollWhereUniqueInput | PollWhereUniqueInput[]
    disconnect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    delete?: PollWhereUniqueInput | PollWhereUniqueInput[]
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    update?: PollUpdateWithWhereUniqueWithoutWinnerInput | PollUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: PollUpdateManyWithWhereWithoutWinnerInput | PollUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: PollScalarWhereInput | PollScalarWhereInput[]
  }

  export type VoteUpdateManyWithoutGameNestedInput = {
    create?: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput> | VoteCreateWithoutGameInput[] | VoteUncheckedCreateWithoutGameInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutGameInput | VoteCreateOrConnectWithoutGameInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutGameInput | VoteUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: VoteCreateManyGameInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutGameInput | VoteUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutGameInput | VoteUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type PollUpdateManyWithoutGamesNestedInput = {
    create?: XOR<PollCreateWithoutGamesInput, PollUncheckedCreateWithoutGamesInput> | PollCreateWithoutGamesInput[] | PollUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: PollCreateOrConnectWithoutGamesInput | PollCreateOrConnectWithoutGamesInput[]
    upsert?: PollUpsertWithWhereUniqueWithoutGamesInput | PollUpsertWithWhereUniqueWithoutGamesInput[]
    set?: PollWhereUniqueInput | PollWhereUniqueInput[]
    disconnect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    delete?: PollWhereUniqueInput | PollWhereUniqueInput[]
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    update?: PollUpdateWithWhereUniqueWithoutGamesInput | PollUpdateWithWhereUniqueWithoutGamesInput[]
    updateMany?: PollUpdateManyWithWhereWithoutGamesInput | PollUpdateManyWithWhereWithoutGamesInput[]
    deleteMany?: PollScalarWhereInput | PollScalarWhereInput[]
  }

  export type PollUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<PollCreateWithoutWinnerInput, PollUncheckedCreateWithoutWinnerInput> | PollCreateWithoutWinnerInput[] | PollUncheckedCreateWithoutWinnerInput[]
    connectOrCreate?: PollCreateOrConnectWithoutWinnerInput | PollCreateOrConnectWithoutWinnerInput[]
    upsert?: PollUpsertWithWhereUniqueWithoutWinnerInput | PollUpsertWithWhereUniqueWithoutWinnerInput[]
    createMany?: PollCreateManyWinnerInputEnvelope
    set?: PollWhereUniqueInput | PollWhereUniqueInput[]
    disconnect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    delete?: PollWhereUniqueInput | PollWhereUniqueInput[]
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    update?: PollUpdateWithWhereUniqueWithoutWinnerInput | PollUpdateWithWhereUniqueWithoutWinnerInput[]
    updateMany?: PollUpdateManyWithWhereWithoutWinnerInput | PollUpdateManyWithWhereWithoutWinnerInput[]
    deleteMany?: PollScalarWhereInput | PollScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput> | VoteCreateWithoutGameInput[] | VoteUncheckedCreateWithoutGameInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutGameInput | VoteCreateOrConnectWithoutGameInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutGameInput | VoteUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: VoteCreateManyGameInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutGameInput | VoteUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutGameInput | VoteUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type PollUncheckedUpdateManyWithoutGamesNestedInput = {
    create?: XOR<PollCreateWithoutGamesInput, PollUncheckedCreateWithoutGamesInput> | PollCreateWithoutGamesInput[] | PollUncheckedCreateWithoutGamesInput[]
    connectOrCreate?: PollCreateOrConnectWithoutGamesInput | PollCreateOrConnectWithoutGamesInput[]
    upsert?: PollUpsertWithWhereUniqueWithoutGamesInput | PollUpsertWithWhereUniqueWithoutGamesInput[]
    set?: PollWhereUniqueInput | PollWhereUniqueInput[]
    disconnect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    delete?: PollWhereUniqueInput | PollWhereUniqueInput[]
    connect?: PollWhereUniqueInput | PollWhereUniqueInput[]
    update?: PollUpdateWithWhereUniqueWithoutGamesInput | PollUpdateWithWhereUniqueWithoutGamesInput[]
    updateMany?: PollUpdateManyWithWhereWithoutGamesInput | PollUpdateManyWithWhereWithoutGamesInput[]
    deleteMany?: PollScalarWhereInput | PollScalarWhereInput[]
  }

  export type FunGameCreateNestedOneWithoutWonPollsInput = {
    create?: XOR<FunGameCreateWithoutWonPollsInput, FunGameUncheckedCreateWithoutWonPollsInput>
    connectOrCreate?: FunGameCreateOrConnectWithoutWonPollsInput
    connect?: FunGameWhereUniqueInput
  }

  export type VoteCreateNestedManyWithoutPollInput = {
    create?: XOR<VoteCreateWithoutPollInput, VoteUncheckedCreateWithoutPollInput> | VoteCreateWithoutPollInput[] | VoteUncheckedCreateWithoutPollInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutPollInput | VoteCreateOrConnectWithoutPollInput[]
    createMany?: VoteCreateManyPollInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type FunGameCreateNestedManyWithoutPollsInput = {
    create?: XOR<FunGameCreateWithoutPollsInput, FunGameUncheckedCreateWithoutPollsInput> | FunGameCreateWithoutPollsInput[] | FunGameUncheckedCreateWithoutPollsInput[]
    connectOrCreate?: FunGameCreateOrConnectWithoutPollsInput | FunGameCreateOrConnectWithoutPollsInput[]
    connect?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutPollInput = {
    create?: XOR<VoteCreateWithoutPollInput, VoteUncheckedCreateWithoutPollInput> | VoteCreateWithoutPollInput[] | VoteUncheckedCreateWithoutPollInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutPollInput | VoteCreateOrConnectWithoutPollInput[]
    createMany?: VoteCreateManyPollInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type FunGameUncheckedCreateNestedManyWithoutPollsInput = {
    create?: XOR<FunGameCreateWithoutPollsInput, FunGameUncheckedCreateWithoutPollsInput> | FunGameCreateWithoutPollsInput[] | FunGameUncheckedCreateWithoutPollsInput[]
    connectOrCreate?: FunGameCreateOrConnectWithoutPollsInput | FunGameCreateOrConnectWithoutPollsInput[]
    connect?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FunGameUpdateOneWithoutWonPollsNestedInput = {
    create?: XOR<FunGameCreateWithoutWonPollsInput, FunGameUncheckedCreateWithoutWonPollsInput>
    connectOrCreate?: FunGameCreateOrConnectWithoutWonPollsInput
    upsert?: FunGameUpsertWithoutWonPollsInput
    disconnect?: FunGameWhereInput | boolean
    delete?: FunGameWhereInput | boolean
    connect?: FunGameWhereUniqueInput
    update?: XOR<XOR<FunGameUpdateToOneWithWhereWithoutWonPollsInput, FunGameUpdateWithoutWonPollsInput>, FunGameUncheckedUpdateWithoutWonPollsInput>
  }

  export type VoteUpdateManyWithoutPollNestedInput = {
    create?: XOR<VoteCreateWithoutPollInput, VoteUncheckedCreateWithoutPollInput> | VoteCreateWithoutPollInput[] | VoteUncheckedCreateWithoutPollInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutPollInput | VoteCreateOrConnectWithoutPollInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutPollInput | VoteUpsertWithWhereUniqueWithoutPollInput[]
    createMany?: VoteCreateManyPollInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutPollInput | VoteUpdateWithWhereUniqueWithoutPollInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutPollInput | VoteUpdateManyWithWhereWithoutPollInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type FunGameUpdateManyWithoutPollsNestedInput = {
    create?: XOR<FunGameCreateWithoutPollsInput, FunGameUncheckedCreateWithoutPollsInput> | FunGameCreateWithoutPollsInput[] | FunGameUncheckedCreateWithoutPollsInput[]
    connectOrCreate?: FunGameCreateOrConnectWithoutPollsInput | FunGameCreateOrConnectWithoutPollsInput[]
    upsert?: FunGameUpsertWithWhereUniqueWithoutPollsInput | FunGameUpsertWithWhereUniqueWithoutPollsInput[]
    set?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    disconnect?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    delete?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    connect?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    update?: FunGameUpdateWithWhereUniqueWithoutPollsInput | FunGameUpdateWithWhereUniqueWithoutPollsInput[]
    updateMany?: FunGameUpdateManyWithWhereWithoutPollsInput | FunGameUpdateManyWithWhereWithoutPollsInput[]
    deleteMany?: FunGameScalarWhereInput | FunGameScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutPollNestedInput = {
    create?: XOR<VoteCreateWithoutPollInput, VoteUncheckedCreateWithoutPollInput> | VoteCreateWithoutPollInput[] | VoteUncheckedCreateWithoutPollInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutPollInput | VoteCreateOrConnectWithoutPollInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutPollInput | VoteUpsertWithWhereUniqueWithoutPollInput[]
    createMany?: VoteCreateManyPollInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutPollInput | VoteUpdateWithWhereUniqueWithoutPollInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutPollInput | VoteUpdateManyWithWhereWithoutPollInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type FunGameUncheckedUpdateManyWithoutPollsNestedInput = {
    create?: XOR<FunGameCreateWithoutPollsInput, FunGameUncheckedCreateWithoutPollsInput> | FunGameCreateWithoutPollsInput[] | FunGameUncheckedCreateWithoutPollsInput[]
    connectOrCreate?: FunGameCreateOrConnectWithoutPollsInput | FunGameCreateOrConnectWithoutPollsInput[]
    upsert?: FunGameUpsertWithWhereUniqueWithoutPollsInput | FunGameUpsertWithWhereUniqueWithoutPollsInput[]
    set?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    disconnect?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    delete?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    connect?: FunGameWhereUniqueInput | FunGameWhereUniqueInput[]
    update?: FunGameUpdateWithWhereUniqueWithoutPollsInput | FunGameUpdateWithWhereUniqueWithoutPollsInput[]
    updateMany?: FunGameUpdateManyWithWhereWithoutPollsInput | FunGameUpdateManyWithWhereWithoutPollsInput[]
    deleteMany?: FunGameScalarWhereInput | FunGameScalarWhereInput[]
  }

  export type PollCreateNestedOneWithoutVotesInput = {
    create?: XOR<PollCreateWithoutVotesInput, PollUncheckedCreateWithoutVotesInput>
    connectOrCreate?: PollCreateOrConnectWithoutVotesInput
    connect?: PollWhereUniqueInput
  }

  export type FunGameCreateNestedOneWithoutVotesInput = {
    create?: XOR<FunGameCreateWithoutVotesInput, FunGameUncheckedCreateWithoutVotesInput>
    connectOrCreate?: FunGameCreateOrConnectWithoutVotesInput
    connect?: FunGameWhereUniqueInput
  }

  export type PollUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<PollCreateWithoutVotesInput, PollUncheckedCreateWithoutVotesInput>
    connectOrCreate?: PollCreateOrConnectWithoutVotesInput
    upsert?: PollUpsertWithoutVotesInput
    connect?: PollWhereUniqueInput
    update?: XOR<XOR<PollUpdateToOneWithWhereWithoutVotesInput, PollUpdateWithoutVotesInput>, PollUncheckedUpdateWithoutVotesInput>
  }

  export type FunGameUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<FunGameCreateWithoutVotesInput, FunGameUncheckedCreateWithoutVotesInput>
    connectOrCreate?: FunGameCreateOrConnectWithoutVotesInput
    upsert?: FunGameUpsertWithoutVotesInput
    connect?: FunGameWhereUniqueInput
    update?: XOR<XOR<FunGameUpdateToOneWithWhereWithoutVotesInput, FunGameUpdateWithoutVotesInput>, FunGameUncheckedUpdateWithoutVotesInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PollCreateWithoutWinnerInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    votes?: VoteCreateNestedManyWithoutPollInput
    games?: FunGameCreateNestedManyWithoutPollsInput
  }

  export type PollUncheckedCreateWithoutWinnerInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    votes?: VoteUncheckedCreateNestedManyWithoutPollInput
    games?: FunGameUncheckedCreateNestedManyWithoutPollsInput
  }

  export type PollCreateOrConnectWithoutWinnerInput = {
    where: PollWhereUniqueInput
    create: XOR<PollCreateWithoutWinnerInput, PollUncheckedCreateWithoutWinnerInput>
  }

  export type PollCreateManyWinnerInputEnvelope = {
    data: PollCreateManyWinnerInput | PollCreateManyWinnerInput[]
  }

  export type VoteCreateWithoutGameInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    poll: PollCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutGameInput = {
    id?: string
    userId: string
    pollId: string
    createdAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutGameInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput>
  }

  export type VoteCreateManyGameInputEnvelope = {
    data: VoteCreateManyGameInput | VoteCreateManyGameInput[]
  }

  export type PollCreateWithoutGamesInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winner?: FunGameCreateNestedOneWithoutWonPollsInput
    votes?: VoteCreateNestedManyWithoutPollInput
  }

  export type PollUncheckedCreateWithoutGamesInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winnerId?: string | null
    votes?: VoteUncheckedCreateNestedManyWithoutPollInput
  }

  export type PollCreateOrConnectWithoutGamesInput = {
    where: PollWhereUniqueInput
    create: XOR<PollCreateWithoutGamesInput, PollUncheckedCreateWithoutGamesInput>
  }

  export type PollUpsertWithWhereUniqueWithoutWinnerInput = {
    where: PollWhereUniqueInput
    update: XOR<PollUpdateWithoutWinnerInput, PollUncheckedUpdateWithoutWinnerInput>
    create: XOR<PollCreateWithoutWinnerInput, PollUncheckedCreateWithoutWinnerInput>
  }

  export type PollUpdateWithWhereUniqueWithoutWinnerInput = {
    where: PollWhereUniqueInput
    data: XOR<PollUpdateWithoutWinnerInput, PollUncheckedUpdateWithoutWinnerInput>
  }

  export type PollUpdateManyWithWhereWithoutWinnerInput = {
    where: PollScalarWhereInput
    data: XOR<PollUpdateManyMutationInput, PollUncheckedUpdateManyWithoutWinnerInput>
  }

  export type PollScalarWhereInput = {
    AND?: PollScalarWhereInput | PollScalarWhereInput[]
    OR?: PollScalarWhereInput[]
    NOT?: PollScalarWhereInput | PollScalarWhereInput[]
    id?: StringFilter<"Poll"> | string
    question?: StringFilter<"Poll"> | string
    type?: StringFilter<"Poll"> | string
    pollNumber?: IntFilter<"Poll"> | number
    messageId?: StringFilter<"Poll"> | string
    createdAt?: DateTimeFilter<"Poll"> | Date | string
    endedAt?: DateTimeNullableFilter<"Poll"> | Date | string | null
    winnerId?: StringNullableFilter<"Poll"> | string | null
  }

  export type VoteUpsertWithWhereUniqueWithoutGameInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutGameInput, VoteUncheckedUpdateWithoutGameInput>
    create: XOR<VoteCreateWithoutGameInput, VoteUncheckedCreateWithoutGameInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutGameInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutGameInput, VoteUncheckedUpdateWithoutGameInput>
  }

  export type VoteUpdateManyWithWhereWithoutGameInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutGameInput>
  }

  export type VoteScalarWhereInput = {
    AND?: VoteScalarWhereInput | VoteScalarWhereInput[]
    OR?: VoteScalarWhereInput[]
    NOT?: VoteScalarWhereInput | VoteScalarWhereInput[]
    id?: StringFilter<"Vote"> | string
    userId?: StringFilter<"Vote"> | string
    gameId?: StringFilter<"Vote"> | string
    pollId?: StringFilter<"Vote"> | string
    createdAt?: DateTimeFilter<"Vote"> | Date | string
  }

  export type PollUpsertWithWhereUniqueWithoutGamesInput = {
    where: PollWhereUniqueInput
    update: XOR<PollUpdateWithoutGamesInput, PollUncheckedUpdateWithoutGamesInput>
    create: XOR<PollCreateWithoutGamesInput, PollUncheckedCreateWithoutGamesInput>
  }

  export type PollUpdateWithWhereUniqueWithoutGamesInput = {
    where: PollWhereUniqueInput
    data: XOR<PollUpdateWithoutGamesInput, PollUncheckedUpdateWithoutGamesInput>
  }

  export type PollUpdateManyWithWhereWithoutGamesInput = {
    where: PollScalarWhereInput
    data: XOR<PollUpdateManyMutationInput, PollUncheckedUpdateManyWithoutGamesInput>
  }

  export type FunGameCreateWithoutWonPollsInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    votes?: VoteCreateNestedManyWithoutGameInput
    polls?: PollCreateNestedManyWithoutGamesInput
  }

  export type FunGameUncheckedCreateWithoutWonPollsInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    votes?: VoteUncheckedCreateNestedManyWithoutGameInput
    polls?: PollUncheckedCreateNestedManyWithoutGamesInput
  }

  export type FunGameCreateOrConnectWithoutWonPollsInput = {
    where: FunGameWhereUniqueInput
    create: XOR<FunGameCreateWithoutWonPollsInput, FunGameUncheckedCreateWithoutWonPollsInput>
  }

  export type VoteCreateWithoutPollInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    game: FunGameCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutPollInput = {
    id?: string
    userId: string
    gameId: string
    createdAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutPollInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutPollInput, VoteUncheckedCreateWithoutPollInput>
  }

  export type VoteCreateManyPollInputEnvelope = {
    data: VoteCreateManyPollInput | VoteCreateManyPollInput[]
  }

  export type FunGameCreateWithoutPollsInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    wonPolls?: PollCreateNestedManyWithoutWinnerInput
    votes?: VoteCreateNestedManyWithoutGameInput
  }

  export type FunGameUncheckedCreateWithoutPollsInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    wonPolls?: PollUncheckedCreateNestedManyWithoutWinnerInput
    votes?: VoteUncheckedCreateNestedManyWithoutGameInput
  }

  export type FunGameCreateOrConnectWithoutPollsInput = {
    where: FunGameWhereUniqueInput
    create: XOR<FunGameCreateWithoutPollsInput, FunGameUncheckedCreateWithoutPollsInput>
  }

  export type FunGameUpsertWithoutWonPollsInput = {
    update: XOR<FunGameUpdateWithoutWonPollsInput, FunGameUncheckedUpdateWithoutWonPollsInput>
    create: XOR<FunGameCreateWithoutWonPollsInput, FunGameUncheckedCreateWithoutWonPollsInput>
    where?: FunGameWhereInput
  }

  export type FunGameUpdateToOneWithWhereWithoutWonPollsInput = {
    where?: FunGameWhereInput
    data: XOR<FunGameUpdateWithoutWonPollsInput, FunGameUncheckedUpdateWithoutWonPollsInput>
  }

  export type FunGameUpdateWithoutWonPollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    votes?: VoteUpdateManyWithoutGameNestedInput
    polls?: PollUpdateManyWithoutGamesNestedInput
  }

  export type FunGameUncheckedUpdateWithoutWonPollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    votes?: VoteUncheckedUpdateManyWithoutGameNestedInput
    polls?: PollUncheckedUpdateManyWithoutGamesNestedInput
  }

  export type VoteUpsertWithWhereUniqueWithoutPollInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutPollInput, VoteUncheckedUpdateWithoutPollInput>
    create: XOR<VoteCreateWithoutPollInput, VoteUncheckedCreateWithoutPollInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutPollInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutPollInput, VoteUncheckedUpdateWithoutPollInput>
  }

  export type VoteUpdateManyWithWhereWithoutPollInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutPollInput>
  }

  export type FunGameUpsertWithWhereUniqueWithoutPollsInput = {
    where: FunGameWhereUniqueInput
    update: XOR<FunGameUpdateWithoutPollsInput, FunGameUncheckedUpdateWithoutPollsInput>
    create: XOR<FunGameCreateWithoutPollsInput, FunGameUncheckedCreateWithoutPollsInput>
  }

  export type FunGameUpdateWithWhereUniqueWithoutPollsInput = {
    where: FunGameWhereUniqueInput
    data: XOR<FunGameUpdateWithoutPollsInput, FunGameUncheckedUpdateWithoutPollsInput>
  }

  export type FunGameUpdateManyWithWhereWithoutPollsInput = {
    where: FunGameScalarWhereInput
    data: XOR<FunGameUpdateManyMutationInput, FunGameUncheckedUpdateManyWithoutPollsInput>
  }

  export type FunGameScalarWhereInput = {
    AND?: FunGameScalarWhereInput | FunGameScalarWhereInput[]
    OR?: FunGameScalarWhereInput[]
    NOT?: FunGameScalarWhereInput | FunGameScalarWhereInput[]
    id?: StringFilter<"FunGame"> | string
    name?: StringFilter<"FunGame"> | string
    emoji?: StringNullableFilter<"FunGame"> | string | null
    isFree?: BoolFilter<"FunGame"> | boolean
  }

  export type PollCreateWithoutVotesInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winner?: FunGameCreateNestedOneWithoutWonPollsInput
    games?: FunGameCreateNestedManyWithoutPollsInput
  }

  export type PollUncheckedCreateWithoutVotesInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    winnerId?: string | null
    games?: FunGameUncheckedCreateNestedManyWithoutPollsInput
  }

  export type PollCreateOrConnectWithoutVotesInput = {
    where: PollWhereUniqueInput
    create: XOR<PollCreateWithoutVotesInput, PollUncheckedCreateWithoutVotesInput>
  }

  export type FunGameCreateWithoutVotesInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    wonPolls?: PollCreateNestedManyWithoutWinnerInput
    polls?: PollCreateNestedManyWithoutGamesInput
  }

  export type FunGameUncheckedCreateWithoutVotesInput = {
    id?: string
    name: string
    emoji?: string | null
    isFree?: boolean
    wonPolls?: PollUncheckedCreateNestedManyWithoutWinnerInput
    polls?: PollUncheckedCreateNestedManyWithoutGamesInput
  }

  export type FunGameCreateOrConnectWithoutVotesInput = {
    where: FunGameWhereUniqueInput
    create: XOR<FunGameCreateWithoutVotesInput, FunGameUncheckedCreateWithoutVotesInput>
  }

  export type PollUpsertWithoutVotesInput = {
    update: XOR<PollUpdateWithoutVotesInput, PollUncheckedUpdateWithoutVotesInput>
    create: XOR<PollCreateWithoutVotesInput, PollUncheckedCreateWithoutVotesInput>
    where?: PollWhereInput
  }

  export type PollUpdateToOneWithWhereWithoutVotesInput = {
    where?: PollWhereInput
    data: XOR<PollUpdateWithoutVotesInput, PollUncheckedUpdateWithoutVotesInput>
  }

  export type PollUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: FunGameUpdateOneWithoutWonPollsNestedInput
    games?: FunGameUpdateManyWithoutPollsNestedInput
  }

  export type PollUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    games?: FunGameUncheckedUpdateManyWithoutPollsNestedInput
  }

  export type FunGameUpsertWithoutVotesInput = {
    update: XOR<FunGameUpdateWithoutVotesInput, FunGameUncheckedUpdateWithoutVotesInput>
    create: XOR<FunGameCreateWithoutVotesInput, FunGameUncheckedCreateWithoutVotesInput>
    where?: FunGameWhereInput
  }

  export type FunGameUpdateToOneWithWhereWithoutVotesInput = {
    where?: FunGameWhereInput
    data: XOR<FunGameUpdateWithoutVotesInput, FunGameUncheckedUpdateWithoutVotesInput>
  }

  export type FunGameUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    wonPolls?: PollUpdateManyWithoutWinnerNestedInput
    polls?: PollUpdateManyWithoutGamesNestedInput
  }

  export type FunGameUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    wonPolls?: PollUncheckedUpdateManyWithoutWinnerNestedInput
    polls?: PollUncheckedUpdateManyWithoutGamesNestedInput
  }

  export type PollCreateManyWinnerInput = {
    id?: string
    question: string
    type: string
    pollNumber: number
    messageId: string
    createdAt?: Date | string
    endedAt?: Date | string | null
  }

  export type VoteCreateManyGameInput = {
    id?: string
    userId: string
    pollId: string
    createdAt?: Date | string
  }

  export type PollUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votes?: VoteUpdateManyWithoutPollNestedInput
    games?: FunGameUpdateManyWithoutPollsNestedInput
  }

  export type PollUncheckedUpdateWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votes?: VoteUncheckedUpdateManyWithoutPollNestedInput
    games?: FunGameUncheckedUpdateManyWithoutPollsNestedInput
  }

  export type PollUncheckedUpdateManyWithoutWinnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoteUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    poll?: PollUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pollId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pollId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PollUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: FunGameUpdateOneWithoutWonPollsNestedInput
    votes?: VoteUpdateManyWithoutPollNestedInput
  }

  export type PollUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
    votes?: VoteUncheckedUpdateManyWithoutPollNestedInput
  }

  export type PollUncheckedUpdateManyWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    pollNumber?: IntFieldUpdateOperationsInput | number
    messageId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winnerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VoteCreateManyPollInput = {
    id?: string
    userId: string
    gameId: string
    createdAt?: Date | string
  }

  export type VoteUpdateWithoutPollInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: FunGameUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutPollInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutPollInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FunGameUpdateWithoutPollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    wonPolls?: PollUpdateManyWithoutWinnerNestedInput
    votes?: VoteUpdateManyWithoutGameNestedInput
  }

  export type FunGameUncheckedUpdateWithoutPollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
    wonPolls?: PollUncheckedUpdateManyWithoutWinnerNestedInput
    votes?: VoteUncheckedUpdateManyWithoutGameNestedInput
  }

  export type FunGameUncheckedUpdateManyWithoutPollsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}